D: [iurt_root_command] chroot
Installing /home/stig/rpmbuild/SRPMS/botan2-2.14.0-1.mga8.src.rpm
Executing(%prep): /bin/sh -e /home/stig/rpmbuild/tmp/rpm-tmp.TyjjOv
+ umask 022
+ cd /home/stig/rpmbuild/BUILD
+ '[' 1 -eq 1 ']'
+ '[' 1 -eq 1 ']'
+ '[' 1 -eq 1 ']'
+ cd /home/stig/rpmbuild/BUILD
+ rm -rf Botan-2.14.0
+ /usr/bin/xz -dc /home/stig/rpmbuild/SOURCES/botan2-2.14.0.tar.xz
+ /usr/bin/tar -xof -
+ STATUS=0
+ '[' 0 -ne 0 ']'
+ cd Botan-2.14.0
+ /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
+ /usr/bin/cat /home/stig/rpmbuild/SOURCES/botan2-2.14.0-add-noindex-to-doc.patch
+ /usr/bin/patch -p1 -s --fuzz=0 --no-backup-if-mismatch
+ pathfix.py -pni /usr/bin/python3 configure.py src/scripts/build_docs.py src/scripts/check.py src/scripts/ci_build.py src/scripts/cleanup.py src/scripts/dist.py src/scripts/gen_os_features.py src/scripts/install.py src/scripts/python_unittests.py src/scripts/python_unittests_unix.py src/scripts/show_dependencies.py src/scripts/test_cli_crypt.py src/scripts/test_python.py src/scripts/tls_suite_info.py src/python/botan2.py
configure.py: updating
src/scripts/build_docs.py: updating
src/scripts/check.py: updating
src/scripts/ci_build.py: updating
src/scripts/cleanup.py: updating
src/scripts/dist.py: updating
src/scripts/gen_os_features.py: updating
src/scripts/install.py: updating
src/scripts/python_unittests.py: updating
src/scripts/python_unittests_unix.py: updating
src/scripts/show_dependencies.py: updating
src/scripts/test_cli_crypt.py: updating
src/scripts/test_python.py: updating
src/scripts/tls_suite_info.py: updating
src/python/botan2.py: updating
+ RPM_EC=0
++ jobs -p
+ exit 0
Executing(%build): /bin/sh -e /home/stig/rpmbuild/tmp/rpm-tmp.BeIQqu
+ umask 022
+ cd /home/stig/rpmbuild/BUILD
+ cd Botan-2.14.0
+ '[' 1 -eq 1 ']'
+ '[' 1 -eq 1 ']'
+ ./configure.py --prefix=/usr --libdir=lib64 --docdir=/usr/share/doc --cc=gcc --os=linux --cpu=x86_64 --enable-modules=bzip2,zlib,openssl,boost,sqlite3,lzma --with-python-version=3.8 --with-sphinx --disable-static-library --with-debug-info
   INFO: ./configure.py invoked with options "--prefix=/usr --libdir=lib64 --docdir=/usr/share/doc --cc=gcc --os=linux --cpu=x86_64 --enable-modules=bzip2,zlib,openssl,boost,sqlite3,lzma --with-python-version=3.8 --with-sphinx --disable-static-library --with-debug-info"
   INFO: Configuring to build Botan 2.14.0 (revision git:3a26a33de2459c40cdfb766f4035a60cf449ab1c)
   INFO: Running under 3.8.2 (default, Feb 29 2020, 05:52:21) [GCC 9.2.1 20200222]
   INFO: Autodetected platform information: OS="Linux" machine="x86_64" proc="x86_64"
   INFO: Found rst2man (use --without-rst2man to disable)
   INFO: Using /etc/pki/tls/certs/ca-bundle.crt as system certificate store
   INFO: Auto-detected compiler version 9.3
   INFO: Auto-detected compiler arch x86_64
   INFO: Target is gcc:9.3-linux-x86_64
   INFO: Assuming target x86_64 is little endian
   INFO: Skipping (incompatible CPU): aes_armv8 aes_power8 p9_darn sha1_armv8 sha2_32_armv8 sm4_armv8
   INFO: Skipping (incompatible OS): certstor_system_macos certstor_system_windows commoncrypto getentropy win32_stats
   INFO: Skipping (requires external dependency): tpm
   INFO: Enabling use of external dependency boost
   INFO: Enabling use of external dependency bzip2
   INFO: Enabling use of external dependency lzma
   INFO: Enabling use of external dependency openssl
   INFO: Enabling use of external dependency sqlite3
   INFO: Enabling use of external dependency zlib
   INFO: Loading modules: adler32 aead aes aes_ni aes_vperm aont argon2 aria asio asn1 auto_rng base base32 base58 base64 bcrypt bcrypt_pbkdf bigint blake2 block blowfish boost bzip2 camellia cascade cast128 cast256 cbc cbc_mac ccm cecpq1 certstor_flatfile certstor_sql certstor_sqlite3 certstor_system cfb chacha chacha20poly1305 chacha_avx2 chacha_rng chacha_simd32 checksum clmul_cpu clmul_ssse3 cmac comb4p compression cpuid crc24 crc32 cryptobox ctr curve25519 des dev_random dh dl_algo dl_group dlies dsa dyn_load eax ec_group ecc_key ecdh ecdsa ecgdsa ecies eckcdsa ed25519 elgamal eme_oaep eme_pkcs1 eme_raw emsa1 emsa_pkcs1 emsa_pssr emsa_raw emsa_x931 entropy fd_unix ffi filters fpe_fe1 gcm gmac gost_28147 gost_3410 gost_3411 hash hash_id hex hkdf hmac hmac_drbg hotp http_util idea idea_sse2 iso9796 kasumi kdf kdf1 kdf1_iso18033 kdf2 keccak keypair lion locking_allocator lzma mac mce mceies md4 md5 mdx_hash mem_pool mgf1 misty1 mode_pad modes mp newhope nist_keywrap noekeon noekeon_simd numbertheory ocb ofb openssl par_hash passhash9 pbes2 pbkdf pbkdf1 pbkdf2 pem pgp_s2k pk_pad pkcs11 poly1305 poly_dbl prf_tls prf_x942 proc_walk psk_db pubkey rc4 rdrand rdrand_rng rdseed rfc3394 rfc6979 rmd160 rng roughtime rsa salsa20 scrypt seed serpent serpent_avx2 serpent_simd sessions_sql sessions_sqlite3 sha1 sha1_sse2 sha1_x86 sha2_32 sha2_32_bmi2 sha2_32_x86 sha2_64 sha2_64_bmi2 sha3 sha3_bmi2 shacal2 shacal2_avx2 shacal2_simd shacal2_x86 shake shake_cipher simd simd_avx2 siphash siv skein sm2 sm3 sm4 socket sodium sp800_108 sp800_56a sp800_56c sqlite3 srp6 stateful_rng stream streebog system_rng thread_utils threefish_512 threefish_512_avx2 tiger tls tls_10 tls_cbc tss twofish utils uuid whirlpool x509 x919_mac xmss xtea xts zlib
   INFO: Using symlink to link files into build dir (use --link-method to change)
   INFO: Botan 2.14.0 (revision git:3a26a33de2459c40cdfb766f4035a60cf449ab1c) (release dated 20200406) build setup is complete
+ /usr/bin/make -O -j4 V=1 VERBOSE=1
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_attribute.cpp -o build/obj/lib/asn1_attribute.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/alg_id.cpp -o build/obj/lib/asn1_alg_id.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_obj.cpp -o build/obj/lib/asn1_obj.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_oid.cpp -o build/obj/lib/asn1_oid.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_str.cpp -o build/obj/lib/asn1_str.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_time.cpp -o build/obj/lib/asn1_time.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/asn1_print.cpp -o build/obj/lib/asn1_print.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/ber_dec.cpp -o build/obj/lib/asn1_ber_dec.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/base/buf_comp.cpp -o build/obj/lib/base_buf_comp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/der_enc.cpp -o build/obj/lib/asn1_der_enc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/base/sym_algo.cpp -o build/obj/lib/base_sym_algo.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/oids.cpp -o build/obj/lib/asn1_oids.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/base/scan_name.cpp -o build/obj/lib/base_scan_name.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/base/symkey.cpp -o build/obj/lib/base_symkey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -maes -mpclmul -msse2 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/block/aes/aes_ni/aes_ni.cpp -o build/obj/lib/block_aes_ni.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/aes/aes.cpp -o build/obj/lib/block_aes.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/aria/aria.cpp -o build/obj/lib/block_aria.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/block_cipher.cpp -o build/obj/lib/block_cipher.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/block/aes/aes_vperm/aes_vperm.cpp -o build/obj/lib/block_aes_vperm.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/blowfish/blowfish.cpp -o build/obj/lib/block_blowfish.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/cascade/cascade.cpp -o build/obj/lib/block_cascade.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/camellia/camellia.cpp -o build/obj/lib/block_camellia.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/cast128/cast128.cpp -o build/obj/lib/block_cast128.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/cast256/cast256.cpp -o build/obj/lib/block_cast256.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/des/des_tab.cpp -o build/obj/lib/block_des_tab.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/des/des.cpp -o build/obj/lib/block_des.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/des/desx.cpp -o build/obj/lib/block_des_desx.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/gost_28147/gost_28147.cpp -o build/obj/lib/block_gost_28147.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/block/idea/idea_sse2/idea_sse2.cpp -o build/obj/lib/block_idea_sse2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/idea/idea.cpp -o build/obj/lib/block_idea.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/kasumi/kasumi.cpp -o build/obj/lib/block_kasumi.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/misty1/misty1.cpp -o build/obj/lib/block_misty1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/lion/lion.cpp -o build/obj/lib/block_lion.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/noekeon/noekeon.cpp -o build/obj/lib/block_noekeon.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/block/noekeon/noekeon_simd/noekeon_simd.cpp -o build/obj/lib/block_noekeon_simd.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/seed/seed.cpp -o build/obj/lib/block_seed.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/serpent/serpent.cpp -o build/obj/lib/block_serpent.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/asn1/oid_maps.cpp -o build/obj/lib/asn1_oid_maps.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/shacal2/shacal2.cpp -o build/obj/lib/block_shacal2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/block/shacal2/shacal2_simd/shacal2_simd.cpp -o build/obj/lib/block_shacal2_simd.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mavx2 -Ibuild/include -Ibuild/include/external -c src/lib/block/shacal2/shacal2_avx2/shacal2_avx2.cpp -o build/obj/lib/block_shacal2_avx2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msha -msse2 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/block/shacal2/shacal2_x86/shacal2_x86.cpp -o build/obj/lib/block_shacal2_x86.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/sm4/sm4.cpp -o build/obj/lib/block_sm4.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/threefish_512/threefish_512.cpp -o build/obj/lib/block_threefish_512.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mavx2 -Ibuild/include -Ibuild/include/external -c src/lib/block/serpent/serpent_avx2/serpent_avx2.cpp -o build/obj/lib/block_serpent_avx2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/twofish/twofish_tab.cpp -o build/obj/lib/block_twofish_tab.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/twofish/twofish.cpp -o build/obj/lib/block_twofish.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/codec/base32/base32.cpp -o build/obj/lib/codec_base32.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/block/xtea/xtea.cpp -o build/obj/lib/block_xtea.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mavx2 -Ibuild/include -Ibuild/include/external -c src/lib/block/threefish_512/threefish_512_avx2/threefish_512_avx2.cpp -o build/obj/lib/block_threefish_512_threefish_512_avx2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/codec/base64/base64.cpp -o build/obj/lib/codec_base64.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/block/serpent/serpent_simd/serpent_simd.cpp -o build/obj/lib/block_serpent_simd.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/codec/base58/base58.cpp -o build/obj/lib/codec_base58.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_25519.cpp -o build/obj/lib/compat_sodium_25519.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/codec/hex/hex.cpp -o build/obj/lib/codec_hex.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_auth.cpp -o build/obj/lib/compat_sodium_auth.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_box.cpp -o build/obj/lib/compat_sodium_box.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_aead.cpp -o build/obj/lib/compat_sodium_aead.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_chacha.cpp -o build/obj/lib/compat_sodium_chacha.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_salsa.cpp -o build/obj/lib/compat_sodium_salsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_utils.cpp -o build/obj/lib/compat_sodium_utils.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compat/sodium/sodium_secretbox.cpp -o build/obj/lib/compat_sodium_secretbox.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compression/bzip2/bzip2.cpp -o build/obj/lib/compression_bzip2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compression/compression.cpp -o build/obj/lib/compression.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compression/compress_utils.cpp -o build/obj/lib/compression_compress_utils.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compression/lzma/lzma.cpp -o build/obj/lib/compression_lzma.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/entropy/dev_random/dev_random.cpp -o build/obj/lib/entropy_dev_random.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/compression/zlib/zlib.cpp -o build/obj/lib/compression_zlib.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/entropy/entropy_srcs.cpp -o build/obj/lib/entropy_srcs.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/entropy/rdrand/rdrand.cpp -o build/obj/lib/entropy_rdrand.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/entropy/proc_walk/proc_walk.cpp -o build/obj/lib/entropy_proc_walk.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi.cpp -o build/obj/lib/ffi.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_block.cpp -o build/obj/lib/ffi_block.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mrdseed -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/entropy/rdseed/rdseed.cpp -o build/obj/lib/entropy_rdseed.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_hash.cpp -o build/obj/lib/ffi_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_fpe.cpp -o build/obj/lib/ffi_fpe.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_cipher.cpp -o build/obj/lib/ffi_cipher.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_hotp.cpp -o build/obj/lib/ffi_hotp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_keywrap.cpp -o build/obj/lib/ffi_keywrap.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_kdf.cpp -o build/obj/lib/ffi_kdf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_mac.cpp -o build/obj/lib/ffi_mac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_cert.cpp -o build/obj/lib/ffi_cert.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_pk_op.cpp -o build/obj/lib/ffi_pk_op.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_pkey.cpp -o build/obj/lib/ffi_pkey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_mp.cpp -o build/obj/lib/ffi_mp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_rng.cpp -o build/obj/lib/ffi_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_totp.cpp -o build/obj/lib/ffi_totp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/algo_filt.cpp -o build/obj/lib/filters_algo_filt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/b64_filt.cpp -o build/obj/lib/filters_b64_filt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/basefilt.cpp -o build/obj/lib/filters_basefilt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/buf_filt.cpp -o build/obj/lib/filters_buf_filt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/comp_filter.cpp -o build/obj/lib/filters_comp_filter.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/cipher_filter.cpp -o build/obj/lib/filters_cipher_filter.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/data_snk.cpp -o build/obj/lib/filters_data_snk.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/ffi/ffi_pkey_algs.cpp -o build/obj/lib/ffi_pkey_algs.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/fd_unix/fd_unix.cpp -o build/obj/lib/filters_fd_unix.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/filter.cpp -o build/obj/lib/filters_filter.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/hex_filt.cpp -o build/obj/lib/filters_hex_filt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/out_buf.cpp -o build/obj/lib/filters_out_buf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/pipe_io.cpp -o build/obj/lib/filters_pipe_io.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/pipe.cpp -o build/obj/lib/filters_pipe.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/pipe_rw.cpp -o build/obj/lib/filters_pipe_rw.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/secqueue.cpp -o build/obj/lib/filters_secqueue.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/checksum/adler32/adler32.cpp -o build/obj/lib/hash_checksum_adler32.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/checksum/crc24/crc24.cpp -o build/obj/lib/hash_checksum_crc24.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/blake2/blake2b.cpp -o build/obj/lib/hash_blake2_blake2b.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/filters/threaded_fork.cpp -o build/obj/lib/filters_threaded_fork.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/checksum/crc32/crc32.cpp -o build/obj/lib/hash_checksum_crc32.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/keccak/keccak.cpp -o build/obj/lib/hash_keccak.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/gost_3411/gost_3411.cpp -o build/obj/lib/hash_gost_3411.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/comb4p/comb4p.cpp -o build/obj/lib/hash_comb4p.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/hash.cpp -o build/obj/lib/hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/md4/md4.cpp -o build/obj/lib/hash_md4.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/mdx_hash/mdx_hash.cpp -o build/obj/lib/hash_mdx_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/md5/md5.cpp -o build/obj/lib/hash_md5.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/par_hash/par_hash.cpp -o build/obj/lib/hash_par_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha1/sha1_sse2/sha1_sse2.cpp -o build/obj/lib/hash_sha1_sse2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/rmd160/rmd160.cpp -o build/obj/lib/hash_rmd160.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha1/sha160.cpp -o build/obj/lib/hash_sha1_sha160.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msha -msse2 -msse4.1 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha1/sha1_x86/sha1_x86.cpp -o build/obj/lib/hash_sha1_x86.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mbmi -mbmi2 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha2_32/sha2_32_bmi2/sha2_32_bmi2.cpp -o build/obj/lib/hash_sha2_32_sha2_32_bmi2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msha -msse2 -msse4.1 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha2_32/sha2_32_x86/sha2_32_x86.cpp -o build/obj/lib/hash_sha2_32_sha2_32_x86.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha2_32/sha2_32.cpp -o build/obj/lib/hash_sha2_32.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha3/sha3.cpp -o build/obj/lib/hash_sha3.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mbmi -mbmi2 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha3/sha3_bmi2/sha3_bmi2.cpp -o build/obj/lib/hash_sha3_bmi2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mbmi -mbmi2 -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha2_64/sha2_64_bmi2/sha2_64_bmi2.cpp -o build/obj/lib/hash_sha2_64_sha2_64_bmi2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/shake/shake.cpp -o build/obj/lib/hash_shake.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/sha2_64/sha2_64.cpp -o build/obj/lib/hash_sha2_64.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/skein/skein_512.cpp -o build/obj/lib/hash_skein_512.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/streebog/streebog_precalc.cpp -o build/obj/lib/hash_streebog_precalc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/tiger/tig_tab.cpp -o build/obj/lib/hash_tiger_tig_tab.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/streebog/streebog.cpp -o build/obj/lib/hash_streebog.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/sm3/sm3.cpp -o build/obj/lib/hash_sm3.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/whirlpool/whrl_tab.cpp -o build/obj/lib/hash_whirlpool_whrl_tab.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/tiger/tiger.cpp -o build/obj/lib/hash_tiger.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/hash/whirlpool/whirlpool.cpp -o build/obj/lib/hash_whirlpool.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/hkdf/hkdf.cpp -o build/obj/lib/kdf_hkdf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/kdf1/kdf1.cpp -o build/obj/lib/kdf_kdf1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/kdf1_iso18033/kdf1_iso18033.cpp -o build/obj/lib/kdf_kdf1_iso18033.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/kdf2/kdf2.cpp -o build/obj/lib/kdf_kdf2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/prf_tls/prf_tls.cpp -o build/obj/lib/kdf_prf_tls.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/kdf.cpp -o build/obj/lib/kdf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/prf_x942/prf_x942.cpp -o build/obj/lib/kdf_prf_x942.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/sp800_108/sp800_108.cpp -o build/obj/lib/kdf_sp800_108.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/sp800_56a/sp800_56a.cpp -o build/obj/lib/kdf_sp800_56a.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/kdf/sp800_56c/sp800_56c.cpp -o build/obj/lib/kdf_sp800_56c.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/cbc_mac/cbc_mac.cpp -o build/obj/lib/mac_cbc_mac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/cmac/cmac.cpp -o build/obj/lib/mac_cmac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/gmac/gmac.cpp -o build/obj/lib/mac_gmac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/hmac/hmac.cpp -o build/obj/lib/mac_hmac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/mac.cpp -o build/obj/lib/mac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/poly1305/poly1305.cpp -o build/obj/lib/mac_poly1305.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/siphash/siphash.cpp -o build/obj/lib/mac_siphash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/mac/x919_mac/x919_mac.cpp -o build/obj/lib/mac_x919_mac.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/big_io.cpp -o build/obj/lib/math_bigint_big_io.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/big_code.cpp -o build/obj/lib/math_bigint_big_code.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/big_ops3.cpp -o build/obj/lib/math_bigint_big_ops3.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/big_ops2.cpp -o build/obj/lib/math_bigint_big_ops2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/big_rand.cpp -o build/obj/lib/math_bigint_big_rand.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/divide.cpp -o build/obj/lib/math_bigint_divide.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/bigint/bigint.cpp -o build/obj/lib/math_bigint.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/mp/mp_karat.cpp -o build/obj/lib/math_mp_karat.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/mp/mp_monty.cpp -o build/obj/lib/math_mp_monty.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/jacobi.cpp -o build/obj/lib/math_numbertheory_jacobi.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/dsa_gen.cpp -o build/obj/lib/math_numbertheory_dsa_gen.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/mp/mp_comba.cpp -o build/obj/lib/math_mp_comba.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/make_prm.cpp -o build/obj/lib/math_numbertheory_make_prm.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/mod_inv.cpp -o build/obj/lib/math_numbertheory_mod_inv.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/monty.cpp -o build/obj/lib/math_numbertheory_monty.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/mp_numth.cpp -o build/obj/lib/math_numbertheory_mp_numth.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/monty_exp.cpp -o build/obj/lib/math_numbertheory_monty_exp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/nistp_redc.cpp -o build/obj/lib/math_numbertheory_nistp_redc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/mp/mp_monty_n.cpp -o build/obj/lib/math_mp_monty_n.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/primes.cpp -o build/obj/lib/math_numbertheory_primes.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/numthry.cpp -o build/obj/lib/math_numbertheory_numthry.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/primality.cpp -o build/obj/lib/math_numbertheory_primality.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/pow_mod.cpp -o build/obj/lib/math_numbertheory_pow_mod.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/reducer.cpp -o build/obj/lib/math_numbertheory_reducer.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/math/numbertheory/ressol.cpp -o build/obj/lib/math_numbertheory_ressol.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/hotp/hotp.cpp -o build/obj/lib/misc_hotp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/aont/package.cpp -o build/obj/lib/misc_aont_package.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/cryptobox/cryptobox.cpp -o build/obj/lib/misc_cryptobox.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/hotp/totp.cpp -o build/obj/lib/misc_hotp_totp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/fpe_fe1/fpe_fe1.cpp -o build/obj/lib/misc_fpe_fe1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/rfc3394/rfc3394.cpp -o build/obj/lib/misc_rfc3394.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/nist_keywrap/nist_keywrap.cpp -o build/obj/lib/misc_nist_keywrap.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/srp6/srp6.cpp -o build/obj/lib/misc_srp6.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/aead.cpp -o build/obj/lib/modes_aead.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/tss/tss.cpp -o build/obj/lib/misc_tss.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/chacha20poly1305/chacha20poly1305.cpp -o build/obj/lib/modes_aead_chacha20poly1305.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/ccm/ccm.cpp -o build/obj/lib/modes_aead_ccm.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/eax/eax.cpp -o build/obj/lib/modes_aead_eax.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -maes -mpclmul -msse2 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/gcm/clmul_cpu/clmul_cpu.cpp -o build/obj/lib/modes_aead_gcm_clmul_cpu.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -mssse3 -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/gcm/clmul_ssse3/clmul_ssse3.cpp -o build/obj/lib/modes_aead_gcm_clmul_ssse3.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/misc/roughtime/roughtime.cpp -o build/obj/lib/misc_roughtime.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/gcm/gcm.cpp -o build/obj/lib/modes_aead_gcm.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/gcm/ghash.cpp -o build/obj/lib/modes_aead_gcm_ghash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/cfb/cfb.cpp -o build/obj/lib/modes_cfb.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/cbc/cbc.cpp -o build/obj/lib/modes_cbc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/siv/siv.cpp -o build/obj/lib/modes_aead_siv.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/aead/ocb/ocb.cpp -o build/obj/lib/modes_aead_ocb.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/mode_pad/mode_pad.cpp -o build/obj/lib/modes_mode_pad.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/cipher_mode.cpp -o build/obj/lib/modes_cipher_mode.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/modes/xts/xts.cpp -o build/obj/lib/modes_xts.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/passhash/passhash9/passhash9.cpp -o build/obj/lib/passhash_passhash9.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/passhash/bcrypt/bcrypt.cpp -o build/obj/lib/passhash_bcrypt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/argon2/argon2pwhash.cpp -o build/obj/lib/pbkdf_argon2_argon2pwhash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/argon2/argon2fmt.cpp -o build/obj/lib/pbkdf_argon2_argon2fmt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/bcrypt_pbkdf/bcrypt_pbkdf.cpp -o build/obj/lib/pbkdf_bcrypt_pbkdf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/argon2/argon2.cpp -o build/obj/lib/pbkdf_argon2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/pbkdf1/pbkdf1.cpp -o build/obj/lib/pbkdf_pbkdf1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/pbkdf.cpp -o build/obj/lib/pbkdf.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/pbkdf2/pbkdf2.cpp -o build/obj/lib/pbkdf_pbkdf2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/pgp_s2k/pgp_s2k.cpp -o build/obj/lib/pbkdf_pgp_s2k.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/pwdhash.cpp -o build/obj/lib/pbkdf_pwdhash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/eme.cpp -o build/obj/lib/pk_pad_eme.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/eme_oaep/oaep.cpp -o build/obj/lib/pk_pad_eme_oaep_oaep.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pbkdf/scrypt/scrypt.cpp -o build/obj/lib/pbkdf_scrypt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/eme_pkcs1/eme_pkcs.cpp -o build/obj/lib/pk_pad_eme_pkcs1_eme_pkcs.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/eme_raw/eme_raw.cpp -o build/obj/lib/pk_pad_eme_raw.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa1/emsa1.cpp -o build/obj/lib/pk_pad_emsa1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa.cpp -o build/obj/lib/pk_pad_emsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa_pkcs1/emsa_pkcs1.cpp -o build/obj/lib/pk_pad_emsa_pkcs1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa_x931/emsa_x931.cpp -o build/obj/lib/pk_pad_emsa_x931.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa_raw/emsa_raw.cpp -o build/obj/lib/pk_pad_emsa_raw.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/hash_id/hash_id.cpp -o build/obj/lib/pk_pad_hash_id.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/emsa_pssr/pssr.cpp -o build/obj/lib/pk_pad_emsa_pssr_pssr.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/mgf1/mgf1.cpp -o build/obj/lib/pk_pad_mgf1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_block.cpp -o build/obj/lib/prov_openssl_block.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/padding.cpp -o build/obj/lib/pk_pad_padding.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pk_pad/iso9796/iso9796.cpp -o build/obj/lib/pk_pad_iso9796.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_mode.cpp -o build/obj/lib/prov_openssl_mode.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_ec.cpp -o build/obj/lib/prov_openssl_ec.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_hash.cpp -o build/obj/lib/prov_openssl_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_rc4.cpp -o build/obj/lib/prov_openssl_rc4.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11.cpp -o build/obj/lib/prov_pkcs11_p11.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/openssl/openssl_rsa.cpp -o build/obj/lib/prov_openssl_rsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_ecc_key.cpp -o build/obj/lib/prov_pkcs11_p11_ecc_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_ecdh.cpp -o build/obj/lib/prov_pkcs11_p11_ecdh.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_module.cpp -o build/obj/lib/prov_pkcs11_p11_module.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_randomgenerator.cpp -o build/obj/lib/prov_pkcs11_p11_randomgenerator.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_ecdsa.cpp -o build/obj/lib/prov_pkcs11_p11_ecdsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_mechanism.cpp -o build/obj/lib/prov_pkcs11_p11_mechanism.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_session.cpp -o build/obj/lib/prov_pkcs11_p11_session.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_object.cpp -o build/obj/lib/prov_pkcs11_p11_object.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_slot.cpp -o build/obj/lib/prov_pkcs11_p11_slot.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/psk_db/psk_db.cpp -o build/obj/lib/psk_db.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_x509.cpp -o build/obj/lib/prov_pkcs11_p11_x509.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/psk_db/psk_db_sql.cpp -o build/obj/lib/psk_db_psk_db_sql.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/blinding.cpp -o build/obj/lib/pubkey_blinding.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/prov/pkcs11/p11_rsa.cpp -o build/obj/lib/prov_pkcs11_p11_rsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/cecpq1/cecpq1.cpp -o build/obj/lib/pubkey_cecpq1.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dl_algo/dl_algo.cpp -o build/obj/lib/pubkey_dl_algo.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/curve25519/curve25519.cpp -o build/obj/lib/pubkey_curve25519.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dh/dh.cpp -o build/obj/lib/pubkey_dh.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/curve25519/donna.cpp -o build/obj/lib/pubkey_curve25519_donna.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dl_group/dl_named.cpp -o build/obj/lib/pubkey_dl_group_dl_named.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dl_group/dl_group.cpp -o build/obj/lib/pubkey_dl_group.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dsa/dsa.cpp -o build/obj/lib/pubkey_dsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/dlies/dlies.cpp -o build/obj/lib/pubkey_dlies.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ec_group/ec_named.cpp -o build/obj/lib/pubkey_ec_group_ec_named.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ec_group/curve_gfp.cpp -o build/obj/lib/pubkey_ec_group_curve_gfp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ec_group/ec_group.cpp -o build/obj/lib/pubkey_ec_group.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ec_group/point_gfp.cpp -o build/obj/lib/pubkey_ec_group_point_gfp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ecc_key/ecc_key.cpp -o build/obj/lib/pubkey_ecc_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ecdh/ecdh.cpp -o build/obj/lib/pubkey_ecdh.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ecdsa/ecdsa.cpp -o build/obj/lib/pubkey_ecdsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ecgdsa/ecgdsa.cpp -o build/obj/lib/pubkey_ecgdsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/ed25519.cpp -o build/obj/lib/pubkey_ed25519.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ec_group/point_mul.cpp -o build/obj/lib/pubkey_ec_group_point_mul.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/eckcdsa/eckcdsa.cpp -o build/obj/lib/pubkey_eckcdsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ecies/ecies.cpp -o build/obj/lib/pubkey_ecies.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/sc_muladd.cpp -o build/obj/lib/pubkey_ed25519_sc_muladd.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/ed25519_fe.cpp -o build/obj/lib/pubkey_ed25519_fe.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/sc_reduce.cpp -o build/obj/lib/pubkey_ed25519_sc_reduce.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/ed25519_key.cpp -o build/obj/lib/pubkey_ed25519_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/keypair/keypair.cpp -o build/obj/lib/pubkey_keypair.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/elgamal/elgamal.cpp -o build/obj/lib/pubkey_elgamal.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/gost_3410/gost_3410.cpp -o build/obj/lib/pubkey_gost_3410.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/gf2m_rootfind_dcmp.cpp -o build/obj/lib/pubkey_mce_gf2m_rootfind_dcmp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/code_based_key_gen.cpp -o build/obj/lib/pubkey_mce_code_based_key_gen.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/gf2m_small_m.cpp -o build/obj/lib/pubkey_mce_gf2m_small_m.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/mce_workfactor.cpp -o build/obj/lib/pubkey_mce_workfactor.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/mceliece.cpp -o build/obj/lib/pubkey_mce_mceliece.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/goppa_code.cpp -o build/obj/lib/pubkey_mce_goppa_code.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/ed25519/ge.cpp -o build/obj/lib/pubkey_ed25519_ge.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mceies/mceies.cpp -o build/obj/lib/pubkey_mceies.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/newhope/newhope.cpp -o build/obj/lib/pubkey_newhope.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/mceliece_key.cpp -o build/obj/lib/pubkey_mce_mceliece_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pem/pem.cpp -o build/obj/lib/pubkey_pem.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pbes2/pbes2.cpp -o build/obj/lib/pubkey_pbes2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pk_keys.cpp -o build/obj/lib/pubkey_pk_keys.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/mce/polyn_gf2m.cpp -o build/obj/lib/pubkey_mce_polyn_gf2m.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pk_algs.cpp -o build/obj/lib/pubkey_pk_algs.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pk_ops.cpp -o build/obj/lib/pubkey_pk_ops.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/rfc6979/rfc6979.cpp -o build/obj/lib/pubkey_rfc6979.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pubkey.cpp -o build/obj/lib/pubkey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/pkcs8.cpp -o build/obj/lib/pubkey_pkcs8.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/workfactor.cpp -o build/obj/lib/pubkey_workfactor.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/x509_key.cpp -o build/obj/lib/pubkey_x509_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/sm2/sm2.cpp -o build/obj/lib/pubkey_sm2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/sm2/sm2_enc.cpp -o build/obj/lib/pubkey_sm2_enc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_common_ops.cpp -o build/obj/lib/pubkey_xmss_common_ops.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_hash.cpp -o build/obj/lib/pubkey_xmss_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_parameters.cpp -o build/obj/lib/pubkey_xmss_parameters.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_index_registry.cpp -o build/obj/lib/pubkey_xmss_index_registry.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/rsa/rsa.cpp -o build/obj/lib/pubkey_rsa.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_signature.cpp -o build/obj/lib/pubkey_xmss_signature.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_publickey.cpp -o build/obj/lib/pubkey_xmss_publickey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_wots_parameters.cpp -o build/obj/lib/pubkey_xmss_wots_parameters.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_verification_operation.cpp -o build/obj/lib/pubkey_xmss_verification_operation.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_signature_operation.cpp -o build/obj/lib/pubkey_xmss_signature_operation.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_wots_privatekey.cpp -o build/obj/lib/pubkey_xmss_wots_privatekey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_wots_publickey.cpp -o build/obj/lib/pubkey_xmss_wots_publickey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/auto_rng/auto_rng.cpp -o build/obj/lib/rng_auto_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/chacha_rng/chacha_rng.cpp -o build/obj/lib/rng_chacha_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mrdrnd -Ibuild/include -Ibuild/include/external -c src/lib/rng/rdrand_rng/rdrand_rng.cpp -o build/obj/lib/rng_rdrand_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/hmac_drbg/hmac_drbg.cpp -o build/obj/lib/rng_hmac_drbg.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/pubkey/xmss/xmss_privatekey.cpp -o build/obj/lib/pubkey_xmss_privatekey.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/rng.cpp -o build/obj/lib/rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/stateful_rng/stateful_rng.cpp -o build/obj/lib/rng_stateful_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/rng/system_rng/system_rng.cpp -o build/obj/lib/rng_system_rng.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/lib/stream/chacha/chacha_simd32/chacha_simd32.cpp -o build/obj/lib/stream_chacha_simd32.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/chacha/chacha.cpp -o build/obj/lib/stream_chacha.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -mavx2 -Ibuild/include -Ibuild/include/external -c src/lib/stream/chacha/chacha_avx2/chacha_avx2.cpp -o build/obj/lib/stream_chacha_avx2.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/ctr/ctr.cpp -o build/obj/lib/stream_ctr.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/ofb/ofb.cpp -o build/obj/lib/stream_ofb.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/rc4/rc4.cpp -o build/obj/lib/stream_rc4.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/salsa20/salsa20.cpp -o build/obj/lib/stream_salsa20.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/shake_cipher/shake_cipher.cpp -o build/obj/lib/stream_shake_cipher.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/stream/stream_cipher.cpp -o build/obj/lib/stream_cipher.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/credentials_manager.cpp -o build/obj/lib/tls_credentials_manager.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_cert_status.cpp -o build/obj/lib/tls_msg_cert_status.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_cert_verify.cpp -o build/obj/lib/tls_msg_cert_verify.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_certificate.cpp -o build/obj/lib/tls_msg_certificate.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_cert_req.cpp -o build/obj/lib/tls_msg_cert_req.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_finished.cpp -o build/obj/lib/tls_msg_finished.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_hello_verify.cpp -o build/obj/lib/tls_msg_hello_verify.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_client_hello.cpp -o build/obj/lib/tls_msg_client_hello.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_server_hello.cpp -o build/obj/lib/tls_msg_server_hello.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_client_kex.cpp -o build/obj/lib/tls_msg_client_kex.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_session_ticket.cpp -o build/obj/lib/tls_msg_session_ticket.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/sessions_sqlite3/tls_session_manager_sqlite.cpp -o build/obj/lib/tls_sessions_sqlite3_tls_session_manager_sqlite.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_alert.cpp -o build/obj/lib/tls_alert.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/msg_server_kex.cpp -o build/obj/lib/tls_msg_server_kex.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_algos.cpp -o build/obj/lib/tls_algos.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/sessions_sql/tls_session_manager_sql.cpp -o build/obj/lib/tls_sessions_sql_tls_session_manager_sql.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_blocking.cpp -o build/obj/lib/tls_blocking.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_cbc/tls_cbc.cpp -o build/obj/lib/tls_cbc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_ciphersuite.cpp -o build/obj/lib/tls_ciphersuite.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_callbacks.cpp -o build/obj/lib/tls_callbacks.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_handshake_hash.cpp -o build/obj/lib/tls_handshake_hash.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_channel.cpp -o build/obj/lib/tls_channel.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_handshake_io.cpp -o build/obj/lib/tls_handshake_io.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_extensions.cpp -o build/obj/lib/tls_extensions.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_client.cpp -o build/obj/lib/tls_client.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_handshake_state.cpp -o build/obj/lib/tls_handshake_state.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_record.cpp -o build/obj/lib/tls_record.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_session_key.cpp -o build/obj/lib/tls_session_key.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_session.cpp -o build/obj/lib/tls_session.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_policy.cpp -o build/obj/lib/tls_policy.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_suite_info.cpp -o build/obj/lib/tls_suite_info.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_version.cpp -o build/obj/lib/tls_version.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_session_manager_memory.cpp -o build/obj/lib/tls_session_manager_memory.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_text_policy.cpp -o build/obj/lib/tls_text_policy.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/assert.cpp -o build/obj/lib/utils_assert.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/calendar.cpp -o build/obj/lib/utils_calendar.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/charset.cpp -o build/obj/lib/utils_charset.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/cpuid/cpuid_arm.cpp -o build/obj/lib/utils_cpuid_arm.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/tls/tls_server.cpp -o build/obj/lib/tls_server.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/cpuid/cpuid.cpp -o build/obj/lib/utils_cpuid.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/cpuid/cpuid_ppc.cpp -o build/obj/lib/utils_cpuid_ppc.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/cpuid/cpuid_x86.cpp -o build/obj/lib/utils_cpuid_x86.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/dyn_load/dyn_load.cpp -o build/obj/lib/utils_dyn_load.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/ct_utils.cpp -o build/obj/lib/utils_ct_utils.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/data_src.cpp -o build/obj/lib/utils_data_src.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/exceptn.cpp -o build/obj/lib/utils_exceptn.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/locking_allocator/locking_allocator.cpp -o build/obj/lib/utils_locking_allocator.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/filesystem.cpp -o build/obj/lib/utils_filesystem.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/mem_ops.cpp -o build/obj/lib/utils_mem_ops.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/os_utils.cpp -o build/obj/lib/utils_os_utils.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/mem_pool/mem_pool.cpp -o build/obj/lib/utils_mem_pool.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/http_util/http_util.cpp -o build/obj/lib/utils_http_util.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/poly_dbl/poly_dbl.cpp -o build/obj/lib/utils_poly_dbl.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/parsing.cpp -o build/obj/lib/utils_parsing.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/read_cfg.cpp -o build/obj/lib/utils_read_cfg.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/read_kv.cpp -o build/obj/lib/utils_read_kv.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/sqlite3/sqlite3.cpp -o build/obj/lib/utils_sqlite3.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/thread_utils/barrier.cpp -o build/obj/lib/utils_thread_utils_barrier.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/thread_utils/rwlock.cpp -o build/obj/lib/utils_thread_utils_rwlock.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/thread_utils/semaphore.cpp -o build/obj/lib/utils_thread_utils_semaphore.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/thread_utils/thread_pool.cpp -o build/obj/lib/utils_thread_utils_thread_pool.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/timer.cpp -o build/obj/lib/utils_timer.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/uuid/uuid.cpp -o build/obj/lib/utils_uuid.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/version.cpp -o build/obj/lib/utils_version.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/socket/socket.cpp -o build/obj/lib/utils_socket.o
src/lib/utils/socket/socket.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, Iterator, IteratorConnectHandler&&, typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; Iterator = boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>; IteratorConnectHandler = Botan::{anonymous}::Asio_Socket::Asio_Socket(const string&, const string&, std::chrono::milliseconds)::<lambda(const boost::system::error_code&, boost::asio::ip::basic_resolver<boost::asio::ip::tcp>::iterator)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type = void; typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type = void]':
src/lib/utils/socket/socket.cpp:63:64: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
   63 |          boost::asio::async_connect(m_tcp, dns_iter, connect_cb);
      |                                                                ^
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/cert_status.cpp -o build/obj/lib/x509_cert_status.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/socket/socket_udp.cpp -o build/obj/lib/utils_socket_udp.o
src/lib/utils/socket/socket_udp.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, Iterator, IteratorConnectHandler&&, typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type*) [with Protocol = boost::asio::ip::udp; Executor = boost::asio::executor; Iterator = boost::asio::ip::basic_resolver_iterator<boost::asio::ip::udp>; IteratorConnectHandler = Botan::{anonymous}::Asio_SocketUDP::Asio_SocketUDP(const string&, const string&, std::chrono::microseconds)::<lambda(const boost::system::error_code&, boost::asio::ip::basic_resolver<boost::asio::ip::udp>::iterator)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type = void; typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type = void]':
src/lib/utils/socket/socket_udp.cpp:63:64: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
   63 |          boost::asio::async_connect(m_udp, dns_iter, connect_cb);
      |                                                                ^
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/utils/socket/uri.cpp -o build/obj/lib/utils_socket_uri.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/asn1_alt_name.cpp -o build/obj/lib/x509_asn1_alt_name.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/certstor.cpp -o build/obj/lib/x509_certstor.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/certstor_sqlite3/certstor_sqlite.cpp -o build/obj/lib/x509_certstor_sqlite3_certstor_sqlite.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/certstor_flatfile/certstor_flatfile.cpp -o build/obj/lib/x509_certstor_flatfile.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/certstor_system/certstor_system.cpp -o build/obj/lib/x509_certstor_system.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/crl_ent.cpp -o build/obj/lib/x509_crl_ent.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/key_constraint.cpp -o build/obj/lib/x509_key_constraint.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/datastor.cpp -o build/obj/lib/x509_datastor.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/certstor_sql/certstor_sql.cpp -o build/obj/lib/x509_certstor_sql.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/name_constraint.cpp -o build/obj/lib/x509_name_constraint.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/ocsp_types.cpp -o build/obj/lib/x509_ocsp_types.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/ocsp.cpp -o build/obj/lib/x509_ocsp.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/pkcs10.cpp -o build/obj/lib/x509_pkcs10.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_ca.cpp -o build/obj/lib/x509_ca.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_crl.cpp -o build/obj/lib/x509_crl.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_dn_ub.cpp -o build/obj/lib/x509_dn_ub.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_dn.cpp -o build/obj/lib/x509_dn.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_obj.cpp -o build/obj/lib/x509_obj.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509opt.cpp -o build/obj/lib/x509_x509opt.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509self.cpp -o build/obj/lib/x509_x509self.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509_ext.cpp -o build/obj/lib/x509_ext.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509cert.cpp -o build/obj/lib/x509_x509cert.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/argon2.cpp -o build/obj/cli/argon2.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/bcrypt.cpp -o build/obj/cli/bcrypt.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/asn1.cpp -o build/obj/cli/asn1.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/cc_enc.cpp -o build/obj/cli/cc_enc.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/cli_rng.cpp -o build/obj/cli/cli_rng.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/codec.cpp -o build/obj/cli/codec.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/compress.cpp -o build/obj/cli/compress.o
g++ -fPIC -fvisibility=hidden -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/lib/x509/x509path.cpp -o build/obj/lib/x509_x509path.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/cli.cpp -o build/obj/cli/cli.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/encryption.cpp -o build/obj/cli/encryption.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/hash.cpp -o build/obj/cli/hash.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/main.cpp -o build/obj/cli/main.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/entropy.cpp -o build/obj/cli/entropy.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/hmac.cpp -o build/obj/cli/hmac.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/pbkdf.cpp -o build/obj/cli/pbkdf.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/psk.cpp -o build/obj/cli/psk.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/math.cpp -o build/obj/cli/math.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/sandbox.cpp -o build/obj/cli/sandbox.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/pk_crypt.cpp -o build/obj/cli/pk_crypt.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/roughtime.cpp -o build/obj/cli/roughtime.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/pubkey.cpp -o build/obj/cli/pubkey.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/timing_tests.cpp -o build/obj/cli/timing_tests.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tls_client.cpp -o build/obj/cli/tls_client.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tls_server.cpp -o build/obj/cli/tls_server.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tls_http_server.cpp -o build/obj/cli/tls_http_server.o
src/cli/tls_http_server.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ConstBufferSequence = boost::asio::mutable_buffers_1; WriteHandler = boost::asio::detail::wrapped_handler<boost::asio::io_context::strand, boost::_bi::bind_t<void, boost::_mfi::mf1<void, Botan_CLI::{anonymous}::TLS_Asio_HTTP_Session, const boost::system::error_code&>, boost::_bi::list2<boost::_bi::value<std::shared_ptr<Botan_CLI::{anonymous}::TLS_Asio_HTTP_Session> >, boost::arg<1> (*)()> >, boost::asio::detail::is_continuation_if_running>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/cli/tls_http_server.cpp:339:56: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  339 |                      boost::asio::placeholders::error)));
      |                                                        ^
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/speed.cpp -o build/obj/cli/speed.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tss.cpp -o build/obj/cli/tss.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tls_utils.cpp -o build/obj/cli/tls_utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/tls_proxy.cpp -o build/obj/cli/tls_proxy.o
src/cli/tls_proxy.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ConstBufferSequence = boost::asio::mutable_buffers_1; WriteHandler = boost::asio::detail::wrapped_handler<boost::asio::io_context::strand, boost::_bi::bind_t<void, boost::_mfi::mf1<void, Botan_CLI::{anonymous}::tls_proxy_session, const boost::system::error_code&>, boost::_bi::list2<boost::_bi::value<std::shared_ptr<Botan_CLI::{anonymous}::tls_proxy_session> >, boost::arg<1> (*)()> >, boost::asio::detail::is_continuation_if_running>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/cli/tls_proxy.cpp:252:56: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  252 |                      boost::asio::placeholders::error)));
      |                                                        ^
src/cli/tls_proxy.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, Iterator, IteratorConnectHandler&&, typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; Iterator = boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>; IteratorConnectHandler = Botan_CLI::{anonymous}::tls_proxy_session::tls_session_established(const Botan::TLS::Session&)::<lambda(boost::system::error_code, boost::asio::ip::basic_resolver<boost::asio::ip::tcp>::iterator)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, Iterator)>::return_type = void; typename std::enable_if<(! boost::asio::is_endpoint_sequence<EndpointSequence>::value)>::type = void]':
src/cli/tls_proxy.cpp:331:70: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  331 |          async_connect(m_server_socket, m_server_endpoints, onConnect);
      |                                                                      ^
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/utils.cpp -o build/obj/cli/utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/main.cpp -o build/obj/test/main.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_aead.cpp -o build/obj/test/test_aead.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/cli/x509.cpp -o build/obj/cli/x509.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_asn1.cpp -o build/obj/test/test_asn1.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_blowfish.cpp -o build/obj/test/test_blowfish.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_block.cpp -o build/obj/test/test_block.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_c25519.cpp -o build/obj/test/test_c25519.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_bigint.cpp -o build/obj/test/test_bigint.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_certstor_utils.cpp -o build/obj/test/test_certstor_utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_certstor_flatfile.cpp -o build/obj/test/test_certstor_flatfile.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_clang_bug.cpp -o build/obj/test/test_clang_bug.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_certstor.cpp -o build/obj/test/test_certstor.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_certstor_system.cpp -o build/obj/test/test_certstor_system.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_compression.cpp -o build/obj/test/test_compression.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_cryptobox.cpp -o build/obj/test/test_cryptobox.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_datastore.cpp -o build/obj/test/test_datastore.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_dh.cpp -o build/obj/test/test_dh.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_dsa.cpp -o build/obj/test/test_dsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_dl_group.cpp -o build/obj/test/test_dl_group.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ecc_pointmul.cpp -o build/obj/test/test_ecc_pointmul.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_dlies.cpp -o build/obj/test/test_dlies.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ecdh.cpp -o build/obj/test/test_ecdh.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ecgdsa.cpp -o build/obj/test/test_ecgdsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ecdsa.cpp -o build/obj/test/test_ecdsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_eckcdsa.cpp -o build/obj/test/test_eckcdsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ed25519.cpp -o build/obj/test/test_ed25519.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ecies.cpp -o build/obj/test/test_ecies.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_elg.cpp -o build/obj/test/test_elg.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_entropy.cpp -o build/obj/test/test_entropy.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_fpe.cpp -o build/obj/test/test_fpe.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_gf2m.cpp -o build/obj/test/test_gf2m.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_gost_3410.cpp -o build/obj/test/test_gost_3410.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_hash.cpp -o build/obj/test/test_hash.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_filters.cpp -o build/obj/test/test_filters.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_hash_id.cpp -o build/obj/test/test_hash_id.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_kdf.cpp -o build/obj/test/test_kdf.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_keywrap.cpp -o build/obj/test/test_keywrap.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_mac.cpp -o build/obj/test/test_mac.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_mp.cpp -o build/obj/test/test_mp.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_mceliece.cpp -o build/obj/test/test_mceliece.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_modes.cpp -o build/obj/test/test_modes.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_newhope.cpp -o build/obj/test/test_newhope.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_name_constraint.cpp -o build/obj/test/test_name_constraint.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ocb.cpp -o build/obj/test/test_ocb.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_octetstring.cpp -o build/obj/test/test_octetstring.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ffi.cpp -o build/obj/test/test_ffi.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_oid.cpp -o build/obj/test/test_oid.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_package_transform.cpp -o build/obj/test/test_package_transform.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_otp.cpp -o build/obj/test/test_otp.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_os_utils.cpp -o build/obj/test/test_os_utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_ocsp.cpp -o build/obj/test/test_ocsp.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pad.cpp -o build/obj/test/test_pad.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pem.cpp -o build/obj/test/test_pem.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_passhash.cpp -o build/obj/test/test_passhash.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pbkdf.cpp -o build/obj/test/test_pbkdf.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pk_pad.cpp -o build/obj/test/test_pk_pad.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_psk_db.cpp -o build/obj/test/test_psk_db.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_rfc6979.cpp -o build/obj/test/test_rfc6979.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pubkey.cpp -o build/obj/test/test_pubkey.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pkcs11_high_level.cpp -o build/obj/test/test_pkcs11_high_level.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_pkcs11_low_level.cpp -o build/obj/test/test_pkcs11_low_level.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_rng_kat.cpp -o build/obj/test/test_rng_kat.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_roughtime.cpp -o build/obj/test/test_roughtime.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_rng.cpp -o build/obj/test/test_rng.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_siv.cpp -o build/obj/test/test_siv.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -msse2 -Ibuild/include -Ibuild/include/external -c src/tests/test_simd.cpp -o build/obj/test/test_simd.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_rsa.cpp -o build/obj/test/test_rsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_runner.cpp -o build/obj/test/test_runner.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_sm2.cpp -o build/obj/test/test_sm2.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_stream.cpp -o build/obj/test/test_stream.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_srp6.cpp -o build/obj/test/test_srp6.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_sodium.cpp -o build/obj/test/test_sodium.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_thread_utils.cpp -o build/obj/test/test_thread_utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tests.cpp -o build/obj/test/test_tests.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tpm.cpp -o build/obj/test/test_tpm.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tls_messages.cpp -o build/obj/test/test_tls_messages.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tls.cpp -o build/obj/test/test_tls.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tss.cpp -o build/obj/test/test_tss.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_workfactor.cpp -o build/obj/test/test_workfactor.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_uri.cpp -o build/obj/test/test_uri.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_x509_dn.cpp -o build/obj/test/test_x509_dn.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_utils.cpp -o build/obj/test/test_utils.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_xmss.cpp -o build/obj/test/test_xmss.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_x509_path.cpp -o build/obj/test/test_x509_path.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/tests.cpp -o build/obj/test/tests.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_ecdh.cpp -o build/obj/test/unit_ecdh.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_ecc.cpp -o build/obj/test/unit_ecc.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/test_tls_stream_integration.cpp -o build/obj/test/test_tls_stream_integration.o
In file included from build/include/botan/asio_async_ops.h:17,
                 from build/include/botan/asio_stream.h:18,
                 from src/tests/test_tls_stream_integration.cpp:19:
build/include/botan/asio_error.h:39:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   39 | struct StreamCategory : public boost::system::error_category
      |        ^~~~~~~~~~~~~~
build/include/botan/asio_error.h:39:8: warning: 'struct Botan::TLS::StreamCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
build/include/botan/asio_error.h:71:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   71 | struct BotanAlertCategory : boost::system::error_category
      |        ^~~~~~~~~~~~~~~~~~
build/include/botan/asio_error.h:71:8: warning: 'struct Botan::TLS::BotanAlertCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
build/include/botan/asio_error.h:99:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   99 | struct BotanErrorCategory : boost::system::error_category
      |        ^~~~~~~~~~~~~~~~~~
build/include/botan/asio_error.h:99:8: warning: 'struct Botan::BotanErrorCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:227:85: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  227 |                          std::bind(&Server::handle_read, shared_from_this(), _1, _2));
      |                                                                                     ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::mutable_buffer; WriteHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:271:83: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  271 |                           std::bind(&Server::handle_write, shared_from_this(), _1));
      |                                                                                   ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:323:7: warning: 'class {anonymous}::TestBase' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
  323 | class TestBase
      |       ^~~~~~~~
src/tests/test_tls_stream_integration.cpp:341:7: warning: base class 'class {anonymous}::TestBase' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  341 | class Synchronous_Test : public TestBase
      |       ^~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:341:7: warning: 'class {anonymous}::Synchronous_Test' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp:368:7: warning: base class 'class {anonymous}::TestBase' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  368 | class Test_Conversation : public TestBase, public net::coroutine, public std::enable_shared_from_this<Test_Conversation>
      |       ^~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:368:7: warning: 'class {anonymous}::Test_Conversation' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, const EndpointSequence&, RangeConnectHandler&&, typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; EndpointSequence = std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >; RangeConnectHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type = void; typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:383:82: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  383 |                                      std::bind(test_case, shared_from_this(), _1));
      |                                                                                  ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:394:80: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  394 |                                    std::bind(test_case, shared_from_this(), _1));
      |                                                                                ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:401:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  401 |                                   std::bind(test_case, shared_from_this(), _1));
      |                                                                               ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:411:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  411 |                                   std::bind(test_case, shared_from_this(), _1));
      |                                                                               ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:420:7: warning: base class 'class {anonymous}::Synchronous_Test' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  420 | class Test_Conversation_Sync : public Synchronous_Test
      |       ^~~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:420:7: warning: 'class {anonymous}::Test_Conversation_Sync' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename Protocol::endpoint boost::asio::connect(boost::asio::basic_socket<Protocol, Executor>&, const EndpointSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; EndpointSequence = std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >; typename Protocol::endpoint = boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>; typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:431:72: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  431 |          net::connect(m_client.stream().lowest_layer(), k_endpoints, ec);
      |                                                                        ^
src/tests/test_tls_stream_integration.cpp: In function 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:439:23: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  439 |                     ec);
      |                       ^
src/tests/test_tls_stream_integration.cpp: In function 'std::size_t boost::asio::read(SyncReadStream&, const MutableBufferSequence&, CompletionCondition, boost::system::error_code&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with SyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:445:22: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  445 |                    ec);
      |                      ^
src/tests/test_tls_stream_integration.cpp: In function 'std::size_t boost::asio::read(SyncReadStream&, const MutableBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with SyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:452:60: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  452 |          net::read(m_client.stream(), m_client.buffer(), ec);
      |                                                            ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:462:7: warning: base class 'class {anonymous}::TestBase' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  462 | class Test_Eager_Close : public TestBase, public net::coroutine, public std::enable_shared_from_this<Test_Eager_Close>
      |       ^~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:462:7: warning: 'class {anonymous}::Test_Eager_Close' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, const EndpointSequence&, RangeConnectHandler&&, typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; EndpointSequence = std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >; RangeConnectHandler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type = void; typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:475:82: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  475 |                                      std::bind(test_case, shared_from_this(), _1));
      |                                                                                  ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:494:7: warning: base class 'class {anonymous}::Synchronous_Test' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  494 | class Test_Eager_Close_Sync : public Synchronous_Test
      |       ^~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:494:7: warning: 'class {anonymous}::Test_Eager_Close_Sync' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp:521:7: warning: base class 'class {anonymous}::TestBase' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  521 | class Test_Close_Without_Shutdown
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:521:7: warning: 'class {anonymous}::Test_Close_Without_Shutdown' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, const EndpointSequence&, RangeConnectHandler&&, typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; EndpointSequence = std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >; RangeConnectHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type = void; typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:537:82: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  537 |                                      std::bind(test_case, shared_from_this(), _1));
      |                                                                                  ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:550:80: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  550 |                                    std::bind(test_case, shared_from_this(), _1));
      |                                                                                ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:558:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  558 |                                   std::bind(test_case, shared_from_this(), _1));
      |                                                                               ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:569:7: warning: base class 'class {anonymous}::Synchronous_Test' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  569 | class Test_Close_Without_Shutdown_Sync : public Synchronous_Test
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:569:7: warning: 'class {anonymous}::Test_Close_Without_Shutdown_Sync' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp:595:7: warning: base class 'class {anonymous}::TestBase' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  595 | class Test_No_Shutdown_Response : public TestBase, public net::coroutine,
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:595:7: warning: 'class {anonymous}::Test_No_Shutdown_Response' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type boost::asio::async_connect(boost::asio::basic_socket<Protocol, Executor>&, const EndpointSequence&, RangeConnectHandler&&, typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type*) [with Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; EndpointSequence = std::vector<boost::asio::ip::basic_endpoint<boost::asio::ip::tcp> >; RangeConnectHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, typename Protocol::endpoint)>::return_type = void; typename std::enable_if<boost::asio::is_endpoint_sequence<EndpointSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:609:82: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  609 |                                      std::bind(test_case, shared_from_this(), _1));
      |                                                                                  ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:622:80: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  622 |                                    std::bind(test_case, shared_from_this(), _1));
      |                                                                                ^
src/tests/test_tls_stream_integration.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/test_tls_stream_integration.cpp:628:79: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  628 |                                   std::bind(test_case, shared_from_this(), _1));
      |                                                                               ^
src/tests/test_tls_stream_integration.cpp: At global scope:
src/tests/test_tls_stream_integration.cpp:640:7: warning: base class 'class {anonymous}::Synchronous_Test' has accessible non-virtual destructor [-Wnon-virtual-dtor]
  640 | class Test_No_Shutdown_Response_Sync : public Synchronous_Test
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tests/test_tls_stream_integration.cpp:640:7: warning: 'class {anonymous}::Test_No_Shutdown_Response_Sync' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
In file included from src/tests/test_tls_stream_integration.cpp:19:
build/include/botan/asio_stream.h: In instantiation of 'std::size_t Botan::TLS::Stream<S, C>::send_pending_encrypted_data(boost::system::error_code&) [with StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; std::size_t = long unsigned int]':
build/include/botan/asio_stream.h:315:10:   required from 'void Botan::TLS::Stream<S, C>::shutdown(boost::system::error_code&) [with StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel]'
src/tests/test_tls_stream_integration.cpp:209:40:   required from here
build/include/botan/asio_stream.h:729:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  729 |          auto writtenBytes = boost::asio::write(m_nextLayer, send_buffer(), ec);
      |                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build/include/botan/asio_stream.h: In instantiation of 'void Botan::TLS::Stream<S, C>::tls_encrypt(const ConstBufferSequence&, boost::system::error_code&) [with ConstBufferSequence = boost::asio::const_buffers_1; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel]':
build/include/botan/asio_stream.h:475:10:   required from 'std::size_t Botan::TLS::Stream<S, C>::write_some(const ConstBufferSequence&, boost::system::error_code&) [with ConstBufferSequence = boost::asio::const_buffers_1; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; std::size_t = long unsigned int]'
/usr/include/boost/asio/impl/write.hpp:54:9:   required from 'std::size_t boost::asio::detail::write_buffer_sequence(SyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition, boost::system::error_code&) [with SyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; std::size_t = long unsigned int]'
/usr/include/boost/asio/impl/write.hpp:70:39:   required from 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, CompletionCondition, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; CompletionCondition = boost::asio::detail::transfer_all_t; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
/usr/include/boost/asio/impl/write.hpp:94:15:   required from 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:439:23:   required from here
build/include/botan/asio_stream.h:753:61: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  753 |                !ec && it != boost::asio::buffer_sequence_end(buffers);
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
In file included from build/include/botan/asio_stream.h:18,
                 from src/tests/test_tls_stream_integration.cpp:19:
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_receive; Args = {const boost::asio::mutable_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:971:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:203:96:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
   81 |          return boost::asio::get_associated_executor(m_handler, m_work_guard_1.get_executor());
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_send; Args = {const boost::asio::const_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:856:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_write_some(const ConstBufferSequence&, WriteHandler&&) [with ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_stream.h:392:10:   required from 'void Botan::TLS::Stream<S, C>::async_shutdown(ShutdownHandler&&) [with ShutdownHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel]'
src/tests/test_tls_stream_integration.cpp:245:100:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_receive; Args = {const boost::asio::mutable_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:971:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:388:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_send; Args = {const boost::asio::const_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:856:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_write_some(const ConstBufferSequence&, WriteHandler&&) [with ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_stream.h:392:10:   required from 'void Botan::TLS::Stream<S, C>::async_shutdown(ShutdownHandler&&) [with ShutdownHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel]'
src/tests/test_tls_stream_integration.cpp:406:96:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_receive; Args = {const boost::asio::mutable_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:971:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:480:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_send; Args = {const boost::asio::const_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:856:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_write_some(const ConstBufferSequence&, WriteHandler&&) [with ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Handler = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Wrapper<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_stream.h:392:10:   required from 'void Botan::TLS::Stream<S, C>::async_shutdown(ShutdownHandler&&) [with ShutdownHandler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel]'
src/tests/test_tls_stream_integration.cpp:484:96:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_receive; Args = {const boost::asio::mutable_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:971:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:542:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::basic_stream_socket<boost::asio::ip::tcp>::initiate_async_receive; Args = {const boost::asio::mutable_buffer&, int}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/basic_stream_socket.hpp:971:53:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::basic_stream_socket<Protocol, Executor>::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Protocol = boost::asio::ip::tcp; Executor = boost::asio::executor; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:614:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:319:36:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:203:96:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:319:36:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:388:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:319:36:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Eager_Close::*(std::shared_ptr<{anonymous}::Test_Eager_Close>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:480:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:319:36:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:542:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
build/include/botan/asio_async_ops.h:235:16:   required from 'void Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:220:25:   required from 'Botan::TLS::detail::AsyncWriteOperation<Handler, Stream, Allocator>::AsyncWriteOperation(HandlerT&&, Stream&, std::size_t, const boost::system::error_code&) [with HandlerT = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:319:36:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Handler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Stream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; StreamLayer = boost::asio::basic_stream_socket<boost::asio::ip::tcp>; ChannelT = Botan::TLS::Channel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/test_tls_stream_integration.cpp:614:97:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; CompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:550:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:227:85:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::mutable_buffer; ConstBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; ConstBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::mutable_buffer; WriteHandler = std::_Bind<void ({anonymous}::Server::*(std::shared_ptr<{anonymous}::Server>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:271:83:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; ConstBufferSequence = boost::asio::const_buffers_1; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:394:80:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:550:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:401:79:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = std::_Bind<void ({anonymous}::Test_Conversation::*(std::shared_ptr<{anonymous}::Test_Conversation>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:411:79:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; ConstBufferSequence = boost::asio::const_buffers_1; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:550:80:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>, std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; CompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:550:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, CompletionCondition, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = std::_Bind<long unsigned int ({anonymous}::Side::*({anonymous}::Client*, std::_Placeholder<1>, std::_Placeholder<2>))(const boost::system::error_code&, long unsigned int)>; ReadHandler = std::_Bind<void ({anonymous}::Test_Close_Without_Shutdown::*(std::shared_ptr<{anonymous}::Test_Close_Without_Shutdown>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:558:79:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_send_op.hpp:92:45:   required from 'boost::asio::detail::reactive_socket_send_op<ConstBufferSequence, Handler, IoExecutor>::reactive_socket_send_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const ConstBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with ConstBufferSequence = boost::asio::const_buffer; Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::const_buffers_1, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:273:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; ConstBufferSequence = boost::asio::const_buffers_1; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::const_buffers_1&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; ConstBufferSequence = boost::asio::const_buffers_1; WriteHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:622:80:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >; Executor1 = boost::asio::executor; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::executor]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::associated_executor<T, Executor>::type = boost::asio::executor]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::detail::io_object_executor<boost::asio::executor>; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::executor; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/asio/detail/handler_work.hpp:58:60:   required from 'static void boost::asio::detail::handler_work<Handler, IoExecutor, HandlerExecutor>::start(Handler&, const IoExecutor&) [with Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; HandlerExecutor = boost::asio::executor]'
/usr/include/boost/asio/detail/reactive_socket_recv_op.hpp:93:45:   required from 'boost::asio::detail::reactive_socket_recv_op<MutableBufferSequence, Handler, IoExecutor>::reactive_socket_recv_op(boost::asio::detail::socket_type, boost::asio::detail::socket_ops::state_type, const MutableBufferSequence&, boost::asio::socket_base::message_flags, Handler&, const IoExecutor&) [with MutableBufferSequence = boost::asio::mutable_buffer; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)> >, Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >, boost::asio::mutable_buffers_1, std::allocator<void> >; IoExecutor = boost::asio::detail::io_object_executor<boost::asio::executor>; boost::asio::detail::socket_type = int; boost::asio::detail::socket_ops::state_type = unsigned char; boost::asio::socket_base::message_flags = int]'
/usr/include/boost/asio/detail/reactive_socket_service_base.hpp:346:11:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; RawCompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> > >; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan::TLS::Stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = std::_Bind<void ({anonymous}::Test_No_Shutdown_Response::*(std::shared_ptr<{anonymous}::Test_No_Shutdown_Response>, std::_Placeholder<1>))(const boost::system::error_code&)>; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/test_tls_stream_integration.cpp:628:79:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_ecdsa.cpp -o build/obj/test/unit_ecdsa.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_tls_policy.cpp -o build/obj/test/unit_tls_policy.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_asio_stream.cpp -o build/obj/test/unit_asio_stream.o
In file included from build/include/botan/asio_async_ops.h:17,
                 from build/include/botan/asio_stream.h:18,
                 from src/tests/unit_asio_stream.cpp:13:
build/include/botan/asio_error.h:39:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   39 | struct StreamCategory : public boost::system::error_category
      |        ^~~~~~~~~~~~~~
build/include/botan/asio_error.h:39:8: warning: 'struct Botan::TLS::StreamCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
build/include/botan/asio_error.h:71:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   71 | struct BotanAlertCategory : boost::system::error_category
      |        ^~~~~~~~~~~~~~~~~~
build/include/botan/asio_error.h:71:8: warning: 'struct Botan::TLS::BotanAlertCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
build/include/botan/asio_error.h:99:8: warning: base class 'class boost::system::error_category' has accessible non-virtual destructor [-Wnon-virtual-dtor]
   99 | struct BotanErrorCategory : boost::system::error_category
      |        ^~~~~~~~~~~~~~~~~~
build/include/botan/asio_error.h:99:8: warning: 'struct Botan::BotanErrorCategory' has virtual functions and accessible non-virtual destructor [-Wnon-virtual-dtor]
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::read(SyncReadStream&, const MutableBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with SyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:307:91: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  307 |          auto bytes_transferred = net::read(ssl, net::mutable_buffer(buf, sizeof(buf)), ec);
      |                                                                                           ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::read(SyncReadStream&, const MutableBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with SyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = std::vector<boost::asio::mutable_buffer>; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:331:58: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  331 |          auto bytes_transferred = net::read(ssl, data, ec);
      |                                                          ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::read(SyncReadStream&, const MutableBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with SyncReadStream = Botan_Tests::ThrowingAsioStream; MutableBufferSequence = boost::asio::mutable_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:379:91: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  379 |          auto bytes_transferred = net::read(ssl, net::mutable_buffer(buf, sizeof(buf)), ec);
      |                                                                                           ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:429:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  429 |          net::async_read(ssl, buf, read_handler);
      |                                                ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = std::vector<boost::asio::mutable_buffer>; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:459:49: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  459 |          net::async_read(ssl, data, read_handler);
      |                                                 ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:484:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  484 |          net::async_read(ssl, buf, read_handler);
      |                                                ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::ThrowingAsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:507:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  507 |          net::async_read(ssl, buf, read_handler);
      |                                                ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:534:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  534 |          net::async_read(ssl, buf, read_handler);
      |                                                ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:551:99: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  551 |          auto bytes_transferred = net::write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), ec);
      |                                                                                                   ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan::TLS::Stream<Botan_Tests::TestStream>; ConstBufferSequence = boost::asio::const_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:571:74: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  571 |          net::write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), ec);
      |                                                                          ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:601:59: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  601 |          auto bytes_transferred = net::write(ssl, data, ec);
      |                                                           ^
src/tests/unit_asio_stream.cpp: In function 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan_Tests::ThrowingAsioStream; ConstBufferSequence = boost::asio::const_buffer; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:649:99: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  649 |          auto bytes_transferred = net::write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), ec);
      |                                                                                                   ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:676:91: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  676 |          net::async_write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), write_handler);
      |                                                                                           ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:717:50: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  717 |          net::async_write(ssl, src, write_handler);
      |                                                  ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:742:91: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  742 |          net::async_write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), write_handler);
      |                                                                                           ^
src/tests/unit_asio_stream.cpp: In function 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::ThrowingAsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]':
src/tests/unit_asio_stream.cpp:765:91: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  765 |          net::async_write(ssl, net::const_buffer(TEST_DATA, TEST_DATA_SIZE), write_handler);
      |                                                                                           ^
In file included from src/tests/unit_asio_stream.cpp:13:
build/include/botan/asio_stream.h: In instantiation of 'std::size_t Botan::TLS::Stream<S, C>::send_pending_encrypted_data(boost::system::error_code&) [with StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel; std::size_t = long unsigned int]':
build/include/botan/asio_stream.h:239:13:   required from 'void Botan::TLS::Stream<S, C>::handshake(Botan::TLS::Connection_Side, boost::system::error_code&) [with StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel]'
src/tests/unit_asio_stream.cpp:191:46:   required from here
build/include/botan/asio_stream.h:729:48: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  729 |          auto writtenBytes = boost::asio::write(m_nextLayer, send_buffer(), ec);
      |                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build/include/botan/asio_stream.h: In instantiation of 'void Botan::TLS::Stream<S, C>::tls_encrypt(const ConstBufferSequence&, boost::system::error_code&) [with ConstBufferSequence = boost::asio::detail::prepared_buffers<boost::asio::const_buffer, 64>; StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel]':
build/include/botan/asio_stream.h:475:10:   required from 'std::size_t Botan::TLS::Stream<S, C>::write_some(const ConstBufferSequence&, boost::system::error_code&) [with ConstBufferSequence = boost::asio::detail::prepared_buffers<boost::asio::const_buffer, 64>; StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel; std::size_t = long unsigned int]'
/usr/include/boost/asio/impl/write.hpp:54:9:   required from 'std::size_t boost::asio::detail::write_buffer_sequence(SyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition, boost::system::error_code&) [with SyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; ConstBufferIterator = __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >; CompletionCondition = boost::asio::detail::transfer_all_t; std::size_t = long unsigned int]'
/usr/include/boost/asio/impl/write.hpp:70:39:   required from 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, CompletionCondition, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; CompletionCondition = boost::asio::detail::transfer_all_t; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
/usr/include/boost/asio/impl/write.hpp:94:15:   required from 'std::size_t boost::asio::write(SyncWriteStream&, const ConstBufferSequence&, boost::system::error_code&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with SyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; std::size_t = long unsigned int; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:601:59:   required from here
build/include/botan/asio_stream.h:752:58: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  752 |          for(auto it = boost::asio::buffer_sequence_begin(buffers);
      |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
build/include/botan/asio_stream.h:753:61: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
  753 |                !ec && it != boost::asio::buffer_sequence_end(buffers);
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
In file included from build/include/botan/asio_stream.h:18,
                 from src/tests/unit_asio_stream.cpp:13:
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::beast::test::stream::run_read_op; Args = {boost::shared_ptr<boost::beast::test::stream::state>&, const boost::asio::mutable_buffer&}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:322:39:   required from 'typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::beast::test::stream::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = Botan_Tests::Asio_Stream_Tests::test_async_handshake(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>&; StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/unit_asio_stream.cpp:238:57:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
   81 |          return boost::asio::get_associated_executor(m_handler, m_work_guard_1.get_executor());
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::beast::test::stream::run_read_op; Args = {boost::shared_ptr<boost::beast::test::stream::state>&, const boost::asio::mutable_buffer&}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:322:39:   required from 'typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::beast::test::stream::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>&; StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::MockChannel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/unit_asio_stream.cpp:267:57:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::beast::test::stream::run_read_op; Args = {boost::shared_ptr<boost::beast::test::stream::state>&, const boost::asio::mutable_buffer&}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:322:39:   required from 'typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::beast::test::stream::async_read_some(const MutableBufferSequence&, ReadHandler&&) [with MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan::TLS::detail::AsyncHandshakeOperation<Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; typename boost::asio::async_result<typename std::decay<_Func>::type, void(boost::system::error_code, long unsigned int)>::return_type = void]'
build/include/botan/asio_async_ops.h:326:16:   required from 'void Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::operator()(boost::system::error_code, std::size_t, bool) [with Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>; Allocator = std::allocator<void>; std::size_t = long unsigned int]'
build/include/botan/asio_async_ops.h:287:25:   required from 'Botan::TLS::detail::AsyncHandshakeOperation<Handler, Stream, Allocator>::AsyncHandshakeOperation(HandlerT&&, Stream&, const boost::system::error_code&) [with HandlerT = Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Handler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>; Stream = Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>; Allocator = std::allocator<void>]'
build/include/botan/asio_stream.h:277:10:   required from 'typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type Botan::TLS::Stream<S, C>::async_handshake(Botan::TLS::Connection_Side, HandshakeHandler&&) [with HandshakeHandler = Botan_Tests::Asio_Stream_Tests::test_async_handshake_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&)>&; StreamLayer = Botan_Tests::TestStream; ChannelT = Botan_Tests::ThrowingMockChannel; typename boost::asio::async_result<typename std::decay<_Functor>::type, void(boost::system::error_code)>::return_type = void]'
src/tests/unit_asio_stream.cpp:290:57:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:429:48:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, std::vector<boost::asio::mutable_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::detail::prepared_buffers<boost::asio::mutable_buffer, 64>, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = std::vector<boost::asio::mutable_buffer>; MutableBufferIterator = __gnu_cxx::__normal_iterator<const boost::asio::mutable_buffer*, std::vector<boost::asio::mutable_buffer> >; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; MutableBufferSequence = std::vector<boost::asio::mutable_buffer>; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const std::vector<boost::asio::mutable_buffer, std::allocator<boost::asio::mutable_buffer> >&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; Args = {const std::vector<boost::asio::mutable_buffer, std::allocator<boost::asio::mutable_buffer> >&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = std::vector<boost::asio::mutable_buffer>; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:459:49:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:484:48:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::ThrowingAsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan_Tests::ThrowingAsioStream; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan_Tests::ThrowingAsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::ThrowingAsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::ThrowingAsioStream>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::ThrowingAsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_some_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:507:48:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; E = boost::asio::io_context::executor_type; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:120:47:   required from 'typename boost::asio::associated_executor<T, Executor>::type boost::asio::get_associated_executor(const T&, const Executor&, typename std::enable_if<boost::asio::is_executor<Executor>::value>::type*) [with T = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Executor = boost::asio::io_context::executor_type; typename boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type; typename std::enable_if<boost::asio::is_executor<Executor>::value>::type = void]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:88:48:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::lambda::lambda(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:136:37:   required from 'boost::beast::test::stream::read_op<Handler, Buffers>::read_op(Handler_&&, const boost::shared_ptr<boost::beast::test::stream::state>&, const Buffers&) [with Handler_ = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Handler = Botan::TLS::detail::AsyncReadOperation<boost::asio::detail::read_op<Botan_Tests::AsioStream, boost::asio::mutable_buffer, const boost::asio::mutable_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, boost::asio::mutable_buffers_1, std::allocator<void> >; Buffers = boost::asio::mutable_buffer]'
/usr/include/boost/beast/_experimental/test/impl/stream.hpp:174:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/read.hpp:452:56:   required from 'void boost::asio::detail::start_read_buffer_sequence_op(AsyncReadStream&, const MutableBufferSequence&, const MutableBufferIterator&, CompletionCondition&, ReadHandler&) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; MutableBufferIterator = const boost::asio::mutable_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/read.hpp:484:36:   required from 'void boost::asio::detail::initiate_async_read_buffer_sequence<AsyncReadStream>::operator()(ReadHandler&&, const MutableBufferSequence&, CompletionCondition&&) const [with ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; MutableBufferSequence = boost::asio::mutable_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncReadStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_read_buffer_sequence<Botan_Tests::AsioStream>; Args = {const boost::asio::mutable_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/read.hpp:567:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_read(AsyncReadStream&, const MutableBufferSequence&, ReadHandler&&, typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type*) [with AsyncReadStream = Botan_Tests::AsioStream; MutableBufferSequence = boost::asio::mutable_buffer; ReadHandler = Botan_Tests::Asio_Stream_Tests::test_async_read_zero_buffer(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_mutable_buffer_sequence<MutableBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:534:48:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; E = boost::asio::system_executor; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::system_executor; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/beast/core/detail/bind_handler.hpp:342:36:   required from 'static boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::get(const boost::beast::detail::bind_front_wrapper<Handler, Args ...>&, const Executor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Args = {boost::system::error_code, long unsigned int}; Executor = boost::asio::system_executor; boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:107:37:   required from 'typename boost::asio::associated_executor<T>::type boost::asio::get_associated_executor(const T&) [with T = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; typename boost::asio::associated_executor<T>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/detail/work_dispatcher.hpp:35:38:   required from 'boost::asio::detail::work_dispatcher<Handler>::work_dispatcher(CompletionHandler&&) [with CompletionHandler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; Handler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>]'
/usr/include/boost/asio/impl/post.hpp:71:22:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; ConstBufferSequence = boost::asio::const_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_success(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:676:91:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; E = boost::asio::system_executor; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::system_executor; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/beast/core/detail/bind_handler.hpp:342:36:   required from 'static boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::get(const boost::beast::detail::bind_front_wrapper<Handler, Args ...>&, const Executor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Args = {boost::system::error_code, long unsigned int}; Executor = boost::asio::system_executor; boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:107:37:   required from 'typename boost::asio::associated_executor<T>::type boost::asio::get_associated_executor(const T&) [with T = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; typename boost::asio::associated_executor<T>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/detail/work_dispatcher.hpp:35:38:   required from 'boost::asio::detail::work_dispatcher<Handler>::work_dispatcher(CompletionHandler&&) [with CompletionHandler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; Handler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, std::vector<boost::asio::const_buffer>, __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>]'
/usr/include/boost/asio/impl/post.hpp:71:22:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; ConstBufferIterator = __gnu_cxx::__normal_iterator<const boost::asio::const_buffer*, std::vector<boost::asio::const_buffer> >; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; ConstBufferSequence = std::vector<boost::asio::const_buffer>; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const std::vector<boost::asio::const_buffer, std::allocator<boost::asio::const_buffer> >&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; Args = {const std::vector<boost::asio::const_buffer, std::allocator<boost::asio::const_buffer> >&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = std::vector<boost::asio::const_buffer>; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_buffer_sequence(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:717:50:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; E = boost::asio::system_executor; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Executor = boost::asio::system_executor; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/beast/core/detail/bind_handler.hpp:342:36:   required from 'static boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::get(const boost::beast::detail::bind_front_wrapper<Handler, Args ...>&, const Executor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >; Args = {boost::system::error_code, long unsigned int}; Executor = boost::asio::system_executor; boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:107:37:   required from 'typename boost::asio::associated_executor<T>::type boost::asio::get_associated_executor(const T&) [with T = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; typename boost::asio::associated_executor<T>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/detail/work_dispatcher.hpp:35:38:   required from 'boost::asio::detail::work_dispatcher<Handler>::work_dispatcher(CompletionHandler&&) [with CompletionHandler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; Handler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::AsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::MockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>]'
/usr/include/boost/asio/impl/post.hpp:71:22:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; ConstBufferSequence = boost::asio::const_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan_Tests::AsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::AsioStream>; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::AsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_some_error(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:742:91:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
build/include/botan/asio_async_ops.h: In instantiation of 'Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::get_executor() const [with Handler = boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >; Executor1 = boost::asio::io_context::executor_type; Allocator = std::allocator<void>; Botan::TLS::detail::AsyncBase<Handler, Executor1, Allocator>::executor_type = boost::asio::io_context::executor_type]':
/usr/include/boost/asio/associated_executor.hpp:54:27:   required from 'static boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::get(const T&, const E&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; E = boost::asio::system_executor; boost::asio::detail::associated_executor_impl<T, E, typename boost::asio::detail::associated_executor_check<typename T::executor_type>::type>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:95:62:   required from 'static boost::asio::associated_executor<T, Executor>::type boost::asio::associated_executor<T, Executor>::get(const T&, const Executor&) [with T = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Executor = boost::asio::system_executor; boost::asio::associated_executor<T, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/beast/core/detail/bind_handler.hpp:342:36:   required from 'static boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::get(const boost::beast::detail::bind_front_wrapper<Handler, Args ...>&, const Executor&) [with Handler = Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >; Args = {boost::system::error_code, long unsigned int}; Executor = boost::asio::system_executor; boost::asio::associated_executor<boost::beast::detail::bind_front_wrapper<Handler, Args ...>, Executor>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/associated_executor.hpp:107:37:   required from 'typename boost::asio::associated_executor<T>::type boost::asio::get_associated_executor(const T&) [with T = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; typename boost::asio::associated_executor<T>::type = boost::asio::io_context::executor_type]'
/usr/include/boost/asio/detail/work_dispatcher.hpp:35:38:   required from 'boost::asio::detail::work_dispatcher<Handler>::work_dispatcher(CompletionHandler&&) [with CompletionHandler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>; Handler = boost::beast::detail::bind_front_wrapper<Botan::TLS::detail::AsyncWriteOperation<boost::asio::detail::write_op<Botan_Tests::ThrowingAsioStream, boost::asio::const_buffer, const boost::asio::const_buffer*, boost::asio::detail::transfer_all_t, Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)> >, Botan::TLS::Stream<Botan_Tests::TestStream, Botan_Tests::ThrowingMockChannel>, std::allocator<void> >, boost::system::error_code, long unsigned int>]'
/usr/include/boost/asio/impl/post.hpp:71:22:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/boost/asio/impl/write.hpp:417:56:   required from 'void boost::asio::detail::start_write_buffer_sequence_op(AsyncWriteStream&, const ConstBufferSequence&, const ConstBufferIterator&, CompletionCondition&, WriteHandler&) [with AsyncWriteStream = Botan_Tests::ThrowingAsioStream; ConstBufferSequence = boost::asio::const_buffer; ConstBufferIterator = const boost::asio::const_buffer*; CompletionCondition = boost::asio::detail::transfer_all_t; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>]'
/usr/include/boost/asio/impl/write.hpp:449:37:   required from 'void boost::asio::detail::initiate_async_write_buffer_sequence<AsyncWriteStream>::operator()(WriteHandler&&, const ConstBufferSequence&, CompletionCondition&&) const [with WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; ConstBufferSequence = boost::asio::const_buffer; CompletionCondition = boost::asio::detail::transfer_all_t; AsyncWriteStream = Botan_Tests::ThrowingAsioStream]'
/usr/include/boost/asio/async_result.hpp:151:49:   required from 'static boost::asio::async_result<CompletionToken, Signature>::return_type boost::asio::async_result<CompletionToken, Signature>::initiate(Initiation&&, RawCompletionToken&&, Args&& ...) [with Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::ThrowingAsioStream>; RawCompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>; Signature = void(boost::system::error_code, long unsigned int); boost::asio::async_result<CompletionToken, Signature>::return_type = void]'
/usr/include/boost/asio/async_result.hpp:364:25:   required from 'typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type boost::asio::async_initiate(Initiation&&, CompletionToken&, Args&& ...) [with CompletionToken = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; Signature = void(boost::system::error_code, long unsigned int); Initiation = boost::asio::detail::initiate_async_write_buffer_sequence<Botan_Tests::ThrowingAsioStream>; Args = {const boost::asio::const_buffer&, boost::asio::detail::transfer_all_t}; typename std::enable_if<boost::asio::detail::async_result_has_initiate_memfn<CompletionToken, Signature>::value, decltype (boost::asio::async_result<typename std::decay<_Tp>::type, Signature>::initiate(declval<Initiation&&>(), declval<CompletionToken&&>(), (declval<Args&>)()...))>::type = void]'
/usr/include/boost/asio/impl/write.hpp:533:51:   required from 'typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type boost::asio::async_write(AsyncWriteStream&, const ConstBufferSequence&, WriteHandler&&, typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type*) [with AsyncWriteStream = Botan_Tests::ThrowingAsioStream; ConstBufferSequence = boost::asio::const_buffer; WriteHandler = Botan_Tests::Asio_Stream_Tests::test_async_write_throw(std::vector<Botan_Tests::Test::Result>&)::<lambda(const error_code&, std::size_t)>&; typename boost::asio::async_result<typename std::decay<WriteHandler>::type, void(boost::system::error_code, long unsigned int)>::return_type = void; typename std::enable_if<boost::asio::is_const_buffer_sequence<ConstBufferSequence>::value>::type = void]'
src/tests/unit_asio_stream.cpp:765:91:   required from here
build/include/botan/asio_async_ops.h:81:53: warning: zero as null pointer constant [-Wzero-as-null-pointer-constant]
g++ -shared -fPIC -Wl,-soname,libbotan-2.so.13  -fstack-protector -m64 -pthread  build/obj/lib/asn1_alg_id.o build/obj/lib/asn1_attribute.o build/obj/lib/asn1_obj.o build/obj/lib/asn1_oid.o build/obj/lib/asn1_print.o build/obj/lib/asn1_str.o build/obj/lib/asn1_time.o build/obj/lib/asn1_ber_dec.o build/obj/lib/asn1_der_enc.o build/obj/lib/asn1_oid_maps.o build/obj/lib/asn1_oids.o build/obj/lib/base_buf_comp.o build/obj/lib/base_scan_name.o build/obj/lib/base_sym_algo.o build/obj/lib/base_symkey.o build/obj/lib/block_aes.o build/obj/lib/block_aes_ni.o build/obj/lib/block_aes_vperm.o build/obj/lib/block_aria.o build/obj/lib/block_cipher.o build/obj/lib/block_blowfish.o build/obj/lib/block_camellia.o build/obj/lib/block_cascade.o build/obj/lib/block_cast128.o build/obj/lib/block_cast256.o build/obj/lib/block_des.o build/obj/lib/block_des_tab.o build/obj/lib/block_des_desx.o build/obj/lib/block_gost_28147.o build/obj/lib/block_idea.o build/obj/lib/block_idea_sse2.o build/obj/lib/block_kasumi.o build/obj/lib/block_lion.o build/obj/lib/block_misty1.o build/obj/lib/block_noekeon.o build/obj/lib/block_noekeon_simd.o build/obj/lib/block_seed.o build/obj/lib/block_serpent.o build/obj/lib/block_serpent_avx2.o build/obj/lib/block_serpent_simd.o build/obj/lib/block_shacal2.o build/obj/lib/block_shacal2_avx2.o build/obj/lib/block_shacal2_simd.o build/obj/lib/block_shacal2_x86.o build/obj/lib/block_sm4.o build/obj/lib/block_threefish_512.o build/obj/lib/block_threefish_512_threefish_512_avx2.o build/obj/lib/block_twofish.o build/obj/lib/block_twofish_tab.o build/obj/lib/block_xtea.o build/obj/lib/codec_base32.o build/obj/lib/codec_base58.o build/obj/lib/codec_base64.o build/obj/lib/codec_hex.o build/obj/lib/compat_sodium_25519.o build/obj/lib/compat_sodium_aead.o build/obj/lib/compat_sodium_auth.o build/obj/lib/compat_sodium_box.o build/obj/lib/compat_sodium_chacha.o build/obj/lib/compat_sodium_salsa.o build/obj/lib/compat_sodium_secretbox.o build/obj/lib/compat_sodium_utils.o build/obj/lib/compression_bzip2.o build/obj/lib/compression_compress_utils.o build/obj/lib/compression.o build/obj/lib/compression_lzma.o build/obj/lib/compression_zlib.o build/obj/lib/entropy_dev_random.o build/obj/lib/entropy_srcs.o build/obj/lib/entropy_proc_walk.o build/obj/lib/entropy_rdrand.o build/obj/lib/entropy_rdseed.o build/obj/lib/ffi.o build/obj/lib/ffi_block.o build/obj/lib/ffi_cert.o build/obj/lib/ffi_cipher.o build/obj/lib/ffi_fpe.o build/obj/lib/ffi_hash.o build/obj/lib/ffi_hotp.o build/obj/lib/ffi_kdf.o build/obj/lib/ffi_keywrap.o build/obj/lib/ffi_mac.o build/obj/lib/ffi_mp.o build/obj/lib/ffi_pk_op.o build/obj/lib/ffi_pkey.o build/obj/lib/ffi_pkey_algs.o build/obj/lib/ffi_rng.o build/obj/lib/ffi_totp.o build/obj/lib/filters_algo_filt.o build/obj/lib/filters_b64_filt.o build/obj/lib/filters_basefilt.o build/obj/lib/filters_buf_filt.o build/obj/lib/filters_cipher_filter.o build/obj/lib/filters_comp_filter.o build/obj/lib/filters_data_snk.o build/obj/lib/filters_fd_unix.o build/obj/lib/filters_filter.o build/obj/lib/filters_hex_filt.o build/obj/lib/filters_out_buf.o build/obj/lib/filters_pipe.o build/obj/lib/filters_pipe_io.o build/obj/lib/filters_pipe_rw.o build/obj/lib/filters_secqueue.o build/obj/lib/filters_threaded_fork.o build/obj/lib/hash_blake2_blake2b.o build/obj/lib/hash_checksum_adler32.o build/obj/lib/hash_checksum_crc24.o build/obj/lib/hash_checksum_crc32.o build/obj/lib/hash_comb4p.o build/obj/lib/hash_gost_3411.o build/obj/lib/hash.o build/obj/lib/hash_keccak.o build/obj/lib/hash_md4.o build/obj/lib/hash_md5.o build/obj/lib/hash_mdx_hash.o build/obj/lib/hash_par_hash.o build/obj/lib/hash_rmd160.o build/obj/lib/hash_sha1_sha160.o build/obj/lib/hash_sha1_sse2.o build/obj/lib/hash_sha1_x86.o build/obj/lib/hash_sha2_32.o build/obj/lib/hash_sha2_32_sha2_32_bmi2.o build/obj/lib/hash_sha2_32_sha2_32_x86.o build/obj/lib/hash_sha2_64.o build/obj/lib/hash_sha2_64_sha2_64_bmi2.o build/obj/lib/hash_sha3.o build/obj/lib/hash_sha3_bmi2.o build/obj/lib/hash_shake.o build/obj/lib/hash_skein_512.o build/obj/lib/hash_sm3.o build/obj/lib/hash_streebog.o build/obj/lib/hash_streebog_precalc.o build/obj/lib/hash_tiger_tig_tab.o build/obj/lib/hash_tiger.o build/obj/lib/hash_whirlpool.o build/obj/lib/hash_whirlpool_whrl_tab.o build/obj/lib/kdf_hkdf.o build/obj/lib/kdf.o build/obj/lib/kdf_kdf1.o build/obj/lib/kdf_kdf1_iso18033.o build/obj/lib/kdf_kdf2.o build/obj/lib/kdf_prf_tls.o build/obj/lib/kdf_prf_x942.o build/obj/lib/kdf_sp800_108.o build/obj/lib/kdf_sp800_56a.o build/obj/lib/kdf_sp800_56c.o build/obj/lib/mac_cbc_mac.o build/obj/lib/mac_cmac.o build/obj/lib/mac_gmac.o build/obj/lib/mac_hmac.o build/obj/lib/mac.o build/obj/lib/mac_poly1305.o build/obj/lib/mac_siphash.o build/obj/lib/mac_x919_mac.o build/obj/lib/math_bigint_big_code.o build/obj/lib/math_bigint_big_io.o build/obj/lib/math_bigint_big_ops2.o build/obj/lib/math_bigint_big_ops3.o build/obj/lib/math_bigint_big_rand.o build/obj/lib/math_bigint.o build/obj/lib/math_bigint_divide.o build/obj/lib/math_mp_comba.o build/obj/lib/math_mp_karat.o build/obj/lib/math_mp_monty.o build/obj/lib/math_mp_monty_n.o build/obj/lib/math_numbertheory_dsa_gen.o build/obj/lib/math_numbertheory_jacobi.o build/obj/lib/math_numbertheory_make_prm.o build/obj/lib/math_numbertheory_mod_inv.o build/obj/lib/math_numbertheory_monty.o build/obj/lib/math_numbertheory_monty_exp.o build/obj/lib/math_numbertheory_mp_numth.o build/obj/lib/math_numbertheory_nistp_redc.o build/obj/lib/math_numbertheory_numthry.o build/obj/lib/math_numbertheory_pow_mod.o build/obj/lib/math_numbertheory_primality.o build/obj/lib/math_numbertheory_primes.o build/obj/lib/math_numbertheory_reducer.o build/obj/lib/math_numbertheory_ressol.o build/obj/lib/misc_aont_package.o build/obj/lib/misc_cryptobox.o build/obj/lib/misc_fpe_fe1.o build/obj/lib/misc_hotp.o build/obj/lib/misc_hotp_totp.o build/obj/lib/misc_nist_keywrap.o build/obj/lib/misc_rfc3394.o build/obj/lib/misc_roughtime.o build/obj/lib/misc_srp6.o build/obj/lib/misc_tss.o build/obj/lib/modes_aead.o build/obj/lib/modes_aead_ccm.o build/obj/lib/modes_aead_chacha20poly1305.o build/obj/lib/modes_aead_eax.o build/obj/lib/modes_aead_gcm_clmul_cpu.o build/obj/lib/modes_aead_gcm_clmul_ssse3.o build/obj/lib/modes_aead_gcm.o build/obj/lib/modes_aead_gcm_ghash.o build/obj/lib/modes_aead_ocb.o build/obj/lib/modes_aead_siv.o build/obj/lib/modes_cbc.o build/obj/lib/modes_cfb.o build/obj/lib/modes_cipher_mode.o build/obj/lib/modes_mode_pad.o build/obj/lib/modes_xts.o build/obj/lib/passhash_bcrypt.o build/obj/lib/passhash_passhash9.o build/obj/lib/pbkdf_argon2.o build/obj/lib/pbkdf_argon2_argon2fmt.o build/obj/lib/pbkdf_argon2_argon2pwhash.o build/obj/lib/pbkdf_bcrypt_pbkdf.o build/obj/lib/pbkdf.o build/obj/lib/pbkdf_pbkdf1.o build/obj/lib/pbkdf_pbkdf2.o build/obj/lib/pbkdf_pgp_s2k.o build/obj/lib/pbkdf_pwdhash.o build/obj/lib/pbkdf_scrypt.o build/obj/lib/pk_pad_eme.o build/obj/lib/pk_pad_eme_oaep_oaep.o build/obj/lib/pk_pad_eme_pkcs1_eme_pkcs.o build/obj/lib/pk_pad_eme_raw.o build/obj/lib/pk_pad_emsa.o build/obj/lib/pk_pad_emsa1.o build/obj/lib/pk_pad_emsa_pkcs1.o build/obj/lib/pk_pad_emsa_pssr_pssr.o build/obj/lib/pk_pad_emsa_raw.o build/obj/lib/pk_pad_emsa_x931.o build/obj/lib/pk_pad_hash_id.o build/obj/lib/pk_pad_iso9796.o build/obj/lib/pk_pad_mgf1.o build/obj/lib/pk_pad_padding.o build/obj/lib/prov_openssl_block.o build/obj/lib/prov_openssl_ec.o build/obj/lib/prov_openssl_hash.o build/obj/lib/prov_openssl_mode.o build/obj/lib/prov_openssl_rc4.o build/obj/lib/prov_openssl_rsa.o build/obj/lib/prov_pkcs11_p11.o build/obj/lib/prov_pkcs11_p11_ecc_key.o build/obj/lib/prov_pkcs11_p11_ecdh.o build/obj/lib/prov_pkcs11_p11_ecdsa.o build/obj/lib/prov_pkcs11_p11_mechanism.o build/obj/lib/prov_pkcs11_p11_module.o build/obj/lib/prov_pkcs11_p11_object.o build/obj/lib/prov_pkcs11_p11_randomgenerator.o build/obj/lib/prov_pkcs11_p11_rsa.o build/obj/lib/prov_pkcs11_p11_session.o build/obj/lib/prov_pkcs11_p11_slot.o build/obj/lib/prov_pkcs11_p11_x509.o build/obj/lib/psk_db.o build/obj/lib/psk_db_psk_db_sql.o build/obj/lib/pubkey_blinding.o build/obj/lib/pubkey_cecpq1.o build/obj/lib/pubkey_curve25519.o build/obj/lib/pubkey_curve25519_donna.o build/obj/lib/pubkey_dh.o build/obj/lib/pubkey_dl_algo.o build/obj/lib/pubkey_dl_group.o build/obj/lib/pubkey_dl_group_dl_named.o build/obj/lib/pubkey_dlies.o build/obj/lib/pubkey_dsa.o build/obj/lib/pubkey_ec_group_curve_gfp.o build/obj/lib/pubkey_ec_group.o build/obj/lib/pubkey_ec_group_ec_named.o build/obj/lib/pubkey_ec_group_point_gfp.o build/obj/lib/pubkey_ec_group_point_mul.o build/obj/lib/pubkey_ecc_key.o build/obj/lib/pubkey_ecdh.o build/obj/lib/pubkey_ecdsa.o build/obj/lib/pubkey_ecgdsa.o build/obj/lib/pubkey_ecies.o build/obj/lib/pubkey_eckcdsa.o build/obj/lib/pubkey_ed25519.o build/obj/lib/pubkey_ed25519_fe.o build/obj/lib/pubkey_ed25519_key.o build/obj/lib/pubkey_ed25519_ge.o build/obj/lib/pubkey_ed25519_sc_muladd.o build/obj/lib/pubkey_ed25519_sc_reduce.o build/obj/lib/pubkey_elgamal.o build/obj/lib/pubkey_gost_3410.o build/obj/lib/pubkey_keypair.o build/obj/lib/pubkey_mce_code_based_key_gen.o build/obj/lib/pubkey_mce_gf2m_rootfind_dcmp.o build/obj/lib/pubkey_mce_gf2m_small_m.o build/obj/lib/pubkey_mce_goppa_code.o build/obj/lib/pubkey_mce_workfactor.o build/obj/lib/pubkey_mce_mceliece.o build/obj/lib/pubkey_mce_mceliece_key.o build/obj/lib/pubkey_mce_polyn_gf2m.o build/obj/lib/pubkey_mceies.o build/obj/lib/pubkey_newhope.o build/obj/lib/pubkey_pbes2.o build/obj/lib/pubkey_pem.o build/obj/lib/pubkey_pk_algs.o build/obj/lib/pubkey_pk_keys.o build/obj/lib/pubkey_pk_ops.o build/obj/lib/pubkey_pkcs8.o build/obj/lib/pubkey.o build/obj/lib/pubkey_rfc6979.o build/obj/lib/pubkey_rsa.o build/obj/lib/pubkey_sm2.o build/obj/lib/pubkey_sm2_enc.o build/obj/lib/pubkey_workfactor.o build/obj/lib/pubkey_x509_key.o build/obj/lib/pubkey_xmss_common_ops.o build/obj/lib/pubkey_xmss_hash.o build/obj/lib/pubkey_xmss_index_registry.o build/obj/lib/pubkey_xmss_parameters.o build/obj/lib/pubkey_xmss_privatekey.o build/obj/lib/pubkey_xmss_publickey.o build/obj/lib/pubkey_xmss_signature.o build/obj/lib/pubkey_xmss_signature_operation.o build/obj/lib/pubkey_xmss_verification_operation.o build/obj/lib/pubkey_xmss_wots_parameters.o build/obj/lib/pubkey_xmss_wots_privatekey.o build/obj/lib/pubkey_xmss_wots_publickey.o build/obj/lib/rng_auto_rng.o build/obj/lib/rng_chacha_rng.o build/obj/lib/rng_hmac_drbg.o build/obj/lib/rng_rdrand_rng.o build/obj/lib/rng.o build/obj/lib/rng_stateful_rng.o build/obj/lib/rng_system_rng.o build/obj/lib/stream_chacha.o build/obj/lib/stream_chacha_avx2.o build/obj/lib/stream_chacha_simd32.o build/obj/lib/stream_ctr.o build/obj/lib/stream_ofb.o build/obj/lib/stream_rc4.o build/obj/lib/stream_salsa20.o build/obj/lib/stream_shake_cipher.o build/obj/lib/stream_cipher.o build/obj/lib/tls_credentials_manager.o build/obj/lib/tls_msg_cert_req.o build/obj/lib/tls_msg_cert_status.o build/obj/lib/tls_msg_cert_verify.o build/obj/lib/tls_msg_certificate.o build/obj/lib/tls_msg_client_hello.o build/obj/lib/tls_msg_client_kex.o build/obj/lib/tls_msg_finished.o build/obj/lib/tls_msg_hello_verify.o build/obj/lib/tls_msg_server_hello.o build/obj/lib/tls_msg_server_kex.o build/obj/lib/tls_msg_session_ticket.o build/obj/lib/tls_sessions_sql_tls_session_manager_sql.o build/obj/lib/tls_sessions_sqlite3_tls_session_manager_sqlite.o build/obj/lib/tls_alert.o build/obj/lib/tls_algos.o build/obj/lib/tls_blocking.o build/obj/lib/tls_callbacks.o build/obj/lib/tls_cbc.o build/obj/lib/tls_channel.o build/obj/lib/tls_ciphersuite.o build/obj/lib/tls_client.o build/obj/lib/tls_extensions.o build/obj/lib/tls_handshake_hash.o build/obj/lib/tls_handshake_io.o build/obj/lib/tls_handshake_state.o build/obj/lib/tls_policy.o build/obj/lib/tls_record.o build/obj/lib/tls_server.o build/obj/lib/tls_session.o build/obj/lib/tls_session_key.o build/obj/lib/tls_session_manager_memory.o build/obj/lib/tls_suite_info.o build/obj/lib/tls_text_policy.o build/obj/lib/tls_version.o build/obj/lib/utils_assert.o build/obj/lib/utils_calendar.o build/obj/lib/utils_charset.o build/obj/lib/utils_cpuid.o build/obj/lib/utils_cpuid_arm.o build/obj/lib/utils_cpuid_ppc.o build/obj/lib/utils_cpuid_x86.o build/obj/lib/utils_ct_utils.o build/obj/lib/utils_data_src.o build/obj/lib/utils_dyn_load.o build/obj/lib/utils_exceptn.o build/obj/lib/utils_filesystem.o build/obj/lib/utils_http_util.o build/obj/lib/utils_locking_allocator.o build/obj/lib/utils_mem_ops.o build/obj/lib/utils_mem_pool.o build/obj/lib/utils_os_utils.o build/obj/lib/utils_parsing.o build/obj/lib/utils_poly_dbl.o build/obj/lib/utils_read_cfg.o build/obj/lib/utils_read_kv.o build/obj/lib/utils_socket.o build/obj/lib/utils_socket_udp.o build/obj/lib/utils_socket_uri.o build/obj/lib/utils_sqlite3.o build/obj/lib/utils_thread_utils_barrier.o build/obj/lib/utils_thread_utils_rwlock.o build/obj/lib/utils_thread_utils_semaphore.o build/obj/lib/utils_thread_utils_thread_pool.o build/obj/lib/utils_timer.o build/obj/lib/utils_uuid.o build/obj/lib/utils_version.o build/obj/lib/x509_asn1_alt_name.o build/obj/lib/x509_cert_status.o build/obj/lib/x509_certstor.o build/obj/lib/x509_certstor_flatfile.o build/obj/lib/x509_certstor_sql.o build/obj/lib/x509_certstor_sqlite3_certstor_sqlite.o build/obj/lib/x509_certstor_system.o build/obj/lib/x509_crl_ent.o build/obj/lib/x509_datastor.o build/obj/lib/x509_key_constraint.o build/obj/lib/x509_name_constraint.o build/obj/lib/x509_ocsp.o build/obj/lib/x509_ocsp_types.o build/obj/lib/x509_pkcs10.o build/obj/lib/x509_ca.o build/obj/lib/x509_crl.o build/obj/lib/x509_dn.o build/obj/lib/x509_dn_ub.o build/obj/lib/x509_ext.o build/obj/lib/x509_obj.o build/obj/lib/x509_x509cert.o build/obj/lib/x509_x509opt.o build/obj/lib/x509_x509path.o build/obj/lib/x509_x509self.o -lboost_system -lbz2 -lcrypto -ldl -llzma -lrt -lsqlite3 -lz -o libbotan-2.so.13
cd . && ln -fs libbotan-2.so.13 libbotan-2.so
cd . && ln -fs libbotan-2.so.13 libbotan-2.so.13.14.0
g++  -fstack-protector -m64 -pthread build/obj/cli/argon2.o build/obj/cli/asn1.o build/obj/cli/bcrypt.o build/obj/cli/cc_enc.o build/obj/cli/cli.o build/obj/cli/cli_rng.o build/obj/cli/codec.o build/obj/cli/compress.o build/obj/cli/encryption.o build/obj/cli/entropy.o build/obj/cli/hash.o build/obj/cli/hmac.o build/obj/cli/main.o build/obj/cli/math.o build/obj/cli/pbkdf.o build/obj/cli/pk_crypt.o build/obj/cli/psk.o build/obj/cli/pubkey.o build/obj/cli/roughtime.o build/obj/cli/sandbox.o build/obj/cli/speed.o build/obj/cli/timing_tests.o build/obj/cli/tls_client.o build/obj/cli/tls_http_server.o build/obj/cli/tls_proxy.o build/obj/cli/tls_server.o build/obj/cli/tls_utils.o build/obj/cli/tss.o build/obj/cli/utils.o build/obj/cli/x509.o -L. -lbotan-2 -lboost_system -lbz2 -lcrypto -ldl -llzma -lrt -lsqlite3 -lz  -o botan
python3 src/scripts/build_docs.py --build-dir="build"
   INFO: Starting sphinx-build -q -c ./src/configs/sphinx -j 4 -b html ./doc build/docs/handbook
/home/stig/rpmbuild/BUILD/Botan-2.14.0/doc/api_ref/python.rst:417: WARNING: duplicate object description of botan.PrivateKey.to_der, other instance in api_ref/python, use :noindex: for one of them
Target:  std
ParentKey:  [(<ASTNestedNameElement>, None, '_CPPv47decryptRKNSt6stringERKNSt6stringE')]
  ::
    RandomNumberGenerator: RandomNumberGenerator	(api_ref/rng)
      randomize: void randomize(uint8_t *output_array, size_t length)	(api_ref/rng)
        output_array: uint8_t *output_array	(api_ref/rng)
        length: size_t length	(api_ref/rng)
      randomize_with_input: void randomize_with_input(uint8_t *data, size_t length, const uint8_t *extra_input, size_t extra_input_len)	(api_ref/rng)
        data: uint8_t *data	(api_ref/rng)
        length: size_t length	(api_ref/rng)
        extra_input: const uint8_t *extra_input	(api_ref/rng)
        extra_input_len: size_t extra_input_len	(api_ref/rng)
      randomize_with_ts_input: void randomize_with_ts_input(uint8_t *data, size_t length)	(api_ref/rng)
        data: uint8_t *data	(api_ref/rng)
        length: size_t length	(api_ref/rng)
      next_byte: uint8_t next_byte()	(api_ref/rng)
      add_entropy: void add_entropy(const uint8_t *data, size_t length)	(api_ref/rng)
        data: const uint8_t *data	(api_ref/rng)
        length: size_t length	(api_ref/rng)
      accepts_input: bool accepts_input() const	(api_ref/rng)
      reseed_from_rng: void reseed_from_rng(RandomNumberGenerator &rng, size_t poll_bits = BOTAN_RNG_RESEED_POLL_BITS)	(api_ref/rng)
        rng: RandomNumberGenerator &rng	(api_ref/rng)
        poll_bits: size_t poll_bits = BOTAN_RNG_RESEED_POLL_BITS	(api_ref/rng)
    system_rng: RandomNumberGenerator &system_rng()	(api_ref/rng)
    HMAC_DRBG: HMAC_DRBG	(api_ref/rng)
      HMAC_DRBG: HMAC_DRBG(std::unique_ptr<MessageAuthenticationCode> prf, RandomNumberGenerator &underlying_rng, size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL, size_t max_number_of_bytes_per_request = 64 * 1024)	(api_ref/rng)
        prf: std::unique_ptr<MessageAuthenticationCode> prf	(api_ref/rng)
        underlying_rng: RandomNumberGenerator &underlying_rng	(api_ref/rng)
        reseed_interval: size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL	(api_ref/rng)
        max_number_of_bytes_per_request: size_t max_number_of_bytes_per_request = 64 * 1024	(api_ref/rng)
      HMAC_DRBG: HMAC_DRBG(std::unique_ptr<MessageAuthenticationCode> prf, Entropy_Sources &entropy_sources, size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL, size_t max_number_of_bytes_per_request = 64 * 1024)	(api_ref/rng)
        prf: std::unique_ptr<MessageAuthenticationCode> prf	(api_ref/rng)
        entropy_sources: Entropy_Sources &entropy_sources	(api_ref/rng)
        reseed_interval: size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL	(api_ref/rng)
        max_number_of_bytes_per_request: size_t max_number_of_bytes_per_request = 64 * 1024	(api_ref/rng)
      HMAC_DRBG: HMAC_DRBG(std::unique_ptr<MessageAuthenticationCode> prf, RandomNumberGenerator &underlying_rng, Entropy_Sources &entropy_sources, size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL, size_t max_number_of_bytes_per_request = 64 * 1024)	(api_ref/rng)
        prf: std::unique_ptr<MessageAuthenticationCode> prf	(api_ref/rng)
        underlying_rng: RandomNumberGenerator &underlying_rng	(api_ref/rng)
        entropy_sources: Entropy_Sources &entropy_sources	(api_ref/rng)
        reseed_interval: size_t reseed_interval = BOTAN_RNG_DEFAULT_RESEED_INTERVAL	(api_ref/rng)
        max_number_of_bytes_per_request: size_t max_number_of_bytes_per_request = 64 * 1024	(api_ref/rng)
      HMAC_DRBG: HMAC_DRBG(std::unique_ptr<MessageAuthenticationCode> prf)	(api_ref/rng)
        prf: std::unique_ptr<MessageAuthenticationCode> prf	(api_ref/rng)
      HMAC_DRBG: HMAC_DRBG(const std::string &hmac_hash)	(api_ref/rng)
        hmac_hash: const std::string &hmac_hash	(api_ref/rng)
    generate_srp6_verifier: BigInt generate_srp6_verifier(const std::string &username, const std::string &password, const std::vector<uint8_t> &salt, const std::string &group_id, const std::string &hash_id)	(api_ref/srp)
      username: const std::string &username	(api_ref/srp)
      password: const std::string &password	(api_ref/srp)
      salt: const std::vector<uint8_t> &salt	(api_ref/srp)
      group_id: const std::string &group_id	(api_ref/srp)
      hash_id: const std::string &hash_id	(api_ref/srp)
    srp6_group_identifier: std::string srp6_group_identifier(const BigInt &N, const BigInt &g)	(api_ref/srp)
      N: const BigInt &N	(api_ref/srp)
      g: const BigInt &g	(api_ref/srp)
    SRP6_Server_Session: SRP6_Server_Session	(api_ref/srp)
      step1: BigInt step1(const BigInt &v, const std::string &group_id, const std::string &hash_id, RandomNumberGenerator &rng)	(api_ref/srp)
        v: const BigInt &v	(api_ref/srp)
        group_id: const std::string &group_id	(api_ref/srp)
        hash_id: const std::string &hash_id	(api_ref/srp)
        rng: RandomNumberGenerator &rng	(api_ref/srp)
      step2: SymmetricKey step2(const BigInt &A)	(api_ref/srp)
        A: const BigInt &A	(api_ref/srp)
    srp6_client_agree: std::pair<BigInt, SymmetricKey> srp6_client_agree(const std::string &username, const std::string &password, const std::string &group_id, const std::string &hash_id, const std::vector<uint8_t> &salt, const BigInt &B, RandomNumberGenerator &rng)	(api_ref/srp)
      username: const std::string &username	(api_ref/srp)
      password: const std::string &password	(api_ref/srp)
      group_id: const std::string &group_id	(api_ref/srp)
      hash_id: const std::string &hash_id	(api_ref/srp)
      salt: const std::vector<uint8_t> &salt	(api_ref/srp)
      B: const BigInt &B	(api_ref/srp)
      rng: RandomNumberGenerator &rng	(api_ref/srp)
    StreamCipher: StreamCipher	(api_ref/stream_ciphers)
      name: std::string name() const	(api_ref/stream_ciphers)
      clear: void clear()	(api_ref/stream_ciphers)
      clone: StreamCipher *clone() const	(api_ref/stream_ciphers)
      set_key: void set_key(const uint8_t *key, size_t length)	(api_ref/stream_ciphers)
        key: const uint8_t *key	(api_ref/stream_ciphers)
        length: size_t length	(api_ref/stream_ciphers)
      valid_keylength: bool valid_keylength(size_t length) const	(api_ref/stream_ciphers)
        length: size_t length	(api_ref/stream_ciphers)
      minimum_keylength: size_t minimum_keylength() const	(api_ref/stream_ciphers)
      maximum_keylength: size_t maximum_keylength() const	(api_ref/stream_ciphers)
      valid_iv_length: bool valid_iv_length(size_t iv_len) const	(api_ref/stream_ciphers)
        iv_len: size_t iv_len	(api_ref/stream_ciphers)
      default_iv_length: size_t default_iv_length() const	(api_ref/stream_ciphers)
      set_iv: void set_iv(const uint8_t*, size_t len)	(api_ref/stream_ciphers)
        len: size_t len	(api_ref/stream_ciphers)
      seek: void seek(uint64_t offset)	(api_ref/stream_ciphers)
        offset: uint64_t offset	(api_ref/stream_ciphers)
      cipher: void cipher(const uint8_t *in, uint8_t *out, size_t n)	(api_ref/stream_ciphers)
        in: const uint8_t *in	(api_ref/stream_ciphers)
        out: uint8_t *out	(api_ref/stream_ciphers)
        n: size_t n	(api_ref/stream_ciphers)
      cipher1: void cipher1(uint8_t *inout, size_t n)	(api_ref/stream_ciphers)
        inout: uint8_t *inout	(api_ref/stream_ciphers)
        n: size_t n	(api_ref/stream_ciphers)
      encipher: void encipher(std::vector<uint8_t> inout)	(api_ref/stream_ciphers)
        inout: std::vector<uint8_t> inout	(api_ref/stream_ciphers)
      encrypt: void encrypt(std::vector<uint8_t> inout)	(api_ref/stream_ciphers)
        inout: std::vector<uint8_t> inout	(api_ref/stream_ciphers)
      decrypt: void decrypt(std::vector<uint8_t> inout)	(api_ref/stream_ciphers)
        inout: std::vector<uint8_t> inout	(api_ref/stream_ciphers)
    tls_emit_data: void tls_emit_data(const uint8_t data[], size_t data_len)	(api_ref/tls)
      data: const uint8_t data[]	(api_ref/tls)
      data_len: size_t data_len	(api_ref/tls)
    tls_record_received: void tls_record_received(uint64_t rec_no, const uint8_t data[], size_t data_len)	(api_ref/tls)
      rec_no: uint64_t rec_no	(api_ref/tls)
      data: const uint8_t data[]	(api_ref/tls)
      data_len: size_t data_len	(api_ref/tls)
    tls_alert: void tls_alert(Alert alert)	(api_ref/tls)
      alert: Alert alert	(api_ref/tls)
    tls_session_established: bool tls_session_established(const TLS::Session &session)	(api_ref/tls)
      session: const TLS::Session &session	(api_ref/tls)
    tls_verify_cert_chain: void tls_verify_cert_chain(const std::vector<X509_Certificate> &cert_chain, const std::vector<std::shared_ptr<const OCSP::Response>> &ocsp_responses, const std::vector<Certificate_Store*> &trusted_roots, Usage_Type usage, const std::string &hostname, const Policy &policy)	(api_ref/tls)
      cert_chain: const std::vector<X509_Certificate> &cert_chain	(api_ref/tls)
      ocsp_responses: const std::vector<std::shared_ptr<const OCSP::Response>> &ocsp_responses	(api_ref/tls)
      trusted_roots: const std::vector<Certificate_Store*> &trusted_roots	(api_ref/tls)
      usage: Usage_Type usage	(api_ref/tls)
      hostname: const std::string &hostname	(api_ref/tls)
      policy: const Policy &policy	(api_ref/tls)
    tls_verify_cert_chain_ocsp_timeout: std::chrono::milliseconds tls_verify_cert_chain_ocsp_timeout() const	(api_ref/tls)
    tls_server_choose_app_protocol: std::string tls_server_choose_app_protocol(const std::vector<std::string> &client_protos)	(api_ref/tls)
      client_protos: const std::vector<std::string> &client_protos	(api_ref/tls)
    tls_session_activated: void tls_session_activated()	(api_ref/tls)
    tls_provide_cert_status: std::vector<uint8_t> tls_provide_cert_status(const std::vector<X509_Certificate> &chain, const Certificate_Status_Request &csr)	(api_ref/tls)
      chain: const std::vector<X509_Certificate> &chain	(api_ref/tls)
      csr: const Certificate_Status_Request &csr	(api_ref/tls)
    tls_peer_network_identity: std::string tls_peer_network_identity()	(api_ref/tls)
    tls_inspect_handshake_msg: void tls_inspect_handshake_msg(const Handshake_Message&)	(api_ref/tls)
    tls_modify_extensions: void tls_modify_extensions(Extensions &extn, Connection_Side which_side)	(api_ref/tls)
      extn: Extensions &extn	(api_ref/tls)
      which_side: Connection_Side which_side	(api_ref/tls)
    tls_examine_extensions: void tls_examine_extensions(const Extensions &extn, Connection_Side which_side)	(api_ref/tls)
      extn: const Extensions &extn	(api_ref/tls)
      which_side: Connection_Side which_side	(api_ref/tls)
    tls_log_error: void tls_log_error(const char *msg)	(api_ref/tls)
      msg: const char *msg	(api_ref/tls)
    tls_log_debug: void tls_log_debug(const char *msg)	(api_ref/tls)
      msg: const char *msg	(api_ref/tls)
    tls_log_debug_bin: void tls_log_debug_bin(const char *descr, const uint8_t val[], size_t len)	(api_ref/tls)
      descr: const char *descr	(api_ref/tls)
      val: const uint8_t val[]	(api_ref/tls)
      len: size_t len	(api_ref/tls)
    tls_decode_group_param: std::string tls_decode_group_param(TLS::Group_Params group_param)	(api_ref/tls)
      group_param: TLS::Group_Params group_param	(api_ref/tls)
    TLS
      Channel: TLS::Channel	(api_ref/tls)
        received_data: size_t received_data(const uint8_t buf[], size_t buf_size)	(api_ref/tls)
          buf: const uint8_t buf[]	(api_ref/tls)
          buf_size: size_t buf_size	(api_ref/tls)
        received_data: size_t received_data(const std::vector<uint8_t> &buf)	(api_ref/tls)
          buf: const std::vector<uint8_t> &buf	(api_ref/tls)
        send: void send(const uint8_t buf[], size_t buf_size)	(api_ref/tls)
          buf: const uint8_t buf[]	(api_ref/tls)
          buf_size: size_t buf_size	(api_ref/tls)
        send: void send(const std::string &str)	(api_ref/tls)
          str: const std::string &str	(api_ref/tls)
        send: void send(const std::vector<uint8_t> &vec)	(api_ref/tls)
          vec: const std::vector<uint8_t> &vec	(api_ref/tls)
        close: void close()	(api_ref/tls)
        send_alert: void send_alert(const Alert &alert)	(api_ref/tls)
          alert: const Alert &alert	(api_ref/tls)
        is_active: bool is_active()	(api_ref/tls)
        is_closed: bool is_closed()	(api_ref/tls)
        timeout_check: bool timeout_check()	(api_ref/tls)
        renegotiate: void renegotiate(bool force_full_renegotiation = false)	(api_ref/tls)
          force_full_renegotiation: bool force_full_renegotiation = false	(api_ref/tls)
        peer_cert_chain: std::vector<X509_Certificate> peer_cert_chain()	(api_ref/tls)
        key_material_export: SymmetricKey key_material_export(const std::string &label, const std::string &context, size_t length)	(api_ref/tls)
          label: const std::string &label	(api_ref/tls)
          context: const std::string &context	(api_ref/tls)
          length: size_t length	(api_ref/tls)
      Client: TLS::Client	(api_ref/tls)
        Client: Client(Callbacks &callbacks, Session_Manager &session_manager, Credentials_Manager &creds, const Policy &policy, RandomNumberGenerator &rng, const Server_Information &server_info = Server_Information(), const Protocol_Version offer_version = Protocol_Version::latest_tls_version(), const std::vector<std::string> &next_protocols = std::vector<std::string>(), size_t reserved_io_buffer_size = 16 * 1024)	(api_ref/tls)
          callbacks: Callbacks &callbacks	(api_ref/tls)
          session_manager: Session_Manager &session_manager	(api_ref/tls)
          creds: Credentials_Manager &creds	(api_ref/tls)
          policy: const Policy &policy	(api_ref/tls)
          rng: RandomNumberGenerator &rng	(api_ref/tls)
          server_info: const Server_Information &server_info = Server_Information()	(api_ref/tls)
          offer_version: const Protocol_Version offer_version = Protocol_Version::latest_tls_version()	(api_ref/tls)
          next_protocols: const std::vector<std::string> &next_protocols = std::vector<std::string>()	(api_ref/tls)
          reserved_io_buffer_size: size_t reserved_io_buffer_size = 16 * 1024	(api_ref/tls)
      Server: TLS::Server	(api_ref/tls)
        Server: Server(Callbacks &callbacks, Session_Manager &session_manager, Credentials_Manager &creds, const Policy &policy, RandomNumberGenerator &rng, bool is_datagram = false, size_t reserved_io_buffer_size = 16 * 1024)	(api_ref/tls)
          callbacks: Callbacks &callbacks	(api_ref/tls)
          session_manager: Session_Manager &session_manager	(api_ref/tls)
          creds: Credentials_Manager &creds	(api_ref/tls)
          policy: const Policy &policy	(api_ref/tls)
          rng: RandomNumberGenerator &rng	(api_ref/tls)
          is_datagram: bool is_datagram = false	(api_ref/tls)
          reserved_io_buffer_size: size_t reserved_io_buffer_size = 16 * 1024	(api_ref/tls)
      Session: TLS::Session	(api_ref/tls)
        version: Protocol_Version version() const	(api_ref/tls)
        ciphersite: Ciphersuite ciphersite() const	(api_ref/tls)
        server_info: Server_Information server_info() const	(api_ref/tls)
        peer_certs: std::vector<X509_Certificate> peer_certs() const	(api_ref/tls)
        srp_identifier: std::string srp_identifier() const	(api_ref/tls)
        secure_renegotiation: bool secure_renegotiation() const	(api_ref/tls)
        encrypt: std::vector<uint8_t> encrypt(const SymmetricKey &key, RandomNumberGenerator &rng)	(api_ref/tls)
          key: const SymmetricKey &key	(api_ref/tls)
          rng: RandomNumberGenerator &rng	(api_ref/tls)
        decrypt: static Session decrypt(const uint8_t ciphertext[], size_t length, const SymmetricKey &key)	(api_ref/tls)
          ciphertext: const uint8_t ciphertext[]	(api_ref/tls)
          length: size_t length	(api_ref/tls)
          key: const SymmetricKey &key	(api_ref/tls)
        DER_encode: secure_vector<uint8_t> DER_encode() const	(api_ref/tls)
      Session_Mananger: TLS::Session_Mananger	(api_ref/tls)
        save: void save(const Session &session)	(api_ref/tls)
          session: const Session &session	(api_ref/tls)
        remove_entry: void remove_entry(const std::vector<uint8_t> &session_id)	(api_ref/tls)
          session_id: const std::vector<uint8_t> &session_id	(api_ref/tls)
        load_from_session_id: bool load_from_session_id(const std::vector<uint8_t> &session_id, Session &session)	(api_ref/tls)
          session_id: const std::vector<uint8_t> &session_id	(api_ref/tls)
          session: Session &session	(api_ref/tls)
        load_from_server_info: bool load_from_server_info(const Server_Information &server, Session &session)	(api_ref/tls)
          server: const Server_Information &server	(api_ref/tls)
          session: Session &session	(api_ref/tls)
        session_lifetime: std::chrono::seconds session_lifetime() const	(api_ref/tls)
      Session_Managers_In_Memory: TLS::Session_Managers_In_Memory	(api_ref/tls)
        Session_Manager_In_Memory: Session_Manager_In_Memory(RandomNumberGenerator &rng, size_t max_sessions = 1000, std::chrono::seconds session_lifetime = 7200)	(api_ref/tls)
          rng: RandomNumberGenerator &rng	(api_ref/tls)
          max_sessions: size_t max_sessions = 1000	(api_ref/tls)
          session_lifetime: std::chrono::seconds session_lifetime = 7200	(api_ref/tls)
      Session_Manager_SQLite: TLS::Session_Manager_SQLite	(api_ref/tls)
        Session_Manager_SQLite: Session_Manager_SQLite(const std::string &passphrase, RandomNumberGenerator &rng, const std::string &db_filename, size_t max_sessions = 1000, std::chrono::seconds session_lifetime = 7200)	(api_ref/tls)
          passphrase: const std::string &passphrase	(api_ref/tls)
          rng: RandomNumberGenerator &rng	(api_ref/tls)
          db_filename: const std::string &db_filename	(api_ref/tls)
          max_sessions: size_t max_sessions = 1000	(api_ref/tls)
          session_lifetime: std::chrono::seconds session_lifetime = 7200	(api_ref/tls)
      Policy: TLS::Policy	(api_ref/tls)
        allowed_ciphers: std::vector<std::string> allowed_ciphers() const	(api_ref/tls)
        allowed_macs: std::vector<std::string> allowed_macs() const	(api_ref/tls)
        allowed_key_exchange_methods: std::vector<std::string> allowed_key_exchange_methods() const	(api_ref/tls)
        allowed_signature_hashes: std::vector<std::string> allowed_signature_hashes() const	(api_ref/tls)
        allowed_signature_methods: std::vector<std::string> allowed_signature_methods() const	(api_ref/tls)
        key_exchange_groups: std::vector<Group_Params> key_exchange_groups() const	(api_ref/tls)
        use_ecc_point_compression: bool use_ecc_point_compression() const	(api_ref/tls)
        acceptable_protocol_version: bool acceptable_protocol_version(Protocol_Version version)	(api_ref/tls)
          version: Protocol_Version version	(api_ref/tls)
        server_uses_own_ciphersuite_preferences: bool server_uses_own_ciphersuite_preferences() const	(api_ref/tls)
        allow_client_initiated_renegotiation: bool allow_client_initiated_renegotiation() const	(api_ref/tls)
        allow_server_initiated_renegotiation: bool allow_server_initiated_renegotiation() const	(api_ref/tls)
        abort_connection_on_undesired_renegotiation: bool abort_connection_on_undesired_renegotiation() const	(api_ref/tls)
        allow_insecure_renegotiation: bool allow_insecure_renegotiation() const	(api_ref/tls)
        minimum_signature_strength: size_t minimum_signature_strength() const	(api_ref/tls)
        require_cert_revocation_info: bool require_cert_revocation_info() const	(api_ref/tls)
        default_dh_group: Group_Params default_dh_group() const	(api_ref/tls)
        minimum_dh_group_size: size_t minimum_dh_group_size() const	(api_ref/tls)
        allow_tls10: bool allow_tls10() const	(api_ref/tls)
        allow_tls11: bool allow_tls11() const	(api_ref/tls)
        allow_tls12: bool allow_tls12() const	(api_ref/tls)
        minimum_rsa_bits: size_t minimum_rsa_bits() const	(api_ref/tls)
        minimum_dsa_group_size: size_t minimum_dsa_group_size() const	(api_ref/tls)
        minimum_ecdsa_group_size: size_t minimum_ecdsa_group_size() const	(api_ref/tls)
        minimum_ecdh_group_size: size_t minimum_ecdh_group_size() const	(api_ref/tls)
        check_peer_key_acceptable: void check_peer_key_acceptable(const Public_Key &public_key) const	(api_ref/tls)
          public_key: const Public_Key &public_key	(api_ref/tls)
        hide_unknown_users: bool hide_unknown_users() const	(api_ref/tls)
        session_ticket_lifetime: u32bit session_ticket_lifetime() const	(api_ref/tls)
      Ciphersuite: TLS::Ciphersuite	(api_ref/tls)
        ciphersuite_code: uint16_t ciphersuite_code() const	(api_ref/tls)
        to_string: std::string to_string() const	(api_ref/tls)
        kex_algo: std::string kex_algo() const	(api_ref/tls)
        sig_algo: std::string sig_algo() const	(api_ref/tls)
        cipher_algo: std::string cipher_algo() const	(api_ref/tls)
        mac_algo: std::string mac_algo() const	(api_ref/tls)
        acceptable_ciphersuite: bool acceptable_ciphersuite(const Ciphersuite &suite) const	(api_ref/tls)
          suite: const Ciphersuite &suite	(api_ref/tls)
        ciphersuite_list: std::vector<uint16_t> ciphersuite_list(Protocol_Version version, bool have_srp) const	(api_ref/tls)
          version: Protocol_Version version	(api_ref/tls)
          have_srp: bool have_srp	(api_ref/tls)
      Alert: TLS::Alert	(api_ref/tls)
        is_valid: is_valid() const	(api_ref/tls)
        is_fatal: is_fatal() const	(api_ref/tls)
        type: Type type() const	(api_ref/tls)
        type_string: std::string type_string()	(api_ref/tls)
      Protocol_Version: TLS::Protocol_Version	(api_ref/tls)
        Version_Code: Version_Code	(api_ref/tls)
        Protocol_Version: Protocol_Version(Version_Code named_version)	(api_ref/tls)
          named_version: Version_Code named_version	(api_ref/tls)
        major_version: uint8_t major_version() const	(api_ref/tls)
        minor_version: uint8_t minor_version() const	(api_ref/tls)
        to_string: std::string to_string() const	(api_ref/tls)
        latest_tls_version: static Protocol_Version latest_tls_version()	(api_ref/tls)
        latest_dtls_version: static Protocol_Version latest_dtls_version()	(api_ref/tls)
      template<class StreamLayer, class ChannelT> 
      Stream: template<class StreamLayer, class ChannelT> TLS::Stream	(api_ref/tls)
        StreamLayer: class StreamLayer	(api_ref/tls)
        ChannelT: class ChannelT	(api_ref/tls)
        template<typename ...Args> 
        Stream: template<typename ...Args> explicit Stream(Context &context, Args&&... args)	(api_ref/tls)
          Args: typename ...Args	(api_ref/tls)
          context: Context &context	(api_ref/tls)
          args: Args&&... args	(api_ref/tls)
        template<typename ...Args> 
        Stream: template<typename ...Args> explicit Stream(Arg &&arg, Context &context)	(api_ref/tls)
          Args: typename ...Args	(api_ref/tls)
          arg: Arg &&arg	(api_ref/tls)
          context: Context &context	(api_ref/tls)
        handshake: void handshake(Connection_Side side, boost::system::error_code &ec)	(api_ref/tls)
          side: Connection_Side side	(api_ref/tls)
          ec: boost::system::error_code &ec	(api_ref/tls)
        handshake: void handshake(Connection_Side side)	(api_ref/tls)
          side: Connection_Side side	(api_ref/tls)
        template<typename HandshakeHandler> 
        async_handshake: template<typename HandshakeHandler> DEDUCED async_handshake(Connection_Side side, HandshakeHandler &&handler)	(api_ref/tls)
          HandshakeHandler: typename HandshakeHandler	(api_ref/tls)
          side: Connection_Side side	(api_ref/tls)
          handler: HandshakeHandler &&handler	(api_ref/tls)
        shutdown: void shutdown(boost::system::error_code &ec)	(api_ref/tls)
          ec: boost::system::error_code &ec	(api_ref/tls)
        shutdown: void shutdown()	(api_ref/tls)
        template<typename ShutdownHandler> 
        async_shutdown: template<typename ShutdownHandler> void async_shutdown(ShutdownHandler &&handler)	(api_ref/tls)
          ShutdownHandler: typename ShutdownHandler	(api_ref/tls)
          handler: ShutdownHandler &&handler	(api_ref/tls)
        template<typename MutableBufferSequence> 
        read_some: template<typename MutableBufferSequence> std::size_t read_some(const MutableBufferSequence &buffers, boost::system::error_code &ec)	(api_ref/tls)
          MutableBufferSequence: typename MutableBufferSequence	(api_ref/tls)
          buffers: const MutableBufferSequence &buffers	(api_ref/tls)
          ec: boost::system::error_code &ec	(api_ref/tls)
        template<typename MutableBufferSequence> 
        read_some: template<typename MutableBufferSequence> std::size_t read_some(const MutableBufferSequence &buffers)	(api_ref/tls)
          MutableBufferSequence: typename MutableBufferSequence	(api_ref/tls)
          buffers: const MutableBufferSequence &buffers	(api_ref/tls)
        template<typename MutableBufferSequence, typename ReadHandler> 
        async_read_some: template<typename MutableBufferSequence, typename ReadHandler> DEDUCED async_read_some(const MutableBufferSequence &buffers, ReadHandler &&handler)	(api_ref/tls)
          MutableBufferSequence: typename MutableBufferSequence	(api_ref/tls)
          ReadHandler: typename ReadHandler	(api_ref/tls)
          buffers: const MutableBufferSequence &buffers	(api_ref/tls)
          handler: ReadHandler &&handler	(api_ref/tls)
        template<typename ConstBufferSequence> 
        write_some: template<typename ConstBufferSequence> std::size_t write_some(const ConstBufferSequence &buffers, boost::system::error_code &ec)	(api_ref/tls)
          ConstBufferSequence: typename ConstBufferSequence	(api_ref/tls)
          buffers: const ConstBufferSequence &buffers	(api_ref/tls)
          ec: boost::system::error_code &ec	(api_ref/tls)
        template<typename ConstBufferSequence> 
        write_some: template<typename ConstBufferSequence> std::size_t write_some(const ConstBufferSequence &buffers)	(api_ref/tls)
          ConstBufferSequence: typename ConstBufferSequence	(api_ref/tls)
          buffers: const ConstBufferSequence &buffers	(api_ref/tls)
        template<typename ConstBufferSequence, typename WriteHandler> 
        async_write_some: template<typename ConstBufferSequence, typename WriteHandler> DEDUCED async_write_some(const ConstBufferSequence &buffers, WriteHandler &&handler)	(api_ref/tls)
          ConstBufferSequence: typename ConstBufferSequence	(api_ref/tls)
          WriteHandler: typename WriteHandler	(api_ref/tls)
          buffers: const ConstBufferSequence &buffers	(api_ref/tls)
          handler: WriteHandler &&handler	(api_ref/tls)
      Context: TLS::Context	(api_ref/tls)
        Context: Context(Credentials_Manager &credentialsManager, RandomNumberGenerator &randomNumberGenerator, Session_Manager &sessionManager, Policy &policy, Server_Information serverInfo = Server_Information())	(api_ref/tls)
          credentialsManager: Credentials_Manager &credentialsManager	(api_ref/tls)
          randomNumberGenerator: RandomNumberGenerator &randomNumberGenerator	(api_ref/tls)
          sessionManager: Session_Manager &sessionManager	(api_ref/tls)
          policy: Policy &policy	(api_ref/tls)
          serverInfo: Server_Information serverInfo = Server_Information()	(api_ref/tls)
        set_verify_callback: void set_verify_callback(Verify_Callback_T callback)	(api_ref/tls)
          callback: Verify_Callback_T callback	(api_ref/tls)
    TPM_Context: TPM_Context	(api_ref/tpm)
      TPM_Context: TPM_Context(pin_cb cb, const char *srk_password)	(api_ref/tpm)
        cb: pin_cb cb	(api_ref/tpm)
        srk_password: const char *srk_password	(api_ref/tpm)
    TPM_RNG: TPM_RNG	(api_ref/tpm)
      TPM_RNG: TPM_RNG(TPM_Context &ctx)	(api_ref/tpm)
        ctx: TPM_Context &ctx	(api_ref/tpm)
    TPM_PrivateKey: TPM_PrivateKey	(api_ref/tpm)
      TPM_PrivateKey: TPM_PrivateKey(TPM_Context &ctx, size_t bits, const char *key_password)	(api_ref/tpm)
        ctx: TPM_Context &ctx	(api_ref/tpm)
        bits: size_t bits	(api_ref/tpm)
        key_password: const char *key_password	(api_ref/tpm)
      register_key: std::string register_key(TPM_Storage_Type storage_type)	(api_ref/tpm)
        storage_type: TPM_Storage_Type storage_type	(api_ref/tpm)
      TPM_PrivateKey: TPM_PrivateKey(TPM_Context &ctx, const std::string &uuid, TPM_Storage_Type storage_type)	(api_ref/tpm)
        ctx: TPM_Context &ctx	(api_ref/tpm)
        uuid: const std::string &uuid	(api_ref/tpm)
        storage_type: TPM_Storage_Type storage_type	(api_ref/tpm)
      export_blob: std::vector<uint8_t> export_blob() const	(api_ref/tpm)
      TPM_PrivateKey: TPM_PrivateKey(TPM_Context &ctx, const std::vector<uint8_t> &blob)	(api_ref/tpm)
        ctx: TPM_Context &ctx	(api_ref/tpm)
        blob: const std::vector<uint8_t> &blob	(api_ref/tpm)
      public_key: std::unique_ptr<Public_Key> public_key() const	(api_ref/tpm)
      handle: TSS_HKEY handle() const	(api_ref/tpm)
      registered_keys: std::vector<std::string> TPM_PrivateKey::registered_keys(TPM_Context &ctx)	(api_ref/tpm)
        ctx: TPM_Context &ctx	(api_ref/tpm)
    RTSS_Share: RTSS_Share	(api_ref/tss)
      split: static std::vector<RTSS_Share> split(uint8_t M, uint8_t N, const uint8_t secret[], uint16_t secret_len, const std::vector<uint8_t> &identifier, const std::string &hash_fn, RandomNumberGenerator &rng)	(api_ref/tss)
        M: uint8_t M	(api_ref/tss)
        N: uint8_t N	(api_ref/tss)
        secret: const uint8_t secret[]	(api_ref/tss)
        secret_len: uint16_t secret_len	(api_ref/tss)
        identifier: const std::vector<uint8_t> &identifier	(api_ref/tss)
        hash_fn: const std::string &hash_fn	(api_ref/tss)
        rng: RandomNumberGenerator &rng	(api_ref/tss)
      reconstruct: static secure_vector<uint8_t> reconstruct(const std::vector<RTSS_Share> &shares)	(api_ref/tss)
        shares: const std::vector<RTSS_Share> &shares	(api_ref/tss)
      RTSS_Share: RTSS_Share(const uint8_t data[], size_t len)	(api_ref/tss)
        data: const uint8_t data[]	(api_ref/tss)
        len: size_t len	(api_ref/tss)
      data: const secure_vector<uint8> &data() const	(api_ref/tss)
      share_id: uint8_t share_id() const	(api_ref/tss)
    version_string: std::string version_string()	(api_ref/versions)
    version_major: uint32_t version_major()	(api_ref/versions)
    version_minor: uint32_t version_minor()	(api_ref/versions)
    version_patch: uint32_t version_patch()	(api_ref/versions)
    version_datestamp: uint32_t version_datestamp()	(api_ref/versions)
    runtime_version_check: std::string runtime_version_check(uint32_t major, uint32_t minor, uint32_t patch)	(api_ref/versions)
      major: uint32_t major	(api_ref/versions)
      minor: uint32_t minor	(api_ref/versions)
      patch: uint32_t patch	(api_ref/versions)
    X509_Certificate: X509_Certificate	(api_ref/x509)
      X509_Certificate: X509_Certificate(const std::string &filename)	(api_ref/x509)
        filename: const std::string &filename	(api_ref/x509)
      X509_Certificate: X509_Certificate(const std::vector<uint8_t> &in)	(api_ref/x509)
        in: const std::vector<uint8_t> &in	(api_ref/x509)
      X509_Certificate: X509_Certificate(DataSource &source)	(api_ref/x509)
        source: DataSource &source	(api_ref/x509)
      subject_dn: X509_DN subject_dn() const	(api_ref/x509)
      issuer_dn: X509_DN issuer_dn() const	(api_ref/x509)
      subject_alt_name: const AlternativeName &subject_alt_name() const	(api_ref/x509)
      issuer_alt_name: const AlternativeName &issuer_alt_name() const	(api_ref/x509)
      load_subject_public_key: std::unique_ptr<Public_Key> load_subject_public_key() const	(api_ref/x509)
      subject_public_key_bits: std::vector<uint8_t> subject_public_key_bits() const	(api_ref/x509)
      subject_public_key_algo: AlgorithmIdentifier subject_public_key_algo() const	(api_ref/x509)
      serial_number: std::vector<uint8_t> serial_number() const	(api_ref/x509)
      raw_subject_dn: std::vector<uint8> raw_subject_dn() const	(api_ref/x509)
      raw_issuer_dn: std::vector<uint8> raw_issuer_dn() const	(api_ref/x509)
      not_before: X509_Time not_before() const	(api_ref/x509)
      not_after: X509_Time not_after() const	(api_ref/x509)
      v3_extensions: const Extensions &v3_extensions() const	(api_ref/x509)
      authority_key_id: std::vector<uint8_t> authority_key_id() const	(api_ref/x509)
      subject_key_id: std::vector<uint8_t> subject_key_id() const	(api_ref/x509)
      allowed_extended_usage: bool allowed_extended_usage(const OID &usage) const	(api_ref/x509)
        usage: const OID &usage	(api_ref/x509)
      extended_key_usage: std::vector<OID> extended_key_usage() const	(api_ref/x509)
      fingerprint: std::string fingerprint(const std::string &hash_fn = "SHA-1") const	(api_ref/x509)
        hash_fn: const std::string &hash_fn = "SHA-1"	(api_ref/x509)
      constraints: Key_Constraints constraints() const	(api_ref/x509)
      matches_dns_name: bool matches_dns_name(const std::string &name) const	(api_ref/x509)
        name: const std::string &name	(api_ref/x509)
      to_string: std::string to_string() const	(api_ref/x509)
      PEM_encode: std::string PEM_encode() const	(api_ref/x509)
      BER_encode: std::vector<uint8_t> BER_encode() const	(api_ref/x509)
    X509_DN: X509_DN	(api_ref/x509)
      has_field: bool has_field(const std::string &attr) const	(api_ref/x509)
        attr: const std::string &attr	(api_ref/x509)
      get_attribute: std::vector<std::string> get_attribute(const std::string &attr) const	(api_ref/x509)
        attr: const std::string &attr	(api_ref/x509)
      get_first_attribute: std::string get_first_attribute(const std::string &attr) const	(api_ref/x509)
        attr: const std::string &attr	(api_ref/x509)
      get_attributes: std::multimap<OID, std::string> get_attributes() const	(api_ref/x509)
      contents: std::multimap<std::string, std::string> contents() const	(api_ref/x509)
      add_attribute: void add_attribute(const std::string &key, const std::string &val)	(api_ref/x509)
        key: const std::string &key	(api_ref/x509)
        val: const std::string &val	(api_ref/x509)
      add_attribute: void add_attribute(const OID &oid, const std::string &val)	(api_ref/x509)
        oid: const OID &oid	(api_ref/x509)
        val: const std::string &val	(api_ref/x509)
    Extensions: Extensions	(api_ref/x509)
      add: void add(Certificate_Extension *extn, bool critical = false)	(api_ref/x509)
        extn: Certificate_Extension *extn	(api_ref/x509)
        critical: bool critical = false	(api_ref/x509)
      add_new: bool add_new(Certificate_Extension *extn, bool critical = false)	(api_ref/x509)
        extn: Certificate_Extension *extn	(api_ref/x509)
        critical: bool critical = false	(api_ref/x509)
      replace: void replace(Certificate_Extension *extn, bool critical = false)	(api_ref/x509)
        extn: Certificate_Extension *extn	(api_ref/x509)
        critical: bool critical = false	(api_ref/x509)
      get: std::unique_ptr<Certificate_Extension> get(const OID &oid) const	(api_ref/x509)
        oid: const OID &oid	(api_ref/x509)
      template<typename T> 
      get_raw: template<typename T> std::unique_ptr<T> get_raw(const OID &oid)	(api_ref/x509)
        T: typename T	(api_ref/x509)
        oid: const OID &oid	(api_ref/x509)
      extensions: std::vector<std::pair<std::unique_ptr<Certificate_Extension>, bool>> extensions() const	(api_ref/x509)
      extensions_raw: std::map<OID, std::pair<std::vector<uint8_t>, bool>> extensions_raw() const	(api_ref/x509)
    Certificate_Store
      add_crl: void Certificate_Store::add_crl(const X509_CRL &crl)	(api_ref/x509)
        crl: const X509_CRL &crl	(api_ref/x509)
    Certificate_Store_In_Memory: Certificate_Store_In_Memory	(api_ref/x509)
      Certificate_Store_In_Memory: Certificate_Store_In_Memory(const std::string &dir)	(api_ref/x509)
        dir: const std::string &dir	(api_ref/x509)
      Certificate_Store_In_Memory: Certificate_Store_In_Memory(const X509_Certificate &cert)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
      Certificate_Store_In_Memory: Certificate_Store_In_Memory()	(api_ref/x509)
      add_certificate: void add_certificate(const X509_Certificate &cert)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
      add_certificate: void add_certificate(std::shared_ptr<const X509_Certificate> cert)	(api_ref/x509)
        cert: std::shared_ptr<const X509_Certificate> cert	(api_ref/x509)
      add_crl: void add_crl(const X509_CRL &crl)	(api_ref/x509)
        crl: const X509_CRL &crl	(api_ref/x509)
      add_crl: void add_crl(std::shared_ptr<const X509_CRL> crl)	(api_ref/x509)
        crl: std::shared_ptr<const X509_CRL> crl	(api_ref/x509)
    Certificate_Store_In_SQL: Certificate_Store_In_SQL	(api_ref/x509)
      Certificate_Store_In_SQL: Certificate_Store_In_SQL(const std::shared_ptr<SQL_Database> db, const std::string &passwd, RandomNumberGenerator &rng, const std::string &table_prefix = "")	(api_ref/x509)
        db: const std::shared_ptr<SQL_Database> db	(api_ref/x509)
        passwd: const std::string &passwd	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        table_prefix: const std::string &table_prefix = ""	(api_ref/x509)
      insert_cert: bool insert_cert(const X509_Certificate &cert)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
      remove_cert: remove_cert(const X509_Certificate &cert)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
      find_key: std::shared_ptr<const Private_Key> find_key(const X509_Certificate&) const	(api_ref/x509)
      find_certs_for_key: std::vector<std::shared_ptr<const X509_Certificate>> find_certs_for_key(const Private_Key &key) const	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
      insert_key: bool insert_key(const X509_Certificate &cert, const Private_Key &key)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
      remove_key: void remove_key(const Private_Key &key)	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
      revoke_cert: void revoke_cert(const X509_Certificate&, CRL_Code, const X509_Time &time = X509_Time())	(api_ref/x509)
        time: const X509_Time &time = X509_Time()	(api_ref/x509)
      affirm_cert: void affirm_cert(const X509_Certificate&)	(api_ref/x509)
      generate_crls: std::vector<X509_CRL> generate_crls() const	(api_ref/x509)
    Certificate_Store_In_SQLite: Certificate_Store_In_SQLite	(api_ref/x509)
      Certificate_Store_In_SQLite: Certificate_Store_In_SQLite(const std::string &db_path, const std::string &passwd, RandomNumberGenerator &rng, const std::string &table_prefix = "")	(api_ref/x509)
        db_path: const std::string &db_path	(api_ref/x509)
        passwd: const std::string &passwd	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        table_prefix: const std::string &table_prefix = ""	(api_ref/x509)
    x509_path_validate: Path_Validation_Result x509_path_validate(const X509_Certificate &end_cert, const Path_Validation_Restrictions &restrictions, const Certificate_Store &store, const std::string &hostname = "", Usage_Type usage = Usage_Type::UNSPECIFIED, std::chrono::system_clock::time_point validation_time = std::chrono::system_clock::now(), std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), const std::vector<std::shared_ptr<const OCSP::Response>> &ocsp_resp = std::vector<std::shared_ptr<const OCSP::Response>>())	(api_ref/x509)
      end_cert: const X509_Certificate &end_cert	(api_ref/x509)
      restrictions: const Path_Validation_Restrictions &restrictions	(api_ref/x509)
      store: const Certificate_Store &store	(api_ref/x509)
      hostname: const std::string &hostname = ""	(api_ref/x509)
      usage: Usage_Type usage = Usage_Type::UNSPECIFIED	(api_ref/x509)
      validation_time: std::chrono::system_clock::time_point validation_time = std::chrono::system_clock::now()	(api_ref/x509)
      ocsp_timeout: std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0)	(api_ref/x509)
      ocsp_resp: const std::vector<std::shared_ptr<const OCSP::Response>> &ocsp_resp = std::vector<std::shared_ptr<const OCSP::Response>>()	(api_ref/x509)
    Path_Validation_Result: Path_Validation_Result	(api_ref/x509)
      successful_validation: bool successful_validation() const	(api_ref/x509)
      result_string: std::string result_string() const	(api_ref/x509)
      trust_root: const X509_Certificate &trust_root() const	(api_ref/x509)
      cert_path: const std::vector<X509_Certificate> &cert_path() const	(api_ref/x509)
      result: Certificate_Status_Code result() const	(api_ref/x509)
      all_statuses: const std::vector<std::set<Certificate_Status_Code>> &all_statuses() const	(api_ref/x509)
      trusted_hashes: std::set<std::string> trusted_hashes() const	(api_ref/x509)
    Path_Validation_Restrictions: Path_Validation_Restrictions(bool require_rev, size_t minimum_key_strength, bool ocsp_all_intermediates, const std::set<std::string> &trusted_hashes)	(api_ref/x509)
      require_rev: bool require_rev	(api_ref/x509)
      minimum_key_strength: size_t minimum_key_strength	(api_ref/x509)
      ocsp_all_intermediates: bool ocsp_all_intermediates	(api_ref/x509)
      trusted_hashes: const std::set<std::string> &trusted_hashes	(api_ref/x509)
    X509_CA
      X509_CA: X509_CA::X509_CA(const X509_Certificate &cert, const Private_Key &key, const std::string &hash_fn, RandomNumberGenerator &rng)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
        hash_fn: const std::string &hash_fn	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
      X509_CA: X509_CA::X509_CA(const X509_Certificate &cert, const Private_Key &key, const std::map<std::string, std::string> &opts, const std::string &hash_fn, RandomNumberGenerator &rng)	(api_ref/x509)
        cert: const X509_Certificate &cert	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
        opts: const std::map<std::string, std::string> &opts	(api_ref/x509)
        hash_fn: const std::string &hash_fn	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
      sign_request: X509_Certificate X509_CA::sign_request(const PKCS10_Request &req, RandomNumberGenerator &rng, const X509_Time &not_before, const X509_Time &not_after)	(api_ref/x509)
        req: const PKCS10_Request &req	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        not_before: const X509_Time &not_before	(api_ref/x509)
        not_after: const X509_Time &not_after	(api_ref/x509)
      new_crl: X509_CRL X509_CA::new_crl(RandomNumberGenerator &rng, uint32_t next_update = 0)	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        next_update: uint32_t next_update = 0	(api_ref/x509)
      update_crl: X509_CRL X509_CA::update_crl(const X509_CRL &last_crl, std::vector<CRL_Entry> new_entries, RandomNumberGenerator &rng, size_t next_update = 0)	(api_ref/x509)
        last_crl: const X509_CRL &last_crl	(api_ref/x509)
        new_entries: std::vector<CRL_Entry> new_entries	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        next_update: size_t next_update = 0	(api_ref/x509)
    create_self_signed_cert: X509_Certificate create_self_signed_cert(const X509_Cert_Options &opts, const Private_Key &key, const std::string &hash_fn, RandomNumberGenerator &rng)	(api_ref/x509)
      opts: const X509_Cert_Options &opts	(api_ref/x509)
      key: const Private_Key &key	(api_ref/x509)
      hash_fn: const std::string &hash_fn	(api_ref/x509)
      rng: RandomNumberGenerator &rng	(api_ref/x509)
    create_cert_req: PKCS10_Request create_cert_req(const X509_Cert_Options &opts, const Private_Key &key, const std::string &hash_fn, RandomNumberGenerator &rng)	(api_ref/x509)
      opts: const X509_Cert_Options &opts	(api_ref/x509)
      key: const Private_Key &key	(api_ref/x509)
      hash_fn: const std::string &hash_fn	(api_ref/x509)
      rng: RandomNumberGenerator &rng	(api_ref/x509)
    PKCS10_Request
      create: PKCS10_Request PKCS10_Request::create(const Private_Key &key, const X509_DN &subject_dn, const Extensions &extensions, const std::string &hash_fn, RandomNumberGenerator &rng, const std::string &padding_scheme = "", const std::string &challenge = "")	(api_ref/x509)
        key: const Private_Key &key	(api_ref/x509)
        subject_dn: const X509_DN &subject_dn	(api_ref/x509)
        extensions: const Extensions &extensions	(api_ref/x509)
        hash_fn: const std::string &hash_fn	(api_ref/x509)
        rng: RandomNumberGenerator &rng	(api_ref/x509)
        padding_scheme: const std::string &padding_scheme = ""	(api_ref/x509)
        challenge: const std::string &challenge = ""	(api_ref/x509)
    OCSP
      Request: OCSP::Request	(api_ref/x509)
        OCSP
          Request: OCSP::Request(const X509_Certificate &issuer_cert, const BigInt &subject_serial)	(api_ref/x509)
            issuer_cert: const X509_Certificate &issuer_cert	(api_ref/x509)
            subject_serial: const BigInt &subject_serial	(api_ref/x509)
          Request: OCSP::Request(const X509_Certificate &issuer_cert, const X509_Certificate &subject_cert)	(api_ref/x509)
            issuer_cert: const X509_Certificate &issuer_cert	(api_ref/x509)
            subject_cert: const X509_Certificate &subject_cert	(api_ref/x509)
        BER_encode: std::vector<uint8_t> BER_encode() const	(api_ref/x509)
        base64_encode: std::string base64_encode() const	(api_ref/x509)
      Response: OCSP::Response	(api_ref/x509)
        OCSP
          Response: OCSP::Response(const uint8_t response_bits[], size_t response_bits_len)	(api_ref/x509)
            response_bits: const uint8_t response_bits[]	(api_ref/x509)
            response_bits_len: size_t response_bits_len	(api_ref/x509)
        check_signature: Certificate_Status_Code check_signature(const std::vector<Certificate_Store*> &trust_roots, const std::vector<std::shared_ptr<const X509_Certificate>> &cert_path = const std::vector<std::shared<const X509_Certificate>>()) const	(api_ref/x509)
          trust_roots: const std::vector<Certificate_Store*> &trust_roots	(api_ref/x509)
          cert_path: const std::vector<std::shared_ptr<const X509_Certificate>> &cert_path = const std::vector<std::shared<const X509_Certificate>>()	(api_ref/x509)
        verify_signature: Certificate_Status_Code verify_signature(const X509_Certificate &issuing_cert) const	(api_ref/x509)
          issuing_cert: const X509_Certificate &issuing_cert	(api_ref/x509)
        status_for: Certificate_Status_Code status_for(const X509_Certificate &issuer, const X509_Certificate &subject, std::chrono::system_clock::time_point ref_time = std::chrono::system_clock::now()) const	(api_ref/x509)
          issuer: const X509_Certificate &issuer	(api_ref/x509)
          subject: const X509_Certificate &subject	(api_ref/x509)
          ref_time: std::chrono::system_clock::time_point ref_time = std::chrono::system_clock::now()	(api_ref/x509)
        produced_at: const X509_Time &produced_at() const	(api_ref/x509)
        signer_name: const X509_DN &signer_name() const	(api_ref/x509)
        signer_key_hash: const std::vector<uint8_t> &signer_key_hash() const	(api_ref/x509)
        raw_bits: const std::vector<uint8_t> &raw_bits() const	(api_ref/x509)
    online_check: OCSP::Response online_check(const X509_Certificate &issuer, const BigInt &subject_serial, const std::string &ocsp_responder, const Certificate_Store *trusted_roots)	(api_ref/x509)
      issuer: const X509_Certificate &issuer	(api_ref/x509)
      subject_serial: const BigInt &subject_serial	(api_ref/x509)
      ocsp_responder: const std::string &ocsp_responder	(api_ref/x509)
      trusted_roots: const Certificate_Store *trusted_roots	(api_ref/x509)
      subject: const X509_Certificate &subject	(api_ref/x509)
    Test: Test	(dev_ref/test_framework)
      run: virtual std::vector<Test::Result> run() = 0	(dev_ref/test_framework)
      read_data_file: static std::string read_data_file(const std::string &path)	(dev_ref/test_framework)
        path: const std::string &path	(dev_ref/test_framework)
      read_binary_data_file: static std::vector<uint8_t> read_binary_data_file(const std::string &path)	(dev_ref/test_framework)
        path: const std::string &path	(dev_ref/test_framework)
      data_file: static std::string data_file(const std::string &what)	(dev_ref/test_framework)
        what: const std::string &what	(dev_ref/test_framework)
      run_long_tests: static bool run_long_tests() const	(dev_ref/test_framework)
      rng: static Botan::RandomNumberGenerator &rng()	(dev_ref/test_framework)
      Result: Test::Result	(dev_ref/test_framework)
        Test
          Result: Test::Result(const std::string &who)	(dev_ref/test_framework)
            who: const std::string &who	(dev_ref/test_framework)
        test_success: bool test_success()	(dev_ref/test_framework)
        test_success: bool test_success(const std::string &note)	(dev_ref/test_framework)
          note: const std::string &note	(dev_ref/test_framework)
        test_failure: bool test_failure(const std::string &err)	(dev_ref/test_framework)
          err: const std::string &err	(dev_ref/test_framework)
        test_failure: bool test_failure(const std::string &what, const std::string &error)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          error: const std::string &error	(dev_ref/test_framework)
        test_failure: void test_failure(const std::string &what, const uint8_t buf[], size_t buf_len)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          buf: const uint8_t buf[]	(dev_ref/test_framework)
          buf_len: size_t buf_len	(dev_ref/test_framework)
        test_eq: bool test_eq(const std::string &what, const std::string &produced, const std::string &expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const std::string &produced	(dev_ref/test_framework)
          expected: const std::string &expected	(dev_ref/test_framework)
        test_ne: bool test_ne(const std::string &what, const std::string &produced, const std::string &expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const std::string &produced	(dev_ref/test_framework)
          expected: const std::string &expected	(dev_ref/test_framework)
        test_eq: bool test_eq(const char *producer, const std::string &what, const uint8_t produced[], size_t produced_len, const uint8_t expected[], size_t expected_len)	(dev_ref/test_framework)
          producer: const char *producer	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const uint8_t produced[]	(dev_ref/test_framework)
          produced_len: size_t produced_len	(dev_ref/test_framework)
          expected: const uint8_t expected[]	(dev_ref/test_framework)
          expected_len: size_t expected_len	(dev_ref/test_framework)
        test_ne: bool test_ne(const char *producer, const std::string &what, const uint8_t produced[], size_t produced_len, const uint8_t expected[], size_t expected_len)	(dev_ref/test_framework)
          producer: const char *producer	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const uint8_t produced[]	(dev_ref/test_framework)
          produced_len: size_t produced_len	(dev_ref/test_framework)
          expected: const uint8_t expected[]	(dev_ref/test_framework)
          expected_len: size_t expected_len	(dev_ref/test_framework)
        test_eq: bool test_eq(const std::string &producer, const std::string &what, const std::vector<uint8_t> &produced, const std::vector<uint8_t> &expected)	(dev_ref/test_framework)
          producer: const std::string &producer	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const std::vector<uint8_t> &produced	(dev_ref/test_framework)
          expected: const std::vector<uint8_t> &expected	(dev_ref/test_framework)
        test_ne: bool test_ne(const std::string &producer, const std::string &what, const std::vector<uint8_t> &produced, const std::vector<uint8_t> &expected)	(dev_ref/test_framework)
          producer: const std::string &producer	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: const std::vector<uint8_t> &produced	(dev_ref/test_framework)
          expected: const std::vector<uint8_t> &expected	(dev_ref/test_framework)
        confirm: bool confirm(const std::string &what, bool expr)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          expr: bool expr	(dev_ref/test_framework)
        template<typename T> 
        test_not_null: template<typename T> bool test_not_null(const std::string &what, T *ptr)	(dev_ref/test_framework)
          T: typename T	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          ptr: T *ptr	(dev_ref/test_framework)
        test_lt: bool test_lt(const std::string &what, size_t produced, size_t expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: size_t produced	(dev_ref/test_framework)
          expected: size_t expected	(dev_ref/test_framework)
        test_lte: bool test_lte(const std::string &what, size_t produced, size_t expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: size_t produced	(dev_ref/test_framework)
          expected: size_t expected	(dev_ref/test_framework)
        test_gt: bool test_gt(const std::string &what, size_t produced, size_t expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: size_t produced	(dev_ref/test_framework)
          expected: size_t expected	(dev_ref/test_framework)
        test_gte: bool test_gte(const std::string &what, size_t produced, size_t expected)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          produced: size_t produced	(dev_ref/test_framework)
          expected: size_t expected	(dev_ref/test_framework)
        test_throws: bool test_throws(const std::string &what, std::function<void()> fn)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          fn: std::function<void()> fn	(dev_ref/test_framework)
        test_throws: bool test_throws(const std::string &what, const std::string &expected, std::function<void()> fn)	(dev_ref/test_framework)
          what: const std::string &what	(dev_ref/test_framework)
          expected: const std::string &expected	(dev_ref/test_framework)
          fn: std::function<void()> fn	(dev_ref/test_framework)
    VarMap: VarMap	(dev_ref/test_framework)
      get_req_bin: std::vector<uint8_t> get_req_bin(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_opt_bin: std::vector<uint8_t> get_opt_bin(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_req_bin_list: std::vector<std::vector<uint8_t>> get_req_bin_list(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_req_bn: Botan::BigInt get_req_bn(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_opt_bn: Botan::BigInt get_opt_bn(const std::string &key, const Botan::BigInt &def_value) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
        def_value: const Botan::BigInt &def_value	(dev_ref/test_framework)
      get_req_str: std::string get_req_str(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_opt_str: std::string get_opt_str(const std::string &key, const std::string &def_value) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
        def_value: const std::string &def_value	(dev_ref/test_framework)
      get_req_sz: size_t get_req_sz(const std::string &key) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
      get_opt_sz: size_t get_opt_sz(const std::string &key, const size_t def_value) const	(dev_ref/test_framework)
        key: const std::string &key	(dev_ref/test_framework)
        def_value: const size_t def_value	(dev_ref/test_framework)
    Text_Based_Test: Text_Based_Test : public Test	(dev_ref/test_framework)
      Text_Based_Test: Text_Based_Test(const std::string &input_file, const std::string &required_keys, const std::string &optional_keys = "")	(dev_ref/test_framework)
        input_file: const std::string &input_file	(dev_ref/test_framework)
        required_keys: const std::string &required_keys	(dev_ref/test_framework)
        optional_keys: const std::string &optional_keys = ""	(dev_ref/test_framework)
      run_one_test: Test::Result run_one_test(const std::string &header, const VarMap &vars)	(dev_ref/test_framework)
        header: const std::string &header	(dev_ref/test_framework)
        vars: const VarMap &vars	(dev_ref/test_framework)
      clear_between_callbacks: bool clear_between_callbacks() const	(dev_ref/test_framework)
    BigInt: BigInt	(api_ref/bigint)
      BigInt: BigInt()	(api_ref/bigint)
      BigInt: BigInt(uint64_t n)	(api_ref/bigint)
        n: uint64_t n	(api_ref/bigint)
      BigInt: BigInt(const std::string &str)	(api_ref/bigint)
        str: const std::string &str	(api_ref/bigint)
      BigInt: BigInt(const uint8_t buf[], size_t length)	(api_ref/bigint)
        buf: const uint8_t buf[]	(api_ref/bigint)
        length: size_t length	(api_ref/bigint)
      BigInt: BigInt(RandomNumberGenerator &rng, size_t bits, bool set_high_bit = true)	(api_ref/bigint)
        rng: RandomNumberGenerator &rng	(api_ref/bigint)
        bits: size_t bits	(api_ref/bigint)
        set_high_bit: bool set_high_bit = true	(api_ref/bigint)
      operator+: BigInt operator+(const BigInt &x, const BigInt &y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator+: BigInt operator+(const BigInt &x, word y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator+: BigInt operator+(word x, const BigInt &y)	(api_ref/bigint)
        x: word x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator-: BigInt operator-(const BigInt &x, const BigInt &y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator-: BigInt operator-(const BigInt &x, word y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator*: BigInt operator*(const BigInt &x, const BigInt &y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator/: BigInt operator/(const BigInt &x, const BigInt &y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator%: BigInt operator%(const BigInt &x, const BigInt &y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator%: word operator%(const BigInt &x, word y)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator<<: word operator<<(const BigInt &x, size_t n)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        n: size_t n	(api_ref/bigint)
      operator>>: word operator>>(const BigInt &x, size_t n)	(api_ref/bigint)
        x: const BigInt &x	(api_ref/bigint)
        n: size_t n	(api_ref/bigint)
      operator+=: BigInt &operator+=(const BigInt &y)	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator+=: BigInt &operator+=(word y)	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator-=: BigInt &operator-=(const BigInt &y)	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator-=: BigInt &operator-=(word y)	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator*=: BigInt &operator*=(const BigInt &y)	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator*=: BigInt &operator*=(word y)	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator/=: BigInt &operator/=(const BigInt &y)	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator%=: BigInt &operator%=(const BigInt &y)	(api_ref/bigint)
        y: const BigInt &y	(api_ref/bigint)
      operator%=: word operator%=(word y)	(api_ref/bigint)
        y: word y	(api_ref/bigint)
      operator<<=: word operator<<=(size_t shift)	(api_ref/bigint)
        shift: size_t shift	(api_ref/bigint)
      operator>>=: word operator>>=(size_t shift)	(api_ref/bigint)
        shift: size_t shift	(api_ref/bigint)
      operator++: BigInt &operator++()	(api_ref/bigint)
      operator--: BigInt &operator--()	(api_ref/bigint)
      operator++: BigInt operator++(int)	(api_ref/bigint)
      operator--: BigInt operator--(int)	(api_ref/bigint)
      operator-: BigInt operator-() const	(api_ref/bigint)
      operator!: bool operator!() const	(api_ref/bigint)
      clear: void clear()	(api_ref/bigint)
      bytes: size_t bytes() const	(api_ref/bigint)
      bits: size_t bits() const	(api_ref/bigint)
      is_even: bool is_even() const	(api_ref/bigint)
      is_odd: bool is_odd() const	(api_ref/bigint)
      is_nonzero: bool is_nonzero() const	(api_ref/bigint)
      is_zero: bool is_zero() const	(api_ref/bigint)
      set_bit: void set_bit(size_t n)	(api_ref/bigint)
        n: size_t n	(api_ref/bigint)
      clear_bit: void clear_bit(size_t n)	(api_ref/bigint)
        n: size_t n	(api_ref/bigint)
      get_bit: bool get_bit(size_t n) const	(api_ref/bigint)
        n: size_t n	(api_ref/bigint)
      to_u32bit: uint32_t to_u32bit() const	(api_ref/bigint)
      is_negative: bool is_negative() const	(api_ref/bigint)
      is_positive: bool is_positive() const	(api_ref/bigint)
      abs: BigInt abs() const	(api_ref/bigint)
      binary_encode: void binary_encode(uint8_t buf[]) const	(api_ref/bigint)
        buf: uint8_t buf[]	(api_ref/bigint)
      binary_encode: void binary_encode(uint8_t buf[], size_t len) const	(api_ref/bigint)
        buf: uint8_t buf[]	(api_ref/bigint)
        len: size_t len	(api_ref/bigint)
      binary_decode: void binary_decode(uint8_t buf[])	(api_ref/bigint)
        buf: uint8_t buf[]	(api_ref/bigint)
      to_dec_string: std::string to_dec_string() const	(api_ref/bigint)
      to_hex_string: std::string to_hex_string() const	(api_ref/bigint)
    gcd: BigInt gcd(BigInt x, BigInt y)	(api_ref/bigint)
      x: BigInt x	(api_ref/bigint)
      y: BigInt y	(api_ref/bigint)
    lcm: BigInt lcm(BigInt x, BigInt y)	(api_ref/bigint)
      x: BigInt x	(api_ref/bigint)
      y: BigInt y	(api_ref/bigint)
    jacobi: BigInt jacobi(BigInt a, BigInt n)	(api_ref/bigint)
      a: BigInt a	(api_ref/bigint)
      n: BigInt n	(api_ref/bigint)
    inverse_mod: BigInt inverse_mod(BigInt x, BigInt m)	(api_ref/bigint)
      x: BigInt x	(api_ref/bigint)
      m: BigInt m	(api_ref/bigint)
    power_mod: BigInt power_mod(BigInt b, BigInt x, BigInt m)	(api_ref/bigint)
      b: BigInt b	(api_ref/bigint)
      x: BigInt x	(api_ref/bigint)
      m: BigInt m	(api_ref/bigint)
    ressol: BigInt ressol(BigInt x, BigInt p)	(api_ref/bigint)
      x: BigInt x	(api_ref/bigint)
      p: BigInt p	(api_ref/bigint)
    is_prime: bool is_prime(BigInt n, RandomNumberGenerator &rng, size_t prob = 56, double is_random = false)	(api_ref/bigint)
      n: BigInt n	(api_ref/bigint)
      rng: RandomNumberGenerator &rng	(api_ref/bigint)
      prob: size_t prob = 56	(api_ref/bigint)
      is_random: double is_random = false	(api_ref/bigint)
    random_prime: BigInt random_prime(RandomNumberGenerator &rng, size_t bits, BigInt coprime = 1, size_t equiv = 1, size_t equiv_mod = 2)	(api_ref/bigint)
      rng: RandomNumberGenerator &rng	(api_ref/bigint)
      bits: size_t bits	(api_ref/bigint)
      coprime: BigInt coprime = 1	(api_ref/bigint)
      equiv: size_t equiv = 1	(api_ref/bigint)
      equiv_mod: size_t equiv_mod = 2	(api_ref/bigint)
    BlockCipher: BlockCipher	(api_ref/block_cipher)
      create: static std::unique_ptr<BlockCipher> create(const std::string &algo_spec, const std::string &provider = "")	(api_ref/block_cipher)
        algo_spec: const std::string &algo_spec	(api_ref/block_cipher)
        provider: const std::string &provider = ""	(api_ref/block_cipher)
      create_or_throw: static std::unique_ptr<BlockCipher> create_or_throw(const std::string &algo_spec, const std::string &provider = "")	(api_ref/block_cipher)
        algo_spec: const std::string &algo_spec	(api_ref/block_cipher)
        provider: const std::string &provider = ""	(api_ref/block_cipher)
      set_key: void set_key(const uint8_t *key, size_t length)	(api_ref/block_cipher)
        key: const uint8_t *key	(api_ref/block_cipher)
        length: size_t length	(api_ref/block_cipher)
      valid_keylength: bool valid_keylength(size_t length) const	(api_ref/block_cipher)
        length: size_t length	(api_ref/block_cipher)
      minimum_keylength: size_t minimum_keylength() const	(api_ref/block_cipher)
      maximum_keylength: size_t maximum_keylength() const	(api_ref/block_cipher)
      name: std::string name() const	(api_ref/block_cipher)
      clear: void clear()	(api_ref/block_cipher)
      clone: BlockCipher *clone() const	(api_ref/block_cipher)
      block_size: size_t block_size() const	(api_ref/block_cipher)
      parallelism: size_t parallelism() const	(api_ref/block_cipher)
      parallel_bytes: size_t parallel_bytes() const	(api_ref/block_cipher)
      provider: std::string provider() const	(api_ref/block_cipher)
      encrypt_n: void encrypt_n(const uint8_t in[], uint8_t out[], size_t blocks) const	(api_ref/block_cipher)
        in: const uint8_t in[]	(api_ref/block_cipher)
        out: uint8_t out[]	(api_ref/block_cipher)
        blocks: size_t blocks	(api_ref/block_cipher)
      decrypt_n: void decrypt_n(const uint8_t in[], uint8_t out[], size_t blocks) const	(api_ref/block_cipher)
        in: const uint8_t in[]	(api_ref/block_cipher)
        out: uint8_t out[]	(api_ref/block_cipher)
        blocks: size_t blocks	(api_ref/block_cipher)
      encrypt: void encrypt(const uint8_t in[], uint8_t out[]) const	(api_ref/block_cipher)
        in: const uint8_t in[]	(api_ref/block_cipher)
        out: uint8_t out[]	(api_ref/block_cipher)
      encrypt: void encrypt(uint8_t block[]) const	(api_ref/block_cipher)
        block: uint8_t block[]	(api_ref/block_cipher)
      decrypt: void decrypt(const uint8_t in[], uint8_t out[]) const	(api_ref/block_cipher)
        in: const uint8_t in[]	(api_ref/block_cipher)
        out: uint8_t out[]	(api_ref/block_cipher)
      decrypt: void decrypt(uint8_t block[]) const	(api_ref/block_cipher)
        block: uint8_t block[]	(api_ref/block_cipher)
      template<typename Alloc> 
      encrypt: template<typename Alloc> void encrypt(std::vector<uint8_t, Alloc> &block) const	(api_ref/block_cipher)
        Alloc: typename Alloc	(api_ref/block_cipher)
        block: std::vector<uint8_t, Alloc> &block	(api_ref/block_cipher)
      template<typename Alloc> 
      decrypt: template<typename Alloc> void decrypt(std::vector<uint8_t, Alloc> &block) const	(api_ref/block_cipher)
        Alloc: typename Alloc	(api_ref/block_cipher)
        block: std::vector<uint8_t, Alloc> &block	(api_ref/block_cipher)
    Cipher_Mode: Cipher_Mode	(api_ref/cipher_modes)
      set_key: void set_key(const uint8_t *key, size_t length)	(api_ref/cipher_modes)
        key: const uint8_t *key	(api_ref/cipher_modes)
        length: size_t length	(api_ref/cipher_modes)
      valid_keylength: bool valid_keylength(size_t length) const	(api_ref/cipher_modes)
        length: size_t length	(api_ref/cipher_modes)
      minimum_keylength: size_t minimum_keylength() const	(api_ref/cipher_modes)
      maximum_keylength: size_t maximum_keylength() const	(api_ref/cipher_modes)
      default_nonce_length: size_t default_nonce_length() const	(api_ref/cipher_modes)
      valid_nonce_length: bool valid_nonce_length(size_t nonce_len) const	(api_ref/cipher_modes)
        nonce_len: size_t nonce_len	(api_ref/cipher_modes)
      authenticated: bool authenticated() const	(api_ref/cipher_modes)
      tag_size: size_t tag_size() const	(api_ref/cipher_modes)
      clear: void clear()	(api_ref/cipher_modes)
      reset: void reset()	(api_ref/cipher_modes)
      start_msg: void start_msg(const uint8_t *nonce, size_t nonce_len)	(api_ref/cipher_modes)
        nonce: const uint8_t *nonce	(api_ref/cipher_modes)
        nonce_len: size_t nonce_len	(api_ref/cipher_modes)
      start: void start(const std::vector<uint8_t> nonce)	(api_ref/cipher_modes)
        nonce: const std::vector<uint8_t> nonce	(api_ref/cipher_modes)
      start: void start(const uint8_t *nonce, size_t nonce_len)	(api_ref/cipher_modes)
        nonce: const uint8_t *nonce	(api_ref/cipher_modes)
        nonce_len: size_t nonce_len	(api_ref/cipher_modes)
      update_granularity: virtual size_t update_granularity() const	(api_ref/cipher_modes)
      process: virtual size_t process(uint8_t *msg, size_t msg_len)	(api_ref/cipher_modes)
        msg: uint8_t *msg	(api_ref/cipher_modes)
        msg_len: size_t msg_len	(api_ref/cipher_modes)
      update: void update(secure_vector<uint8_t> &buffer, size_t offset = 0)	(api_ref/cipher_modes)
        buffer: secure_vector<uint8_t> &buffer	(api_ref/cipher_modes)
        offset: size_t offset = 0	(api_ref/cipher_modes)
      minimum_final_size: size_t minimum_final_size() const	(api_ref/cipher_modes)
      finish: void finish(secure_vector<uint8_t> &final_block, size_t offset = 0)	(api_ref/cipher_modes)
        final_block: secure_vector<uint8_t> &final_block	(api_ref/cipher_modes)
        offset: size_t offset = 0	(api_ref/cipher_modes)
    AEAD_Mode: AEAD_Mode	(api_ref/cipher_modes)
      set_key: void set_key(const SymmetricKey &key)	(api_ref/cipher_modes)
        key: const SymmetricKey &key	(api_ref/cipher_modes)
      key_spec: Key_Length_Specification key_spec() const	(api_ref/cipher_modes)
      set_associated_data: void set_associated_data(const uint8_t ad[], size_t ad_len)	(api_ref/cipher_modes)
        ad: const uint8_t ad[]	(api_ref/cipher_modes)
        ad_len: size_t ad_len	(api_ref/cipher_modes)
      start: void start(const uint8_t nonce[], size_t nonce_len)	(api_ref/cipher_modes)
        nonce: const uint8_t nonce[]	(api_ref/cipher_modes)
        nonce_len: size_t nonce_len	(api_ref/cipher_modes)
      update: void update(secure_vector<uint8_t> &buffer, size_t offset = 0)	(api_ref/cipher_modes)
        buffer: secure_vector<uint8_t> &buffer	(api_ref/cipher_modes)
        offset: size_t offset = 0	(api_ref/cipher_modes)
      finish: void finish(secure_vector<uint8_t> &buffer, size_t offset = 0)	(api_ref/cipher_modes)
        buffer: secure_vector<uint8_t> &buffer	(api_ref/cipher_modes)
        offset: size_t offset = 0	(api_ref/cipher_modes)
      update_granularity: size_t update_granularity() const	(api_ref/cipher_modes)
      final_minimum_size: size_t final_minimum_size() const	(api_ref/cipher_modes)
      valid_nonce_length: bool valid_nonce_length(size_t nonce_len) const	(api_ref/cipher_modes)
        nonce_len: size_t nonce_len	(api_ref/cipher_modes)
      default_nonce_length: size_t default_nonce_length() const	(api_ref/cipher_modes)
    Compression_Algorithm: Compression_Algorithm	(api_ref/compression)
      start: void start(size_t level)	(api_ref/compression)
        level: size_t level	(api_ref/compression)
      update: void update(secure_vector<uint8_t> &buf, size_t offset = 0, bool flush = false)	(api_ref/compression)
        buf: secure_vector<uint8_t> &buf	(api_ref/compression)
        offset: size_t offset = 0	(api_ref/compression)
        flush: bool flush = false	(api_ref/compression)
    Decompression_Algorithm: Decompression_Algorithm	(api_ref/compression)
      start: void start()	(api_ref/compression)
      update: void update(secure_vector<uint8_t> &buf, size_t offset = 0)	(api_ref/compression)
        buf: secure_vector<uint8_t> &buf	(api_ref/compression)
        offset: size_t offset = 0	(api_ref/compression)
    make_compressor: Compression_Algorithm *make_compressor(std::string type)	(api_ref/compression)
      type: std::string type	(api_ref/compression)
    make_decompressor: Decompression_Algorithm *make_decompressor(std::string type)	(api_ref/compression)
      type: std::string type	(api_ref/compression)
    Credentials_Manager: Credentials_Manager	(api_ref/credentials_manager)
      trusted_certificate_authorities: std::vector<Certificate_Store*> trusted_certificate_authorities(const std::string &type, const std::string &context)	(api_ref/credentials_manager)
        type: const std::string &type	(api_ref/credentials_manager)
        context: const std::string &context	(api_ref/credentials_manager)
      find_cert_chain: std::vector<X509_Certificate> find_cert_chain(const std::vector<std::string> &cert_key_types, const std::vector<X509_DN> &acceptable_CAs, const std::string &type, const std::string &context)	(api_ref/credentials_manager)
        cert_key_types: const std::vector<std::string> &cert_key_types	(api_ref/credentials_manager)
        acceptable_CAs: const std::vector<X509_DN> &acceptable_CAs	(api_ref/credentials_manager)
        type: const std::string &type	(api_ref/credentials_manager)
        context: const std::string &context	(api_ref/credentials_manager)
      cert_chain: std::vector<X509_Certificate> cert_chain(const std::vector<std::string> &cert_key_types, const std::string &type, const std::string &context)	(api_ref/credentials_manager)
        cert_key_types: const std::vector<std::string> &cert_key_types	(api_ref/credentials_manager)
        type: const std::string &type	(api_ref/credentials_manager)
        context: const std::string &context	(api_ref/credentials_manager)
      cert_chain_single_type: std::vector<X509_Certificate> cert_chain_single_type(const std::string &cert_key_type, const std::string &type, const std::string &context)	(api_ref/credentials_manager)
        cert_key_type: const std::string &cert_key_type	(api_ref/credentials_manager)
        type: const std::string &type	(api_ref/credentials_manager)
        context: const std::string &context	(api_ref/credentials_manager)
      private_key_for: Private_Key *private_key_for(const X509_Certificate &cert, const std::string &type, const std::string &context)	(api_ref/credentials_manager)
        cert: const X509_Certificate &cert	(api_ref/credentials_manager)
        type: const std::string &type	(api_ref/credentials_manager)
        context: const std::string &context	(api_ref/credentials_manager)
    attempt_srp: bool attempt_srp(const std::string &type, const std::string &context)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
    srp_identifier: std::string srp_identifier(const std::string &type, const std::string &context)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
    srp_password: std::string srp_password(const std::string &type, const std::string &context, const std::string &identifier)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
      identifier: const std::string &identifier	(api_ref/credentials_manager)
    srp_verifier: bool srp_verifier(const std::string &type, const std::string &context, const std::string &identifier, std::string &group_name, BigInt &verifier, std::vector<uint8_t> &salt, bool generate_fake_on_unknown)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
      identifier: const std::string &identifier	(api_ref/credentials_manager)
      group_name: std::string &group_name	(api_ref/credentials_manager)
      verifier: BigInt &verifier	(api_ref/credentials_manager)
      salt: std::vector<uint8_t> &salt	(api_ref/credentials_manager)
      generate_fake_on_unknown: bool generate_fake_on_unknown	(api_ref/credentials_manager)
    psk: SymmetricKey psk(const std::string &type, const std::string &context, const std::string &identity)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
      identity: const std::string &identity	(api_ref/credentials_manager)
    psk_identity_hint: std::string psk_identity_hint(const std::string &type, const std::string &context)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
    psk_identity: std::string psk_identity(const std::string &type, const std::string &context, const std::string &identity_hint)	(api_ref/credentials_manager)
      type: const std::string &type	(api_ref/credentials_manager)
      context: const std::string &context	(api_ref/credentials_manager)
      identity_hint: const std::string &identity_hint	(api_ref/credentials_manager)
    encrypt: std::string encrypt(const uint8_t input[], size_t input_len, const std::string &passphrase, RandomNumberGenerator &rng)	(api_ref/cryptobox)
      input: const uint8_t input[]	(api_ref/cryptobox)
      input_len: size_t input_len	(api_ref/cryptobox)
      passphrase: const std::string &passphrase	(api_ref/cryptobox)
      rng: RandomNumberGenerator &rng	(api_ref/cryptobox)
    decrypt: std::string decrypt(const uint8_t input[], size_t input_len, const std::string &passphrase)	(api_ref/cryptobox)
      input: const uint8_t input[]	(api_ref/cryptobox)
      input_len: size_t input_len	(api_ref/cryptobox)
      passphrase: const std::string &passphrase	(api_ref/cryptobox)
    EC_Group: EC_Group	(api_ref/ecc)
      EC_Group: EC_Group(const OID &oid)	(api_ref/ecc)
        oid: const OID &oid	(api_ref/ecc)
      EC_Group: EC_Group(const std::string &name)	(api_ref/ecc)
        name: const std::string &name	(api_ref/ecc)
      EC_Group: EC_Group(const BigInt &p, const BigInt &a, const BigInt &b, const BigInt &base_x, const BigInt &base_y, const BigInt &order, const BigInt &cofactor, const OID &oid = OID())	(api_ref/ecc)
        p: const BigInt &p	(api_ref/ecc)
        a: const BigInt &a	(api_ref/ecc)
        b: const BigInt &b	(api_ref/ecc)
        base_x: const BigInt &base_x	(api_ref/ecc)
        base_y: const BigInt &base_y	(api_ref/ecc)
        order: const BigInt &order	(api_ref/ecc)
        cofactor: const BigInt &cofactor	(api_ref/ecc)
        oid: const OID &oid = OID()	(api_ref/ecc)
      EC_Group: EC_Group(const std::vector<uint8_t> &ber_encoding)	(api_ref/ecc)
        ber_encoding: const std::vector<uint8_t> &ber_encoding	(api_ref/ecc)
      DER_encode: std::vector<uint8_t> DER_encode(EC_Group_Encoding form) const	(api_ref/ecc)
        form: EC_Group_Encoding form	(api_ref/ecc)
      PEM_encode: std::string PEM_encode() const	(api_ref/ecc)
      a_is_minus_3: bool a_is_minus_3() const	(api_ref/ecc)
      a_is_zero: bool a_is_zero() const	(api_ref/ecc)
      get_p_bits: size_t get_p_bits() const	(api_ref/ecc)
      get_p_bytes: size_t get_p_bytes() const	(api_ref/ecc)
      get_order_bits: size_t get_order_bits() const	(api_ref/ecc)
      get_order_bytes: size_t get_order_bytes() const	(api_ref/ecc)
      get_p: const BigInt &get_p() const	(api_ref/ecc)
      get_a: const BigInt &get_a() const	(api_ref/ecc)
      get_b: const BigInt &get_b() const	(api_ref/ecc)
      get_base_point: const PointGFp &get_base_point() const	(api_ref/ecc)
      get_g_x: const BigInt &get_g_x() const	(api_ref/ecc)
      get_g_y: const BigInt &get_g_y() const	(api_ref/ecc)
      get_order: const BigInt &get_order() const	(api_ref/ecc)
      get_cofactor: const BigInt &get_cofactor() const	(api_ref/ecc)
      mod_order: BigInt mod_order(const BigInt &x) const	(api_ref/ecc)
        x: const BigInt &x	(api_ref/ecc)
      inverse_mod_order: BigInt inverse_mod_order(const BigInt &x) const	(api_ref/ecc)
        x: const BigInt &x	(api_ref/ecc)
      multiply_mod_order: BigInt multiply_mod_order(const BigInt &x, const BigInt &y) const	(api_ref/ecc)
        x: const BigInt &x	(api_ref/ecc)
        y: const BigInt &y	(api_ref/ecc)
      verify_public_element: bool verify_public_element(const PointGFp &y) const	(api_ref/ecc)
        y: const PointGFp &y	(api_ref/ecc)
      get_curve_oid: const OID &get_curve_oid() const	(api_ref/ecc)
      point: PointGFp point(const BigInt &x, const BigInt &y) const	(api_ref/ecc)
        x: const BigInt &x	(api_ref/ecc)
        y: const BigInt &y	(api_ref/ecc)
      point_multiply: PointGFp point_multiply(const BigInt &x, const PointGFp &pt, const BigInt &y) const	(api_ref/ecc)
        x: const BigInt &x	(api_ref/ecc)
        pt: const PointGFp &pt	(api_ref/ecc)
        y: const BigInt &y	(api_ref/ecc)
      blinded_base_point_multiply: PointGFp blinded_base_point_multiply(const BigInt &k, RandomNumberGenerator &rng, std::vector<BigInt> &ws) const	(api_ref/ecc)
        k: const BigInt &k	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
        ws: std::vector<BigInt> &ws	(api_ref/ecc)
      blinded_base_point_multiply_x: BigInt blinded_base_point_multiply_x(const BigInt &k, RandomNumberGenerator &rng, std::vector<BigInt> &ws) const	(api_ref/ecc)
        k: const BigInt &k	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
        ws: std::vector<BigInt> &ws	(api_ref/ecc)
      blinded_var_point_multiply: PointGFp blinded_var_point_multiply(const PointGFp &point, const BigInt &k, RandomNumberGenerator &rng, std::vector<BigInt> &ws) const	(api_ref/ecc)
        point: const PointGFp &point	(api_ref/ecc)
        k: const BigInt &k	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
        ws: std::vector<BigInt> &ws	(api_ref/ecc)
      random_scalar: BigInt random_scalar(RandomNumberGenerator &rng) const	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
      zero_point: PointGFp zero_point() const	(api_ref/ecc)
      OS2ECP: PointGFp OS2ECP(const uint8_t bits[], size_t len) const	(api_ref/ecc)
        bits: const uint8_t bits[]	(api_ref/ecc)
        len: size_t len	(api_ref/ecc)
      verify_group: bool verify_group(RandomNumberGenerator &rng, bool strong = false) const	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
        strong: bool strong = false	(api_ref/ecc)
      known_named_groups: static const std::set<std::string> &known_named_groups()	(api_ref/ecc)
    PointGFp: PointGFp	(api_ref/ecc)
      encode: std::vector<uint8_t> encode(PointGFp::Compression_Type format) const	(api_ref/ecc)
        format: PointGFp::Compression_Type format	(api_ref/ecc)
      operator+=: PointGFp &operator+=(const PointGFp &rhs)	(api_ref/ecc)
        rhs: const PointGFp &rhs	(api_ref/ecc)
      operator-=: PointGFp &operator-=(const PointGFp &rhs)	(api_ref/ecc)
        rhs: const PointGFp &rhs	(api_ref/ecc)
      operator*=: PointGFp &operator*=(const BigInt &scalar)	(api_ref/ecc)
        scalar: const BigInt &scalar	(api_ref/ecc)
      negate: PointGFp &negate()	(api_ref/ecc)
      get_affine_x: BigInt get_affine_x() const	(api_ref/ecc)
      get_affine_y: BigInt get_affine_y() const	(api_ref/ecc)
      force_affine: void force_affine()	(api_ref/ecc)
      force_all_affine: static void force_all_affine(std::vector<PointGFp> &points, secure_vector<word> &ws)	(api_ref/ecc)
        points: std::vector<PointGFp> &points	(api_ref/ecc)
        ws: secure_vector<word> &ws	(api_ref/ecc)
      is_affine: bool is_affine() const	(api_ref/ecc)
      is_zero: bool is_zero() const	(api_ref/ecc)
      on_the_curve: bool on_the_curve() const	(api_ref/ecc)
      randomize_repr: void randomize_repr(RandomNumberGenerator &rng)	(api_ref/ecc)
        rng: RandomNumberGenerator &rng	(api_ref/ecc)
      operator==: bool operator==(const PointGFp &other) const	(api_ref/ecc)
        other: const PointGFp &other	(api_ref/ecc)
      add: void add(const PointGFp &other, std::vector<BigInt> &workspace)	(api_ref/ecc)
        other: const PointGFp &other	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      add_affine: void add_affine(const PointGFp &other, std::vector<BigInt> &workspace)	(api_ref/ecc)
        other: const PointGFp &other	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      mult2: void mult2(std::vector<BigInt> &workspace)	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      mult2i: void mult2i(size_t i, std::vector<BigInt> &workspace)	(api_ref/ecc)
        i: size_t i	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      plus: PointGFp plus(const PointGFp &other, std::vector<BigInt> &workspace) const	(api_ref/ecc)
        other: const PointGFp &other	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      double_of: PointGFp double_of(std::vector<BigInt> &workspace) const	(api_ref/ecc)
        workspace: std::vector<BigInt> &workspace	(api_ref/ecc)
      zero: PointGFp zero() const	(api_ref/ecc)
    BOTAN_FFI_SUCCESS: BOTAN_FFI_SUCCESS = 0	(api_ref/ffi)
    BOTAN_FFI_INVALID_VERIFIER: BOTAN_FFI_INVALID_VERIFIER = 1	(api_ref/ffi)
    BOTAN_FFI_ERROR_INVALID_INPUT: BOTAN_FFI_ERROR_INVALID_INPUT = -1	(api_ref/ffi)
    BOTAN_FFI_ERROR_BAD_MAC: BOTAN_FFI_ERROR_BAD_MAC = -2	(api_ref/ffi)
    BOTAN_FFI_ERROR_INSUFFICIENT_BUFFER_SPACE: BOTAN_FFI_ERROR_INSUFFICIENT_BUFFER_SPACE = -10	(api_ref/ffi)
    BOTAN_FFI_ERROR_EXCEPTION_THROWN: BOTAN_FFI_ERROR_EXCEPTION_THROWN = -20	(api_ref/ffi)
    BOTAN_FFI_ERROR_OUT_OF_MEMORY: BOTAN_FFI_ERROR_OUT_OF_MEMORY = -21	(api_ref/ffi)
    BOTAN_FFI_ERROR_BAD_FLAG: BOTAN_FFI_ERROR_BAD_FLAG = -30	(api_ref/ffi)
    BOTAN_FFI_ERROR_NULL_POINTER: BOTAN_FFI_ERROR_NULL_POINTER = -31	(api_ref/ffi)
    BOTAN_FFI_ERROR_BAD_PARAMETER: BOTAN_FFI_ERROR_BAD_PARAMETER = -32	(api_ref/ffi)
    BOTAN_FFI_ERROR_KEY_NOT_SET: BOTAN_FFI_ERROR_KEY_NOT_SET = -33	(api_ref/ffi)
    BOTAN_FFI_ERROR_INVALID_KEY_LENGTH: BOTAN_FFI_ERROR_INVALID_KEY_LENGTH = -34	(api_ref/ffi)
    BOTAN_FFI_ERROR_NOT_IMPLEMENTED: BOTAN_FFI_ERROR_NOT_IMPLEMENTED = -40	(api_ref/ffi)
    BOTAN_FFI_ERROR_INVALID_OBJECT: BOTAN_FFI_ERROR_INVALID_OBJECT = -50	(api_ref/ffi)
    BOTAN_FFI_ERROR_UNKNOWN_ERROR: BOTAN_FFI_ERROR_UNKNOWN_ERROR = -100	(api_ref/ffi)
    botan_ffi_api_version: uint32_t botan_ffi_api_version()	(api_ref/ffi)
    botan_ffi_supports_api: int botan_ffi_supports_api(uint32_t version)	(api_ref/ffi)
      version: uint32_t version	(api_ref/ffi)
    botan_version_string: const char *botan_version_string()	(api_ref/ffi)
    botan_version_major: uint32_t botan_version_major()	(api_ref/ffi)
    botan_version_minor: uint32_t botan_version_minor()	(api_ref/ffi)
    botan_version_patch: uint32_t botan_version_patch()	(api_ref/ffi)
    botan_version_datestamp: uint32_t botan_version_datestamp()	(api_ref/ffi)
    botan_same_mem: int botan_same_mem(const uint8_t *x, const uint8_t *y, size_t len)	(api_ref/ffi)
      x: const uint8_t *x	(api_ref/ffi)
      y: const uint8_t *y	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
    botan_hex_encode: int botan_hex_encode(const uint8_t *x, size_t len, char *out, uint32_t flags)	(api_ref/ffi)
      x: const uint8_t *x	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
      out: char *out	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_hex_decode: int botan_hex_decode(const char *hex_str, size_t in_len, uint8_t *out, size_t *out_len)	(api_ref/ffi)
      hex_str: const char *hex_str	(api_ref/ffi)
      in_len: size_t in_len	(api_ref/ffi)
      out: uint8_t *out	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_rng_t: opaque *botan_rng_t	(api_ref/ffi)
    botan_rng_init: int botan_rng_init(botan_rng_t *rng, const char *rng_type)	(api_ref/ffi)
      rng: botan_rng_t *rng	(api_ref/ffi)
      rng_type: const char *rng_type	(api_ref/ffi)
    botan_rng_get: int botan_rng_get(botan_rng_t rng, uint8_t *out, size_t out_len)	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      out: uint8_t *out	(api_ref/ffi)
      out_len: size_t out_len	(api_ref/ffi)
    botan_rng_reseed: int botan_rng_reseed(botan_rng_t rng, size_t bits)	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      bits: size_t bits	(api_ref/ffi)
    botan_rng_reseed_from_rng: int botan_rng_reseed_from_rng(botan_rng_t rng, botan_rng_t src, size_t bits)	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      src: botan_rng_t src	(api_ref/ffi)
      bits: size_t bits	(api_ref/ffi)
    botan_rng_add_entropy: int botan_rng_add_entropy(botan_rng_t rng, const uint8_t seed[], size_t len)	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      seed: const uint8_t seed[]	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
    botan_rng_destroy: int botan_rng_destroy(botan_rng_t rng)	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
    botan_block_cipher_t: opaque *botan_block_cipher_t	(api_ref/ffi)
    botan_block_cipher_init: int botan_block_cipher_init(botan_block_cipher_t *bc, const char *cipher_name)	(api_ref/ffi)
      bc: botan_block_cipher_t *bc	(api_ref/ffi)
      cipher_name: const char *cipher_name	(api_ref/ffi)
    botan_block_cipher_block_size: int botan_block_cipher_block_size(botan_block_cipher_t bc)	(api_ref/ffi)
      bc: botan_block_cipher_t bc	(api_ref/ffi)
    botan_block_cipher_name: int botan_block_cipher_name(botan_block_cipher_t cipher, char *name, size_t *name_len)	(api_ref/ffi)
      cipher: botan_block_cipher_t cipher	(api_ref/ffi)
      name: char *name	(api_ref/ffi)
      name_len: size_t *name_len	(api_ref/ffi)
    botan_block_cipher_get_keyspec: int botan_block_cipher_get_keyspec(botan_block_cipher_t cipher, size_t *out_minimum_keylength, size_t *out_maximum_keylength, size_t *out_keylength_modulo)	(api_ref/ffi)
      cipher: botan_block_cipher_t cipher	(api_ref/ffi)
      out_minimum_keylength: size_t *out_minimum_keylength	(api_ref/ffi)
      out_maximum_keylength: size_t *out_maximum_keylength	(api_ref/ffi)
      out_keylength_modulo: size_t *out_keylength_modulo	(api_ref/ffi)
    botan_block_cipher_clear: int botan_block_cipher_clear(botan_block_cipher_t bc)	(api_ref/ffi)
      bc: botan_block_cipher_t bc	(api_ref/ffi)
    botan_block_cipher_set_key: int botan_block_cipher_set_key(botan_block_cipher_t bc, const uint8_t key[], size_t key_len)	(api_ref/ffi)
      bc: botan_block_cipher_t bc	(api_ref/ffi)
      key: const uint8_t key[]	(api_ref/ffi)
      key_len: size_t key_len	(api_ref/ffi)
    botan_block_cipher_encrypt_blocks: int botan_block_cipher_encrypt_blocks(botan_block_cipher_t bc, const uint8_t in[], uint8_t out[], size_t blocks)	(api_ref/ffi)
      bc: botan_block_cipher_t bc	(api_ref/ffi)
      in: const uint8_t in[]	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      blocks: size_t blocks	(api_ref/ffi)
    botan_block_cipher_decrypt_blocks: int botan_block_cipher_decrypt_blocks(botan_block_cipher_t bc, const uint8_t in[], uint8_t out[], size_t blocks)	(api_ref/ffi)
      bc: botan_block_cipher_t bc	(api_ref/ffi)
      in: const uint8_t in[]	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      blocks: size_t blocks	(api_ref/ffi)
    botan_block_cipher_destroy: int botan_block_cipher_destroy(botan_block_cipher_t rng)	(api_ref/ffi)
      rng: botan_block_cipher_t rng	(api_ref/ffi)
    botan_hash_t: opaque *botan_hash_t	(api_ref/ffi)
    botan_hash_init: botan_hash_t botan_hash_init(const char *hash, uint32_t flags)	(api_ref/ffi)
      hash: const char *hash	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_hash_destroy: int botan_hash_destroy(botan_hash_t hash)	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
    botan_hash_name: int botan_hash_name(botan_hash_t hash, char *name, size_t *name_len)	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
      name: char *name	(api_ref/ffi)
      name_len: size_t *name_len	(api_ref/ffi)
    botan_hash_copy_state: int botan_hash_copy_state(botan_hash_t *dest, const botan_hash_t source)	(api_ref/ffi)
      dest: botan_hash_t *dest	(api_ref/ffi)
      source: const botan_hash_t source	(api_ref/ffi)
    botan_hash_clear: int botan_hash_clear(botan_hash_t hash)	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
    botan_hash_output_length: size_t botan_hash_output_length(botan_hash_t hash)	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
    botan_hash_update: int botan_hash_update(botan_hash_t hash, const uint8_t *input, size_t len)	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
      input: const uint8_t *input	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
    botan_hash_final: int botan_hash_final(botan_hash_t hash, uint8_t out[])	(api_ref/ffi)
      hash: botan_hash_t hash	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
    botan_mac_t: opaque *botan_mac_t	(api_ref/ffi)
    botan_mac_init: botan_mac_t botan_mac_init(const char *mac, uint32_t flags)	(api_ref/ffi)
      mac: const char *mac	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_mac_destroy: int botan_mac_destroy(botan_mac_t mac)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
    botan_mac_clear: int botan_mac_clear(botan_mac_t mac)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
    botan_mac_output_length: size_t botan_mac_output_length(botan_mac_t mac)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
    botan_mac_set_key: int botan_mac_set_key(botan_mac_t mac, const uint8_t *key, size_t key_len)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
      key: const uint8_t *key	(api_ref/ffi)
      key_len: size_t key_len	(api_ref/ffi)
    botan_mac_update: int botan_mac_update(botan_mac_t mac, uint8_t buf[], size_t len)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
      buf: uint8_t buf[]	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
    botan_mac_final: int botan_mac_final(botan_mac_t mac, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      mac: botan_mac_t mac	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_cipher_t: opaque *botan_cipher_t	(api_ref/ffi)
    botan_cipher_init: botan_cipher_t botan_cipher_init(const char *cipher_name, uint32_t flags)	(api_ref/ffi)
      cipher_name: const char *cipher_name	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_cipher_destroy: int botan_cipher_destroy(botan_cipher_t cipher)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
    botan_cipher_clear: int botan_cipher_clear(botan_cipher_t hash)	(api_ref/ffi)
      hash: botan_cipher_t hash	(api_ref/ffi)
    botan_cipher_set_key: int botan_cipher_set_key(botan_cipher_t cipher, const uint8_t *key, size_t key_len)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      key: const uint8_t *key	(api_ref/ffi)
      key_len: size_t key_len	(api_ref/ffi)
    botan_cipher_is_authenticated: int botan_cipher_is_authenticated(botan_cipher_t cipher)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
    botan_cipher_get_tag_length: size_t botan_cipher_get_tag_length(botan_cipher_t cipher, size_t *tag_len)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      tag_len: size_t *tag_len	(api_ref/ffi)
    botan_cipher_valid_nonce_length: int botan_cipher_valid_nonce_length(botan_cipher_t cipher, size_t nl)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      nl: size_t nl	(api_ref/ffi)
    botan_cipher_get_default_nonce_length: size_t botan_cipher_get_default_nonce_length(botan_cipher_t cipher, size_t *nl)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      nl: size_t *nl	(api_ref/ffi)
    botan_cipher_set_associated_data: int botan_cipher_set_associated_data(botan_cipher_t cipher, const uint8_t *ad, size_t ad_len)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      ad: const uint8_t *ad	(api_ref/ffi)
      ad_len: size_t ad_len	(api_ref/ffi)
    botan_cipher_start: int botan_cipher_start(botan_cipher_t cipher, const uint8_t *nonce, size_t nonce_len)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      nonce: const uint8_t *nonce	(api_ref/ffi)
      nonce_len: size_t nonce_len	(api_ref/ffi)
    botan_cipher_update: int botan_cipher_update(botan_cipher_t cipher, uint32_t flags, uint8_t output[], size_t output_size, size_t *output_written, const uint8_t input_bytes[], size_t input_size, size_t *input_consumed)	(api_ref/ffi)
      cipher: botan_cipher_t cipher	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
      output: uint8_t output[]	(api_ref/ffi)
      output_size: size_t output_size	(api_ref/ffi)
      output_written: size_t *output_written	(api_ref/ffi)
      input_bytes: const uint8_t input_bytes[]	(api_ref/ffi)
      input_size: size_t input_size	(api_ref/ffi)
      input_consumed: size_t *input_consumed	(api_ref/ffi)
    botan_pbkdf: int botan_pbkdf(const char *pbkdf_algo, uint8_t out[], size_t out_len, const char *passphrase, const uint8_t salt[], size_t salt_len, size_t iterations)	(api_ref/ffi)
      pbkdf_algo: const char *pbkdf_algo	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t out_len	(api_ref/ffi)
      passphrase: const char *passphrase	(api_ref/ffi)
      salt: const uint8_t salt[]	(api_ref/ffi)
      salt_len: size_t salt_len	(api_ref/ffi)
      iterations: size_t iterations	(api_ref/ffi)
    botan_pbkdf_timed: int botan_pbkdf_timed(const char *pbkdf_algo, uint8_t out[], size_t out_len, const char *passphrase, const uint8_t salt[], size_t salt_len, size_t milliseconds_to_run, size_t *out_iterations_used)	(api_ref/ffi)
      pbkdf_algo: const char *pbkdf_algo	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t out_len	(api_ref/ffi)
      passphrase: const char *passphrase	(api_ref/ffi)
      salt: const uint8_t salt[]	(api_ref/ffi)
      salt_len: size_t salt_len	(api_ref/ffi)
      milliseconds_to_run: size_t milliseconds_to_run	(api_ref/ffi)
      out_iterations_used: size_t *out_iterations_used	(api_ref/ffi)
    botan_kdf: int botan_kdf(const char *kdf_algo, uint8_t out[], size_t out_len, const uint8_t secret[], size_t secret_len, const uint8_t salt[], size_t salt_len, const uint8_t label[], size_t label_len)	(api_ref/ffi)
      kdf_algo: const char *kdf_algo	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t out_len	(api_ref/ffi)
      secret: const uint8_t secret[]	(api_ref/ffi)
      secret_len: size_t secret_len	(api_ref/ffi)
      salt: const uint8_t salt[]	(api_ref/ffi)
      salt_len: size_t salt_len	(api_ref/ffi)
      label: const uint8_t label[]	(api_ref/ffi)
      label_len: size_t label_len	(api_ref/ffi)
    botan_mp_t: opaque *botan_mp_t	(api_ref/ffi)
    botan_mp_init: int botan_mp_init(botan_mp_t *mp)	(api_ref/ffi)
      mp: botan_mp_t *mp	(api_ref/ffi)
    botan_mp_destroy: int botan_mp_destroy(botan_mp_t mp)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
    botan_mp_to_hex: int botan_mp_to_hex(botan_mp_t mp, char *out)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      out: char *out	(api_ref/ffi)
    botan_mp_to_str: int botan_mp_to_str(botan_mp_t mp, uint8_t base, char *out, size_t *out_len)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      base: uint8_t base	(api_ref/ffi)
      out: char *out	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_mp_set_from_int: int botan_mp_set_from_int(botan_mp_t mp, int initial_value)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      initial_value: int initial_value	(api_ref/ffi)
    botan_mp_set_from_mp: int botan_mp_set_from_mp(botan_mp_t dest, botan_mp_t source)	(api_ref/ffi)
      dest: botan_mp_t dest	(api_ref/ffi)
      source: botan_mp_t source	(api_ref/ffi)
    botan_mp_set_from_str: int botan_mp_set_from_str(botan_mp_t dest, const char *str)	(api_ref/ffi)
      dest: botan_mp_t dest	(api_ref/ffi)
      str: const char *str	(api_ref/ffi)
    botan_mp_num_bits: int botan_mp_num_bits(botan_mp_t n, size_t *bits)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      bits: size_t *bits	(api_ref/ffi)
    botan_mp_num_bytes: int botan_mp_num_bytes(botan_mp_t n, size_t *uint8_ts)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      uint8_ts: size_t *uint8_ts	(api_ref/ffi)
    botan_mp_to_bin: int botan_mp_to_bin(botan_mp_t mp, uint8_t vec[])	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      vec: uint8_t vec[]	(api_ref/ffi)
    botan_mp_from_bin: int botan_mp_from_bin(botan_mp_t mp, const uint8_t vec[], size_t vec_len)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      vec: const uint8_t vec[]	(api_ref/ffi)
      vec_len: size_t vec_len	(api_ref/ffi)
    botan_mp_is_negative: int botan_mp_is_negative(botan_mp_t mp)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
    botan_mp_flip_sign: int botan_mp_flip_sign(botan_mp_t mp)	(api_ref/ffi)
      mp: botan_mp_t mp	(api_ref/ffi)
    botan_mp_add: int botan_mp_add(botan_mp_t result, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      result: botan_mp_t result	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_sub: int botan_mp_sub(botan_mp_t result, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      result: botan_mp_t result	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_mul: int botan_mp_mul(botan_mp_t result, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      result: botan_mp_t result	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_div: int botan_mp_div(botan_mp_t quotient, botan_mp_t remainder, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      quotient: botan_mp_t quotient	(api_ref/ffi)
      remainder: botan_mp_t remainder	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_mod_mul: int botan_mp_mod_mul(botan_mp_t result, botan_mp_t x, botan_mp_t y, botan_mp_t mod)	(api_ref/ffi)
      result: botan_mp_t result	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
      mod: botan_mp_t mod	(api_ref/ffi)
    botan_mp_equal: int botan_mp_equal(botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_is_zero: int botan_mp_is_zero(const botan_mp_t x)	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
    botan_mp_is_odd: int botan_mp_is_odd(const botan_mp_t x)	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
    botan_mp_is_even: int botan_mp_is_even(const botan_mp_t x)	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
    botan_mp_is_positive: int botan_mp_is_positive(const botan_mp_t x)	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
    botan_mp_to_uint32: int botan_mp_to_uint32(const botan_mp_t x, uint32_t *val)	(api_ref/ffi)
      x: const botan_mp_t x	(api_ref/ffi)
      val: uint32_t *val	(api_ref/ffi)
    botan_mp_cmp: int botan_mp_cmp(int *result, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      result: int *result	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_swap: int botan_mp_swap(botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_powmod: int botan_mp_powmod(botan_mp_t out, botan_mp_t base, botan_mp_t exponent, botan_mp_t modulus)	(api_ref/ffi)
      out: botan_mp_t out	(api_ref/ffi)
      base: botan_mp_t base	(api_ref/ffi)
      exponent: botan_mp_t exponent	(api_ref/ffi)
      modulus: botan_mp_t modulus	(api_ref/ffi)
    botan_mp_lshift: int botan_mp_lshift(botan_mp_t out, botan_mp_t in, size_t shift)	(api_ref/ffi)
      out: botan_mp_t out	(api_ref/ffi)
      in: botan_mp_t in	(api_ref/ffi)
      shift: size_t shift	(api_ref/ffi)
    botan_mp_rshift: int botan_mp_rshift(botan_mp_t out, botan_mp_t in, size_t shift)	(api_ref/ffi)
      out: botan_mp_t out	(api_ref/ffi)
      in: botan_mp_t in	(api_ref/ffi)
      shift: size_t shift	(api_ref/ffi)
    botan_mp_mod_inverse: int botan_mp_mod_inverse(botan_mp_t out, botan_mp_t in, botan_mp_t modulus)	(api_ref/ffi)
      out: botan_mp_t out	(api_ref/ffi)
      in: botan_mp_t in	(api_ref/ffi)
      modulus: botan_mp_t modulus	(api_ref/ffi)
    botan_mp_rand_bits: int botan_mp_rand_bits(botan_mp_t rand_out, botan_rng_t rng, size_t bits)	(api_ref/ffi)
      rand_out: botan_mp_t rand_out	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      bits: size_t bits	(api_ref/ffi)
    botan_mp_rand_range: int botan_mp_rand_range(botan_mp_t rand_out, botan_rng_t rng, botan_mp_t lower_bound, botan_mp_t upper_bound)	(api_ref/ffi)
      rand_out: botan_mp_t rand_out	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      lower_bound: botan_mp_t lower_bound	(api_ref/ffi)
      upper_bound: botan_mp_t upper_bound	(api_ref/ffi)
    botan_mp_gcd: int botan_mp_gcd(botan_mp_t out, botan_mp_t x, botan_mp_t y)	(api_ref/ffi)
      out: botan_mp_t out	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_mp_is_prime: int botan_mp_is_prime(botan_mp_t n, botan_rng_t rng, size_t test_prob)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      test_prob: size_t test_prob	(api_ref/ffi)
    botan_mp_get_bit: int botan_mp_get_bit(botan_mp_t n, size_t bit)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      bit: size_t bit	(api_ref/ffi)
    botan_mp_set_bit: int botan_mp_set_bit(botan_mp_t n, size_t bit)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      bit: size_t bit	(api_ref/ffi)
    botan_mp_clear_bit: int botan_mp_clear_bit(botan_mp_t n, size_t bit)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      bit: size_t bit	(api_ref/ffi)
    botan_bcrypt_generate: int botan_bcrypt_generate(uint8_t *out, size_t *out_len, const char *password, botan_rng_t rng, size_t work_factor, uint32_t flags)	(api_ref/ffi)
      out: uint8_t *out	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      password: const char *password	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      work_factor: size_t work_factor	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_bcrypt_is_valid: int botan_bcrypt_is_valid(const char *pass, const char *hash)	(api_ref/ffi)
      pass: const char *pass	(api_ref/ffi)
      hash: const char *hash	(api_ref/ffi)
    botan_privkey_t: opaque *botan_privkey_t	(api_ref/ffi)
    botan_privkey_create: int botan_privkey_create(botan_privkey_t *key, const char *algo_name, const char *algo_params, botan_rng_t rng)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      algo_name: const char *algo_name	(api_ref/ffi)
      algo_params: const char *algo_params	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
    botan_privkey_create_rsa: int botan_privkey_create_rsa(botan_privkey_t *key, botan_rng_t rng, size_t n_bits)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      n_bits: size_t n_bits	(api_ref/ffi)
    botan_privkey_create_ecdsa: int botan_privkey_create_ecdsa(botan_privkey_t *key, botan_rng_t rng, const char *curve)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      curve: const char *curve	(api_ref/ffi)
    botan_privkey_create_ecdh: int botan_privkey_create_ecdh(botan_privkey_t *key, botan_rng_t rng, const char *curve)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      curve: const char *curve	(api_ref/ffi)
    botan_privkey_create_mceliece: int botan_privkey_create_mceliece(botan_privkey_t *key, botan_rng_t rng, size_t n, size_t t)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      n: size_t n	(api_ref/ffi)
      t: size_t t	(api_ref/ffi)
    botan_privkey_create_dh: int botan_privkey_create_dh(botan_privkey_t *key, botan_rng_t rng, const char *params)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      params: const char *params	(api_ref/ffi)
    botan_privkey_load: int botan_privkey_load(botan_privkey_t *key, botan_rng_t rng, const uint8_t bits[], size_t len, const char *password)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      bits: const uint8_t bits[]	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
      password: const char *password	(api_ref/ffi)
    botan_privkey_destroy: int botan_privkey_destroy(botan_privkey_t key)	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
    botan_privkey_export: int botan_privkey_export(botan_privkey_t key, uint8_t out[], size_t *out_len, uint32_t flags)	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_privkey_export_encrypted: int botan_privkey_export_encrypted(botan_privkey_t key, uint8_t out[], size_t *out_len, botan_rng_t rng, const char *passphrase, const char *encryption_algo, uint32_t flags)	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      passphrase: const char *passphrase	(api_ref/ffi)
      encryption_algo: const char *encryption_algo	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_privkey_export_pubkey: int botan_privkey_export_pubkey(botan_pubkey_t *out, botan_privkey_t in)	(api_ref/ffi)
      out: botan_pubkey_t *out	(api_ref/ffi)
      in: botan_privkey_t in	(api_ref/ffi)
    botan_privkey_get_field: int botan_privkey_get_field(botan_mp_t output, botan_privkey_t key, const char *field_name)	(api_ref/ffi)
      output: botan_mp_t output	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      field_name: const char *field_name	(api_ref/ffi)
    botan_pubkey_t: opaque *botan_pubkey_t	(api_ref/ffi)
    botan_pubkey_load: int botan_pubkey_load(botan_pubkey_t *key, const uint8_t bits[], size_t len)	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
      bits: const uint8_t bits[]	(api_ref/ffi)
      len: size_t len	(api_ref/ffi)
    botan_pubkey_export: int botan_pubkey_export(botan_pubkey_t key, uint8_t out[], size_t *out_len, uint32_t flags)	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pubkey_algo_name: int botan_pubkey_algo_name(botan_pubkey_t key, char out[], size_t *out_len)	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      out: char out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_pubkey_estimated_strength: int botan_pubkey_estimated_strength(botan_pubkey_t key, size_t *estimate)	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      estimate: size_t *estimate	(api_ref/ffi)
    botan_pubkey_fingerprint: int botan_pubkey_fingerprint(botan_pubkey_t key, const char *hash, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      hash: const char *hash	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_pubkey_destroy: int botan_pubkey_destroy(botan_pubkey_t key)	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
    botan_pubkey_get_field: int botan_pubkey_get_field(botan_mp_t output, botan_pubkey_t key, const char *field_name)	(api_ref/ffi)
      output: botan_mp_t output	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      field_name: const char *field_name	(api_ref/ffi)
    botan_privkey_rsa_get_p: int botan_privkey_rsa_get_p(botan_mp_t p, botan_privkey_t rsa_key)	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      rsa_key: botan_privkey_t rsa_key	(api_ref/ffi)
    botan_privkey_rsa_get_q: int botan_privkey_rsa_get_q(botan_mp_t q, botan_privkey_t rsa_key)	(api_ref/ffi)
      q: botan_mp_t q	(api_ref/ffi)
      rsa_key: botan_privkey_t rsa_key	(api_ref/ffi)
    botan_privkey_rsa_get_d: int botan_privkey_rsa_get_d(botan_mp_t d, botan_privkey_t rsa_key)	(api_ref/ffi)
      d: botan_mp_t d	(api_ref/ffi)
      rsa_key: botan_privkey_t rsa_key	(api_ref/ffi)
    botan_privkey_rsa_get_n: int botan_privkey_rsa_get_n(botan_mp_t n, botan_privkey_t rsa_key)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      rsa_key: botan_privkey_t rsa_key	(api_ref/ffi)
    botan_privkey_rsa_get_e: int botan_privkey_rsa_get_e(botan_mp_t e, botan_privkey_t rsa_key)	(api_ref/ffi)
      e: botan_mp_t e	(api_ref/ffi)
      rsa_key: botan_privkey_t rsa_key	(api_ref/ffi)
    botan_pubkey_rsa_get_e: int botan_pubkey_rsa_get_e(botan_mp_t e, botan_pubkey_t rsa_key)	(api_ref/ffi)
      e: botan_mp_t e	(api_ref/ffi)
      rsa_key: botan_pubkey_t rsa_key	(api_ref/ffi)
    botan_pubkey_rsa_get_n: int botan_pubkey_rsa_get_n(botan_mp_t n, botan_pubkey_t rsa_key)	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      rsa_key: botan_pubkey_t rsa_key	(api_ref/ffi)
    botan_privkey_load_rsa: int botan_privkey_load_rsa(botan_privkey_t *key, botan_mp_t p, botan_mp_t q, botan_mp_t e)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      q: botan_mp_t q	(api_ref/ffi)
      e: botan_mp_t e	(api_ref/ffi)
    botan_pubkey_load_rsa: int botan_pubkey_load_rsa(botan_pubkey_t *key, botan_mp_t n, botan_mp_t e)	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
      n: botan_mp_t n	(api_ref/ffi)
      e: botan_mp_t e	(api_ref/ffi)
    botan_privkey_load_dsa: int botan_privkey_load_dsa(botan_privkey_t *key, botan_mp_t p, botan_mp_t q, botan_mp_t g, botan_mp_t x)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      q: botan_mp_t q	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
    botan_pubkey_load_dsa: int botan_pubkey_load_dsa(botan_pubkey_t *key, botan_mp_t p, botan_mp_t q, botan_mp_t g, botan_mp_t y)	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      q: botan_mp_t q	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_privkey_load_elgamal: int botan_privkey_load_elgamal(botan_privkey_t *key, botan_mp_t p, botan_mp_t g, botan_mp_t x)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
    botan_pubkey_load_elgamal: int botan_pubkey_load_elgamal(botan_pubkey_t *key, botan_mp_t p, botan_mp_t g, botan_mp_t y)	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_privkey_load_dh: int botan_privkey_load_dh(botan_privkey_t *key, botan_mp_t p, botan_mp_t g, botan_mp_t x)	(api_ref/ffi)
      key: botan_privkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      x: botan_mp_t x	(api_ref/ffi)
    botan_pubkey_load_dh: int botan_pubkey_load_dh(botan_pubkey_t *key, botan_mp_t p, botan_mp_t g, botan_mp_t y)	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
      p: botan_mp_t p	(api_ref/ffi)
      g: botan_mp_t g	(api_ref/ffi)
      y: botan_mp_t y	(api_ref/ffi)
    botan_pk_op_encrypt_t: opaque *botan_pk_op_encrypt_t	(api_ref/ffi)
    botan_pk_op_encrypt_create: int botan_pk_op_encrypt_create(botan_pk_op_encrypt_t *op, botan_pubkey_t key, const char *padding, uint32_t flags)	(api_ref/ffi)
      op: botan_pk_op_encrypt_t *op	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      padding: const char *padding	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pk_op_encrypt_destroy: int botan_pk_op_encrypt_destroy(botan_pk_op_encrypt_t op)	(api_ref/ffi)
      op: botan_pk_op_encrypt_t op	(api_ref/ffi)
    botan_pk_op_encrypt_output_length: int botan_pk_op_encrypt_output_length(botan_pk_op_encrypt_t op, size_t ptext_len, size_t *ctext_len)	(api_ref/ffi)
      op: botan_pk_op_encrypt_t op	(api_ref/ffi)
      ptext_len: size_t ptext_len	(api_ref/ffi)
      ctext_len: size_t *ctext_len	(api_ref/ffi)
    botan_pk_op_encrypt: int botan_pk_op_encrypt(botan_pk_op_encrypt_t op, botan_rng_t rng, uint8_t out[], size_t *out_len, const uint8_t plaintext[], size_t plaintext_len)	(api_ref/ffi)
      op: botan_pk_op_encrypt_t op	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      plaintext: const uint8_t plaintext[]	(api_ref/ffi)
      plaintext_len: size_t plaintext_len	(api_ref/ffi)
    botan_pk_op_decrypt_t: opaque *botan_pk_op_decrypt_t	(api_ref/ffi)
    botan_pk_op_decrypt_create: int botan_pk_op_decrypt_create(botan_pk_op_decrypt_t *op, botan_privkey_t key, const char *padding, uint32_t flags)	(api_ref/ffi)
      op: botan_pk_op_decrypt_t *op	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      padding: const char *padding	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pk_op_decrypt_destroy: int botan_pk_op_decrypt_destroy(botan_pk_op_decrypt_t op)	(api_ref/ffi)
      op: botan_pk_op_decrypt_t op	(api_ref/ffi)
    botan_pk_op_decrypt_output_length: int botan_pk_op_decrypt_output_length(botan_pk_op_decrypt_t op, size_t ctext_len, size_t *ptext_len)	(api_ref/ffi)
      op: botan_pk_op_decrypt_t op	(api_ref/ffi)
      ctext_len: size_t ctext_len	(api_ref/ffi)
      ptext_len: size_t *ptext_len	(api_ref/ffi)
    botan_pk_op_decrypt: int botan_pk_op_decrypt(botan_pk_op_decrypt_t op, uint8_t out[], size_t *out_len, uint8_t ciphertext[], size_t ciphertext_len)	(api_ref/ffi)
      op: botan_pk_op_decrypt_t op	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      ciphertext: uint8_t ciphertext[]	(api_ref/ffi)
      ciphertext_len: size_t ciphertext_len	(api_ref/ffi)
    botan_pk_op_sign_t: opaque *botan_pk_op_sign_t	(api_ref/ffi)
    botan_pk_op_sign_create: int botan_pk_op_sign_create(botan_pk_op_sign_t *op, botan_privkey_t key, const char *hash_and_padding, uint32_t flags)	(api_ref/ffi)
      op: botan_pk_op_sign_t *op	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      hash_and_padding: const char *hash_and_padding	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pk_op_sign_destroy: int botan_pk_op_sign_destroy(botan_pk_op_sign_t op)	(api_ref/ffi)
      op: botan_pk_op_sign_t op	(api_ref/ffi)
    botan_pk_op_sign_output_length: int botan_pk_op_sign_output_length(botan_pk_op_sign_t op, size_t *sig_len)	(api_ref/ffi)
      op: botan_pk_op_sign_t op	(api_ref/ffi)
      sig_len: size_t *sig_len	(api_ref/ffi)
    botan_pk_op_sign_update: int botan_pk_op_sign_update(botan_pk_op_sign_t op, const uint8_t in[], size_t in_len)	(api_ref/ffi)
      op: botan_pk_op_sign_t op	(api_ref/ffi)
      in: const uint8_t in[]	(api_ref/ffi)
      in_len: size_t in_len	(api_ref/ffi)
    botan_pk_op_sign_finish: int botan_pk_op_sign_finish(botan_pk_op_sign_t op, botan_rng_t rng, uint8_t sig[], size_t *sig_len)	(api_ref/ffi)
      op: botan_pk_op_sign_t op	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      sig: uint8_t sig[]	(api_ref/ffi)
      sig_len: size_t *sig_len	(api_ref/ffi)
    botan_pk_op_verify_t: opaque *botan_pk_op_verify_t	(api_ref/ffi)
    botan_pk_op_verify_create: int botan_pk_op_verify_create(botan_pk_op_verify_t *op, botan_pubkey_t key, const char *hash_and_padding, uint32_t flags)	(api_ref/ffi)
      op: botan_pk_op_verify_t *op	(api_ref/ffi)
      key: botan_pubkey_t key	(api_ref/ffi)
      hash_and_padding: const char *hash_and_padding	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pk_op_verify_destroy: int botan_pk_op_verify_destroy(botan_pk_op_verify_t op)	(api_ref/ffi)
      op: botan_pk_op_verify_t op	(api_ref/ffi)
    botan_pk_op_verify_update: int botan_pk_op_verify_update(botan_pk_op_verify_t op, const uint8_t in[], size_t in_len)	(api_ref/ffi)
      op: botan_pk_op_verify_t op	(api_ref/ffi)
      in: const uint8_t in[]	(api_ref/ffi)
      in_len: size_t in_len	(api_ref/ffi)
    botan_pk_op_verify_finish: int botan_pk_op_verify_finish(botan_pk_op_verify_t op, const uint8_t sig[], size_t sig_len)	(api_ref/ffi)
      op: botan_pk_op_verify_t op	(api_ref/ffi)
      sig: const uint8_t sig[]	(api_ref/ffi)
      sig_len: size_t sig_len	(api_ref/ffi)
    botan_pk_op_ka_t: opaque *botan_pk_op_ka_t	(api_ref/ffi)
    botan_pk_op_key_agreement_create: int botan_pk_op_key_agreement_create(botan_pk_op_ka_t *op, botan_privkey_t key, const char *kdf, uint32_t flags)	(api_ref/ffi)
      op: botan_pk_op_ka_t *op	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      kdf: const char *kdf	(api_ref/ffi)
      flags: uint32_t flags	(api_ref/ffi)
    botan_pk_op_key_agreement_destroy: int botan_pk_op_key_agreement_destroy(botan_pk_op_ka_t op)	(api_ref/ffi)
      op: botan_pk_op_ka_t op	(api_ref/ffi)
    botan_pk_op_key_agreement_export_public: int botan_pk_op_key_agreement_export_public(botan_privkey_t key, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_pk_op_key_agreement: int botan_pk_op_key_agreement(botan_pk_op_ka_t op, uint8_t out[], size_t *out_len, const uint8_t other_key[], size_t other_key_len, const uint8_t salt[], size_t salt_len)	(api_ref/ffi)
      op: botan_pk_op_ka_t op	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
      other_key: const uint8_t other_key[]	(api_ref/ffi)
      other_key_len: size_t other_key_len	(api_ref/ffi)
      salt: const uint8_t salt[]	(api_ref/ffi)
      salt_len: size_t salt_len	(api_ref/ffi)
    botan_mceies_encrypt: int botan_mceies_encrypt(botan_pubkey_t mce_key, botan_rng_t rng, const char *aead, const uint8_t pt[], size_t pt_len, const uint8_t ad[], size_t ad_len, uint8_t ct[], size_t *ct_len)	(api_ref/ffi)
      mce_key: botan_pubkey_t mce_key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      aead: const char *aead	(api_ref/ffi)
      pt: const uint8_t pt[]	(api_ref/ffi)
      pt_len: size_t pt_len	(api_ref/ffi)
      ad: const uint8_t ad[]	(api_ref/ffi)
      ad_len: size_t ad_len	(api_ref/ffi)
      ct: uint8_t ct[]	(api_ref/ffi)
      ct_len: size_t *ct_len	(api_ref/ffi)
    botan_mceies_decrypt: int botan_mceies_decrypt(botan_privkey_t mce_key, const char *aead, const uint8_t ct[], size_t ct_len, const uint8_t ad[], size_t ad_len, uint8_t pt[], size_t *pt_len)	(api_ref/ffi)
      mce_key: botan_privkey_t mce_key	(api_ref/ffi)
      aead: const char *aead	(api_ref/ffi)
      ct: const uint8_t ct[]	(api_ref/ffi)
      ct_len: size_t ct_len	(api_ref/ffi)
      ad: const uint8_t ad[]	(api_ref/ffi)
      ad_len: size_t ad_len	(api_ref/ffi)
      pt: uint8_t pt[]	(api_ref/ffi)
      pt_len: size_t *pt_len	(api_ref/ffi)
    botan_x509_cert_t: opaque *botan_x509_cert_t	(api_ref/ffi)
    botan_x509_cert_load: int botan_x509_cert_load(botan_x509_cert_t *cert_obj, const uint8_t cert[], size_t cert_len)	(api_ref/ffi)
      cert_obj: botan_x509_cert_t *cert_obj	(api_ref/ffi)
      cert: const uint8_t cert[]	(api_ref/ffi)
      cert_len: size_t cert_len	(api_ref/ffi)
    botan_x509_cert_load_file: int botan_x509_cert_load_file(botan_x509_cert_t *cert_obj, const char *filename)	(api_ref/ffi)
      cert_obj: botan_x509_cert_t *cert_obj	(api_ref/ffi)
      filename: const char *filename	(api_ref/ffi)
    botan_x509_cert_dup: int botan_x509_cert_dup(botan_x509_cert_t *cert_obj, botan_x509_cert_t cert)	(api_ref/ffi)
      cert_obj: botan_x509_cert_t *cert_obj	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
    botan_x509_cert_destroy: int botan_x509_cert_destroy(botan_x509_cert_t cert)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
    botan_x509_cert_gen_selfsigned: int botan_x509_cert_gen_selfsigned(botan_x509_cert_t *cert, botan_privkey_t key, botan_rng_t rng, const char *common_name, const char *org_name)	(api_ref/ffi)
      cert: botan_x509_cert_t *cert	(api_ref/ffi)
      key: botan_privkey_t key	(api_ref/ffi)
      rng: botan_rng_t rng	(api_ref/ffi)
      common_name: const char *common_name	(api_ref/ffi)
      org_name: const char *org_name	(api_ref/ffi)
    botan_x509_cert_get_time_starts: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: char out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_time_expires: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: char out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_not_before: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t *time_since_epoch)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      time_since_epoch: uint64_t *time_since_epoch	(api_ref/ffi)
    botan_x509_cert_not_after: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t *time_since_epoch)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      time_since_epoch: uint64_t *time_since_epoch	(api_ref/ffi)
    botan_x509_cert_get_fingerprint: int botan_x509_cert_get_fingerprint(botan_x509_cert_t cert, const char *hash, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      hash: const char *hash	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_serial_number: int botan_x509_cert_get_serial_number(botan_x509_cert_t cert, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_authority_key_id: int botan_x509_cert_get_authority_key_id(botan_x509_cert_t cert, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_subject_key_id: int botan_x509_cert_get_subject_key_id(botan_x509_cert_t cert, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_public_key_bits: int botan_x509_cert_get_public_key_bits(botan_x509_cert_t cert, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_public_key: int botan_x509_cert_get_public_key(botan_x509_cert_t cert, botan_pubkey_t *key)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      key: botan_pubkey_t *key	(api_ref/ffi)
    botan_x509_cert_get_issuer_dn: int botan_x509_cert_get_issuer_dn(botan_x509_cert_t cert, const char *key, size_t index, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      key: const char *key	(api_ref/ffi)
      index: size_t index	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_get_subject_dn: int botan_x509_cert_get_subject_dn(botan_x509_cert_t cert, const char *key, size_t index, uint8_t out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      key: const char *key	(api_ref/ffi)
      index: size_t index	(api_ref/ffi)
      out: uint8_t out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_to_string: int botan_x509_cert_to_string(botan_x509_cert_t cert, char out[], size_t *out_len)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      out: char out[]	(api_ref/ffi)
      out_len: size_t *out_len	(api_ref/ffi)
    botan_x509_cert_key_constraints: botan_x509_cert_key_constraints	(api_ref/ffi)
    botan_x509_cert_allowed_usage: int botan_x509_cert_allowed_usage(botan_x509_cert_t cert, unsigned int key_usage)	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      key_usage: unsigned int key_usage	(api_ref/ffi)
    botan_x509_cert_verify: int botan_x509_cert_verify(int *validation_result, botan_x509_cert_t cert, const botan_x509_cert_t *intermediates, size_t intermediates_len, const botan_x509_cert_t *trusted, size_t trusted_len, const char *trusted_path, size_t required_strength, const char *hostname, uint64_t reference_time)	(api_ref/ffi)
      validation_result: int *validation_result	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      intermediates: const botan_x509_cert_t *intermediates	(api_ref/ffi)
      intermediates_len: size_t intermediates_len	(api_ref/ffi)
      trusted: const botan_x509_cert_t *trusted	(api_ref/ffi)
      trusted_len: size_t trusted_len	(api_ref/ffi)
      trusted_path: const char *trusted_path	(api_ref/ffi)
      required_strength: size_t required_strength	(api_ref/ffi)
      hostname: const char *hostname	(api_ref/ffi)
      reference_time: uint64_t reference_time	(api_ref/ffi)
    botan_x509_cert_verify_with_crl: int botan_x509_cert_verify_with_crl(int *validation_result, botan_x509_cert_t cert, const botan_x509_cert_t *intermediates, size_t intermediates_len, const botan_x509_cert_t *trusted, size_t trusted_len, const botan_x509_crl_t *crls, size_t crls_len, const char *trusted_path, size_t required_strength, const char *hostname, uint64_t reference_time)	(api_ref/ffi)
      validation_result: int *validation_result	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
      intermediates: const botan_x509_cert_t *intermediates	(api_ref/ffi)
      intermediates_len: size_t intermediates_len	(api_ref/ffi)
      trusted: const botan_x509_cert_t *trusted	(api_ref/ffi)
      trusted_len: size_t trusted_len	(api_ref/ffi)
      crls: const botan_x509_crl_t *crls	(api_ref/ffi)
      crls_len: size_t crls_len	(api_ref/ffi)
      trusted_path: const char *trusted_path	(api_ref/ffi)
      required_strength: size_t required_strength	(api_ref/ffi)
      hostname: const char *hostname	(api_ref/ffi)
      reference_time: uint64_t reference_time	(api_ref/ffi)
    botan_x509_cert_validation_status: const char *botan_x509_cert_validation_status(int code)	(api_ref/ffi)
      code: int code	(api_ref/ffi)
    botan_x509_crl_t: opaque *botan_x509_crl_t	(api_ref/ffi)
    botan_x509_crl_load: int botan_x509_crl_load(botan_x509_crl_t *crl_obj, const uint8_t crl[], size_t crl_len)	(api_ref/ffi)
      crl_obj: botan_x509_crl_t *crl_obj	(api_ref/ffi)
      crl: const uint8_t crl[]	(api_ref/ffi)
      crl_len: size_t crl_len	(api_ref/ffi)
    botan_x509_crl_load_file: int botan_x509_crl_load_file(botan_x509_crl_t *crl_obj, const char *filename)	(api_ref/ffi)
      crl_obj: botan_x509_crl_t *crl_obj	(api_ref/ffi)
      filename: const char *filename	(api_ref/ffi)
    botan_x509_crl_destroy: int botan_x509_crl_destroy(botan_x509_crl_t crl)	(api_ref/ffi)
      crl: botan_x509_crl_t crl	(api_ref/ffi)
    botan_x509_is_revoked: int botan_x509_is_revoked(botan_x509_crl_t crl, botan_x509_cert_t cert)	(api_ref/ffi)
      crl: botan_x509_crl_t crl	(api_ref/ffi)
      cert: botan_x509_cert_t cert	(api_ref/ffi)
    Pipe
      prepend: void Pipe::prepend(Filter *filter)	(api_ref/filters)
        filter: Filter *filter	(api_ref/filters)
      append: void Pipe::append(Filter *filter)	(api_ref/filters)
        filter: Filter *filter	(api_ref/filters)
      pop: void Pipe::pop()	(api_ref/filters)
      reset: void Pipe::reset()	(api_ref/filters)
      start_msg: void Pipe::start_msg()	(api_ref/filters)
      write: void Pipe::write(const uint8_t *input, size_t length)	(api_ref/filters)
        input: const uint8_t *input	(api_ref/filters)
        length: size_t length	(api_ref/filters)
      write: void Pipe::write(const std::vector<uint8_t> &input)	(api_ref/filters)
        input: const std::vector<uint8_t> &input	(api_ref/filters)
      write: void Pipe::write(const std::string &input)	(api_ref/filters)
        input: const std::string &input	(api_ref/filters)
      write: void Pipe::write(DataSource &input)	(api_ref/filters)
        input: DataSource &input	(api_ref/filters)
      write: void Pipe::write(uint8_t input)	(api_ref/filters)
        input: uint8_t input	(api_ref/filters)
      end_msg: void Pipe::end_msg()	(api_ref/filters)
      read: size_t Pipe::read(uint8_t *out, size_t len)	(api_ref/filters)
        out: uint8_t *out	(api_ref/filters)
        len: size_t len	(api_ref/filters)
      peek: size_t Pipe::peek(uint8_t *out, size_t len)	(api_ref/filters)
        out: uint8_t *out	(api_ref/filters)
        len: size_t len	(api_ref/filters)
      read_all: secure_vector<uint8_t> Pipe::read_all()	(api_ref/filters)
      read_all_as_string: std::string Pipe::read_all_as_string()	(api_ref/filters)
      remaining: size_t Pipe::remaining()	(api_ref/filters)
      default_msg: Pipe::message_id Pipe::default_msg()	(api_ref/filters)
      message_count: Pipe::message_id Pipe::message_count()	(api_ref/filters)
      set_default_msg: Pipe::set_default_msg(Pipe::message_id msgno)	(api_ref/filters)
        msgno: Pipe::message_id msgno	(api_ref/filters)
    get_cipher: Keyed_Filter *get_cipher(std::string cipher_spec, SymmetricKey key, InitializationVector iv, Cipher_Dir dir)	(api_ref/filters)
      cipher_spec: std::string cipher_spec	(api_ref/filters)
      key: SymmetricKey key	(api_ref/filters)
      iv: InitializationVector iv	(api_ref/filters)
      dir: Cipher_Dir dir	(api_ref/filters)
    Hash_Filter
      Hash_Filter: Hash_Filter::Hash_Filter(std::string hash, size_t outlen = 0)	(api_ref/filters)
        hash: std::string hash	(api_ref/filters)
        outlen: size_t outlen = 0	(api_ref/filters)
    MAC_Filter
      MAC_Filter: MAC_Filter::MAC_Filter(std::string mac, SymmetricKey key, size_t outlen = 0)	(api_ref/filters)
        mac: std::string mac	(api_ref/filters)
        key: SymmetricKey key	(api_ref/filters)
        outlen: size_t outlen = 0	(api_ref/filters)
    Filter
      name: std::string Filter::name() const	(api_ref/filters)
      write: void Filter::write(const uint8_t *input, size_t length)	(api_ref/filters)
        input: const uint8_t *input	(api_ref/filters)
        length: size_t length	(api_ref/filters)
      send: void Filter::send(uint8_t *output, size_t length)	(api_ref/filters)
        output: uint8_t *output	(api_ref/filters)
        length: size_t length	(api_ref/filters)
      start_msg: void Filter::start_msg()	(api_ref/filters)
      end_msg: void Filter::end_msg()	(api_ref/filters)
    FPE_FE1: FPE_FE1	(api_ref/fpe)
      FPE_FE1: FPE_FE1(const BigInt &n, size_t rounds = 5, bool compat_mode = false, std::string mac_algo = "HMAC(SHA-256)")	(api_ref/fpe)
        n: const BigInt &n	(api_ref/fpe)
        rounds: size_t rounds = 5	(api_ref/fpe)
        compat_mode: bool compat_mode = false	(api_ref/fpe)
        mac_algo: std::string mac_algo = "HMAC(SHA-256)"	(api_ref/fpe)
      encrypt: BigInt encrypt(const BigInt &x, const uint8_t tweak[], size_t tweak_len) const	(api_ref/fpe)
        x: const BigInt &x	(api_ref/fpe)
        tweak: const uint8_t tweak[]	(api_ref/fpe)
        tweak_len: size_t tweak_len	(api_ref/fpe)
      decrypt: BigInt decrypt(const BigInt &x, const uint8_t tweak[], size_t tweak_len) const	(api_ref/fpe)
        x: const BigInt &x	(api_ref/fpe)
        tweak: const uint8_t tweak[]	(api_ref/fpe)
        tweak_len: size_t tweak_len	(api_ref/fpe)
      encrypt: BigInt encrypt(const BigInt &x, uint64_t tweak)	(api_ref/fpe)
        x: const BigInt &x	(api_ref/fpe)
        tweak: uint64_t tweak	(api_ref/fpe)
      decrypt: BigInt decrypt(const BigInt &x, uint64_t tweak)	(api_ref/fpe)
        x: const BigInt &x	(api_ref/fpe)
        tweak: uint64_t tweak	(api_ref/fpe)
    FPE
      fe1_encrypt: BigInt FPE::fe1_encrypt(const BigInt &n, const BigInt &X, const SymmetricKey &key, const std::vector<uint8_t> &tweak)	(api_ref/fpe)
        n: const BigInt &n	(api_ref/fpe)
        X: const BigInt &X	(api_ref/fpe)
        key: const SymmetricKey &key	(api_ref/fpe)
        tweak: const std::vector<uint8_t> &tweak	(api_ref/fpe)
      fe1_decrypt: BigInt FPE::fe1_decrypt(const BigInt &n, const BigInt &X, const SymmetricKey &key, const std::vector<uint8_t> &tweak)	(api_ref/fpe)
        n: const BigInt &n	(api_ref/fpe)
        X: const BigInt &X	(api_ref/fpe)
        key: const SymmetricKey &key	(api_ref/fpe)
        tweak: const std::vector<uint8_t> &tweak	(api_ref/fpe)
    HashFunction: HashFunction	(api_ref/hash)
      create: static std::unique_ptr<HashFunction> create(const std::string &name)	(api_ref/hash)
        name: const std::string &name	(api_ref/hash)
      create_or_throw: static std::unique_ptr<HashFunction> create_or_throw(const std::string &name)	(api_ref/hash)
        name: const std::string &name	(api_ref/hash)
      output_length: size_t output_length()	(api_ref/hash)
      update: void update(const uint8_t *input, size_t length)	(api_ref/hash)
        input: const uint8_t *input	(api_ref/hash)
        length: size_t length	(api_ref/hash)
      update: void update(uint8_t input)	(api_ref/hash)
        input: uint8_t input	(api_ref/hash)
      update: void update(const std::vector<uint8_t> &input)	(api_ref/hash)
        input: const std::vector<uint8_t> &input	(api_ref/hash)
      update: void update(const std::string &input)	(api_ref/hash)
        input: const std::string &input	(api_ref/hash)
      final: void final(uint8_t *out)	(api_ref/hash)
        out: uint8_t *out	(api_ref/hash)
      final: secure_vector<uint8_t> final()	(api_ref/hash)
      process: secure_vector<uint8_t> process(const uint8_t in[], size_t length)	(api_ref/hash)
        in: const uint8_t in[]	(api_ref/hash)
        length: size_t length	(api_ref/hash)
      process: secure_vector<uint8_t> process(const std::string &in)	(api_ref/hash)
        in: const std::string &in	(api_ref/hash)
    KDF: KDF	(api_ref/kdf)
      derive_key: secure_vector<uint8_t> derive_key(size_t key_len, const std::vector<uint8_t> &secret, const std::string &salt = "") const	(api_ref/kdf)
        key_len: size_t key_len	(api_ref/kdf)
        secret: const std::vector<uint8_t> &secret	(api_ref/kdf)
        salt: const std::string &salt = ""	(api_ref/kdf)
      derive_key: secure_vector<uint8_t> derive_key(size_t key_len, const std::vector<uint8_t> &secret, const std::vector<uint8_t> &salt) const	(api_ref/kdf)
        key_len: size_t key_len	(api_ref/kdf)
        secret: const std::vector<uint8_t> &secret	(api_ref/kdf)
        salt: const std::vector<uint8_t> &salt	(api_ref/kdf)
      derive_key: secure_vector<uint8_t> derive_key(size_t key_len, const std::vector<uint8_t> &secret, const uint8_t *salt, size_t salt_len) const	(api_ref/kdf)
        key_len: size_t key_len	(api_ref/kdf)
        secret: const std::vector<uint8_t> &secret	(api_ref/kdf)
        salt: const uint8_t *salt	(api_ref/kdf)
        salt_len: size_t salt_len	(api_ref/kdf)
      derive_key: secure_vector<uint8_t> derive_key(size_t key_len, const uint8_t *secret, size_t secret_len, const std::string &salt) const	(api_ref/kdf)
        key_len: size_t key_len	(api_ref/kdf)
        secret: const uint8_t *secret	(api_ref/kdf)
        secret_len: size_t secret_len	(api_ref/kdf)
        salt: const std::string &salt	(api_ref/kdf)
    get_kdf: KDF *get_kdf(const std::string &algo_spec)	(api_ref/kdf)
      algo_spec: const std::string &algo_spec	(api_ref/kdf)
    nist_key_wrap: std::vector<uint8_t> nist_key_wrap(const uint8_t input[], size_t input_len, const BlockCipher &bc)	(api_ref/keywrap)
      input: const uint8_t input[]	(api_ref/keywrap)
      input_len: size_t input_len	(api_ref/keywrap)
      bc: const BlockCipher &bc	(api_ref/keywrap)
    nist_key_unwrap: secure_vector<uint8_t> nist_key_unwrap(const uint8_t input[], size_t input_len, const BlockCipher &bc)	(api_ref/keywrap)
      input: const uint8_t input[]	(api_ref/keywrap)
      input_len: size_t input_len	(api_ref/keywrap)
      bc: const BlockCipher &bc	(api_ref/keywrap)
    nist_key_wrap_padded: std::vector<uint8_t> nist_key_wrap_padded(const uint8_t input[], size_t input_len, const BlockCipher &bc)	(api_ref/keywrap)
      input: const uint8_t input[]	(api_ref/keywrap)
      input_len: size_t input_len	(api_ref/keywrap)
      bc: const BlockCipher &bc	(api_ref/keywrap)
    nist_key_unwrap_padded: secure_vector<uint8_t> nist_key_unwrap_padded(const uint8_t input[], size_t input_len, const BlockCipher &bc)	(api_ref/keywrap)
      input: const uint8_t input[]	(api_ref/keywrap)
      input_len: size_t input_len	(api_ref/keywrap)
      bc: const BlockCipher &bc	(api_ref/keywrap)
    rfc3394_keywrap: secure_vector<uint8_t> rfc3394_keywrap(const secure_vector<uint8_t> &key, const SymmetricKey &kek)	(api_ref/keywrap)
      key: const secure_vector<uint8_t> &key	(api_ref/keywrap)
      kek: const SymmetricKey &kek	(api_ref/keywrap)
    rfc3394_keyunwrap: secure_vector<uint8_t> rfc3394_keyunwrap(const secure_vector<uint8_t> &key, const SymmetricKey &kek)	(api_ref/keywrap)
      key: const secure_vector<uint8_t> &key	(api_ref/keywrap)
      kek: const SymmetricKey &kek	(api_ref/keywrap)
    MessageAuthenticationCode: MessageAuthenticationCode	(api_ref/message_auth_codes)
      name: std::string name() const	(api_ref/message_auth_codes)
      clear: void clear()	(api_ref/message_auth_codes)
      clone: MessageAuthenticationCode *clone() const	(api_ref/message_auth_codes)
      set_key: void set_key(const uint8_t *key, size_t length)	(api_ref/message_auth_codes)
        key: const uint8_t *key	(api_ref/message_auth_codes)
        length: size_t length	(api_ref/message_auth_codes)
      valid_keylength: bool valid_keylength(size_t length) const	(api_ref/message_auth_codes)
        length: size_t length	(api_ref/message_auth_codes)
      minimum_keylength: size_t minimum_keylength() const	(api_ref/message_auth_codes)
      maximum_keylength: size_t maximum_keylength() const	(api_ref/message_auth_codes)
      start: void start(const uint8_t *nonce, size_t nonce_len)	(api_ref/message_auth_codes)
        nonce: const uint8_t *nonce	(api_ref/message_auth_codes)
        nonce_len: size_t nonce_len	(api_ref/message_auth_codes)
      update: void update(const uint8_t *input, size_t length)	(api_ref/message_auth_codes)
        input: const uint8_t *input	(api_ref/message_auth_codes)
        length: size_t length	(api_ref/message_auth_codes)
      update: void update(const secure_vector<uint8_t> &in)	(api_ref/message_auth_codes)
        in: const secure_vector<uint8_t> &in	(api_ref/message_auth_codes)
      update: void update(uint8_t in)	(api_ref/message_auth_codes)
        in: uint8_t in	(api_ref/message_auth_codes)
      final: void final(uint8_t *out)	(api_ref/message_auth_codes)
        out: uint8_t *out	(api_ref/message_auth_codes)
      final: secure_vector<uint8_t> final()	(api_ref/message_auth_codes)
      verify_mac: bool verify_mac(const uint8_t *mac, size_t length)	(api_ref/message_auth_codes)
        mac: const uint8_t *mac	(api_ref/message_auth_codes)
        length: size_t length	(api_ref/message_auth_codes)
    HOTP: HOTP	(api_ref/otp)
      HOTP: HOTP(const SymmetricKey &key, const std::string &hash_algo = "SHA-1", size_t digits = 6)	(api_ref/otp)
        key: const SymmetricKey &key	(api_ref/otp)
        hash_algo: const std::string &hash_algo = "SHA-1"	(api_ref/otp)
        digits: size_t digits = 6	(api_ref/otp)
      generate_hotp: uint32_t generate_hotp(uint64_t counter)	(api_ref/otp)
        counter: uint64_t counter	(api_ref/otp)
      verify_hotp: std::pair<bool, uint64_t> verify_hotp(uint32_t otp, uint64_t starting_counter, size_t resync_range = 0)	(api_ref/otp)
        otp: uint32_t otp	(api_ref/otp)
        starting_counter: uint64_t starting_counter	(api_ref/otp)
        resync_range: size_t resync_range = 0	(api_ref/otp)
    TOTP: TOTP	(api_ref/otp)
      TOTP: TOTP(const SymmetricKey &key, const std::string &hash_algo = "SHA-1", size_t digits = 6, size_t time_step = 30)	(api_ref/otp)
        key: const SymmetricKey &key	(api_ref/otp)
        hash_algo: const std::string &hash_algo = "SHA-1"	(api_ref/otp)
        digits: size_t digits = 6	(api_ref/otp)
        time_step: size_t time_step = 30	(api_ref/otp)
      generate_totp: uint32_t generate_totp(std::chrono::system_clock::time_point time_point)	(api_ref/otp)
        time_point: std::chrono::system_clock::time_point time_point	(api_ref/otp)
      generate_totp: uint32_t generate_totp(uint64_t unix_time)	(api_ref/otp)
        unix_time: uint64_t unix_time	(api_ref/otp)
      verify_totp: bool verify_totp(uint32_t otp, std::chrono::system_clock::time_point time, size_t clock_drift_accepted = 0)	(api_ref/otp)
        otp: uint32_t otp	(api_ref/otp)
        time: std::chrono::system_clock::time_point time	(api_ref/otp)
        clock_drift_accepted: size_t clock_drift_accepted = 0	(api_ref/otp)
      verify_totp: bool verify_totp(uint32_t otp, uint64_t unix_time, size_t clock_drift_accepted = 0)	(api_ref/otp)
        otp: uint32_t otp	(api_ref/otp)
        unix_time: uint64_t unix_time	(api_ref/otp)
        clock_drift_accepted: size_t clock_drift_accepted = 0	(api_ref/otp)
    argon2_generate_pwhash: std::string argon2_generate_pwhash(const char *password, size_t password_len, RandomNumberGenerator &rng, size_t p, size_t M, size_t t, size_t y = 2, size_t salt_len = 16, size_t output_len = 32)	(api_ref/passhash)
      password: const char *password	(api_ref/passhash)
      password_len: size_t password_len	(api_ref/passhash)
      rng: RandomNumberGenerator &rng	(api_ref/passhash)
      p: size_t p	(api_ref/passhash)
      M: size_t M	(api_ref/passhash)
      t: size_t t	(api_ref/passhash)
      y: size_t y = 2	(api_ref/passhash)
      salt_len: size_t salt_len = 16	(api_ref/passhash)
      output_len: size_t output_len = 32	(api_ref/passhash)
    argon2_check_pwhash: bool argon2_check_pwhash(const char *password, size_t password_len, const std::string &hash)	(api_ref/passhash)
      password: const char *password	(api_ref/passhash)
      password_len: size_t password_len	(api_ref/passhash)
      hash: const std::string &hash	(api_ref/passhash)
    generate_bcrypt: std::string generate_bcrypt(const std::string &password, RandomNumberGenerator &rng, uint16_t work_factor = 12, char bcrypt_version = "a")	(api_ref/passhash)
      password: const std::string &password	(api_ref/passhash)
      rng: RandomNumberGenerator &rng	(api_ref/passhash)
      work_factor: uint16_t work_factor = 12	(api_ref/passhash)
      bcrypt_version: char bcrypt_version = "a"	(api_ref/passhash)
    check_bcrypt: bool check_bcrypt(const std::string &password, const std::string &hash)	(api_ref/passhash)
      password: const std::string &password	(api_ref/passhash)
      hash: const std::string &hash	(api_ref/passhash)
    generate_passhash9: std::string generate_passhash9(const std::string &password, RandomNumberGenerator &rng, uint16_t work_factor = 15, uint8_t alg_id = 4)	(api_ref/passhash)
      password: const std::string &password	(api_ref/passhash)
      rng: RandomNumberGenerator &rng	(api_ref/passhash)
      work_factor: uint16_t work_factor = 15	(api_ref/passhash)
      alg_id: uint8_t alg_id = 4	(api_ref/passhash)
    check_passhash9: bool check_passhash9(const std::string &password, const std::string &hash)	(api_ref/passhash)
      password: const std::string &password	(api_ref/passhash)
      hash: const std::string &hash	(api_ref/passhash)
    PBKDF: PBKDF	(api_ref/pbkdf)
      pbkdf_iterations: void pbkdf_iterations(uint8_t out[], size_t out_len, const std::string &passphrase, const uint8_t salt[], size_t salt_len, size_t iterations) const	(api_ref/pbkdf)
        out: uint8_t out[]	(api_ref/pbkdf)
        out_len: size_t out_len	(api_ref/pbkdf)
        passphrase: const std::string &passphrase	(api_ref/pbkdf)
        salt: const uint8_t salt[]	(api_ref/pbkdf)
        salt_len: size_t salt_len	(api_ref/pbkdf)
        iterations: size_t iterations	(api_ref/pbkdf)
      pbkdf_timed: void pbkdf_timed(uint8_t out[], size_t out_len, const std::string &passphrase, const uint8_t salt[], size_t salt_len, std::chrono::milliseconds msec, size_t &iterations) const	(api_ref/pbkdf)
        out: uint8_t out[]	(api_ref/pbkdf)
        out_len: size_t out_len	(api_ref/pbkdf)
        passphrase: const std::string &passphrase	(api_ref/pbkdf)
        salt: const uint8_t salt[]	(api_ref/pbkdf)
        salt_len: size_t salt_len	(api_ref/pbkdf)
        msec: std::chrono::milliseconds msec	(api_ref/pbkdf)
        iterations: size_t &iterations	(api_ref/pbkdf)
      derive_key: OctetString derive_key(size_t output_len, const std::string &passphrase, const uint8_t *salt, size_t salt_len, size_t iterations) const	(api_ref/pbkdf)
        output_len: size_t output_len	(api_ref/pbkdf)
        passphrase: const std::string &passphrase	(api_ref/pbkdf)
        salt: const uint8_t *salt	(api_ref/pbkdf)
        salt_len: size_t salt_len	(api_ref/pbkdf)
        iterations: size_t iterations	(api_ref/pbkdf)
    PasswordHash: PasswordHash	(api_ref/pbkdf)
      derive_key: void derive_key(uint8_t out[], size_t out_len, const char *password, const size_t password_len, const uint8_t salt[], size_t salt_len) const	(api_ref/pbkdf)
        out: uint8_t out[]	(api_ref/pbkdf)
        out_len: size_t out_len	(api_ref/pbkdf)
        password: const char *password	(api_ref/pbkdf)
        password_len: const size_t password_len	(api_ref/pbkdf)
        salt: const uint8_t salt[]	(api_ref/pbkdf)
        salt_len: size_t salt_len	(api_ref/pbkdf)
      to_string: std::string to_string() const	(api_ref/pbkdf)
    PasswordHashFamily: PasswordHashFamily	(api_ref/pbkdf)
      create: static std::unique_ptr<PasswordHashFamily> create(const std::string &what)	(api_ref/pbkdf)
        what: const std::string &what	(api_ref/pbkdf)
      default_params: std::unique_ptr<PasswordHash> default_params() const	(api_ref/pbkdf)
      tune: std::unique_ptr<PasswordHash> tune(size_t output_len, std::chrono::milliseconds msec) const	(api_ref/pbkdf)
        output_len: size_t output_len	(api_ref/pbkdf)
        msec: std::chrono::milliseconds msec	(api_ref/pbkdf)
      from_params: std::unique_ptr<PasswordHash> from_params(size_t i1, size_t i2 = 0, size_t i3 = 0) const	(api_ref/pbkdf)
        i1: size_t i1	(api_ref/pbkdf)
        i2: size_t i2 = 0	(api_ref/pbkdf)
        i3: size_t i3 = 0	(api_ref/pbkdf)
    scrypt: void scrypt(uint8_t output[], size_t output_len, const std::string &password, const uint8_t salt[], size_t salt_len, size_t N, size_t r, size_t p)	(api_ref/pbkdf)
      output: uint8_t output[]	(api_ref/pbkdf)
      output_len: size_t output_len	(api_ref/pbkdf)
      password: const std::string &password	(api_ref/pbkdf)
      salt: const uint8_t salt[]	(api_ref/pbkdf)
      salt_len: size_t salt_len	(api_ref/pbkdf)
      N: size_t N	(api_ref/pbkdf)
      r: size_t r	(api_ref/pbkdf)
      p: size_t p	(api_ref/pbkdf)
    UserType: UserType : CK_USER_TYPE	(api_ref/pkcs11)
      UserType
        SO: UserType::SO = CKU_SO	(api_ref/pkcs11)
        User: UserType::User = CKU_USER	(api_ref/pkcs11)
        ContextSpecific: UserType::ContextSpecific = CKU_CONTEXT_SPECIFIC	(api_ref/pkcs11)
    FunctionListPtr: FunctionListPtr = CK_FUNCTION_LIST_PTR	(api_ref/pkcs11)
    LowLevel: LowLevel	(api_ref/pkcs11)
      C_GetSlotList: bool C_GetSlotList(Bbool token_present, SlotId *slot_list_ptr, Ulong *count_ptr, ReturnValue *return_value = ThrowException) const	(api_ref/pkcs11)
        token_present: Bbool token_present	(api_ref/pkcs11)
        slot_list_ptr: SlotId *slot_list_ptr	(api_ref/pkcs11)
        count_ptr: Ulong *count_ptr	(api_ref/pkcs11)
        return_value: ReturnValue *return_value = ThrowException	(api_ref/pkcs11)
      ptr: FunctionListPtr ptr	(api_ref/pkcs11)
    C_GetSlotList: bool C_GetSlotList(bool token_present, std::vector<SlotId> &slot_ids, ReturnValue *return_value = ThrowException) const	(api_ref/pkcs11)
      token_present: bool token_present	(api_ref/pkcs11)
      slot_ids: std::vector<SlotId> &slot_ids	(api_ref/pkcs11)
      return_value: ReturnValue *return_value = ThrowException	(api_ref/pkcs11)
    template<typename Talloc> 
    C_InitPIN: template<typename Talloc> bool C_InitPIN(SessionHandle session, const std::vector<uint8_t, TAlloc> &pin, ReturnValue *return_value = ThrowException) const	(api_ref/pkcs11)
      Talloc: typename Talloc	(api_ref/pkcs11)
      session: SessionHandle session	(api_ref/pkcs11)
      pin: const std::vector<uint8_t, TAlloc> &pin	(api_ref/pkcs11)
      return_value: ReturnValue *return_value = ThrowException	(api_ref/pkcs11)
    ReturnValue: ReturnValue : CK_RV	(api_ref/pkcs11)
    C_GetFunctionList: static bool C_GetFunctionList(Dynamically_Loaded_Library &pkcs11_module, FunctionListPtr *function_list_ptr_ptr, ReturnValue *return_value = ThrowException)	(api_ref/pkcs11)
      pkcs11_module: Dynamically_Loaded_Library &pkcs11_module	(api_ref/pkcs11)
      function_list_ptr_ptr: FunctionListPtr *function_list_ptr_ptr	(api_ref/pkcs11)
      return_value: ReturnValue *return_value = ThrowException	(api_ref/pkcs11)
    Module: Module	(api_ref/pkcs11)
    get_info: Info get_info() const	(api_ref/pkcs11)
    Slot: Slot	(api_ref/pkcs11)
      Slot: Slot(Module &module, SlotId slot_id)	(api_ref/pkcs11)
        module: Module &module	(api_ref/pkcs11)
        slot_id: SlotId slot_id	(api_ref/pkcs11)
      get_available_slots: static std::vector<SlotId> get_available_slots(Module &module, bool token_present)	(api_ref/pkcs11)
        module: Module &module	(api_ref/pkcs11)
        token_present: bool token_present	(api_ref/pkcs11)
      get_slot_info: SlotInfo get_slot_info() const	(api_ref/pkcs11)
      get_token_info: TokenInfo get_token_info() const	(api_ref/pkcs11)
      get_mechanism_list: std::vector<MechanismType> get_mechanism_list() const	(api_ref/pkcs11)
      get_mechanism_info: MechanismInfo get_mechanism_info(MechanismType mechanism_type) const	(api_ref/pkcs11)
        mechanism_type: MechanismType mechanism_type	(api_ref/pkcs11)
      initialize: void initialize(const std::string &label, const secure_string &so_pin) const	(api_ref/pkcs11)
        label: const std::string &label	(api_ref/pkcs11)
        so_pin: const secure_string &so_pin	(api_ref/pkcs11)
    Session: Session	(api_ref/pkcs11)
      Session: Session(Slot &slot, bool read_only)	(api_ref/pkcs11)
        slot: Slot &slot	(api_ref/pkcs11)
        read_only: bool read_only	(api_ref/pkcs11)
      Session: Session(Slot &slot, Flags flags, VoidPtr callback_data, Notify notify_callback)	(api_ref/pkcs11)
        slot: Slot &slot	(api_ref/pkcs11)
        flags: Flags flags	(api_ref/pkcs11)
        callback_data: VoidPtr callback_data	(api_ref/pkcs11)
        notify_callback: Notify notify_callback	(api_ref/pkcs11)
      Session: Session(Slot &slot, SessionHandle handle)	(api_ref/pkcs11)
        slot: Slot &slot	(api_ref/pkcs11)
        handle: SessionHandle handle	(api_ref/pkcs11)
      release: SessionHandle release()	(api_ref/pkcs11)
      login: void login(UserType userType, const secure_string &pin)	(api_ref/pkcs11)
        userType: UserType userType	(api_ref/pkcs11)
        pin: const secure_string &pin	(api_ref/pkcs11)
      logoff: void logoff()	(api_ref/pkcs11)
      get_info: SessionInfo get_info() const	(api_ref/pkcs11)
      set_pin: void set_pin(const secure_string &old_pin, const secure_string &new_pin) const	(api_ref/pkcs11)
        old_pin: const secure_string &old_pin	(api_ref/pkcs11)
        new_pin: const secure_string &new_pin	(api_ref/pkcs11)
      init_pin: void init_pin(const secure_string &new_pin)	(api_ref/pkcs11)
        new_pin: const secure_string &new_pin	(api_ref/pkcs11)
    AttributeContainer: AttributeContainer	(api_ref/pkcs11)
      add_binary: void AttributeContainer::add_binary(AttributeType attribute, const uint8_t *value, size_t length)	(api_ref/pkcs11)
        attribute: AttributeType attribute	(api_ref/pkcs11)
        value: const uint8_t *value	(api_ref/pkcs11)
        length: size_t length	(api_ref/pkcs11)
      template<typename TAlloc> 
      add_binary: template<typename TAlloc> void AttributeContainer::add_binary(AttributeType attribute, const std::vector<uint8_t, TAlloc> &binary)	(api_ref/pkcs11)
        TAlloc: typename TAlloc	(api_ref/pkcs11)
        attribute: AttributeType attribute	(api_ref/pkcs11)
        binary: const std::vector<uint8_t, TAlloc> &binary	(api_ref/pkcs11)
      add_bool: void AttributeContainer::add_bool(AttributeType attribute, bool value)	(api_ref/pkcs11)
        attribute: AttributeType attribute	(api_ref/pkcs11)
        value: bool value	(api_ref/pkcs11)
      template<typename T> 
      add_numeric: template<typename T> void AttributeContainer::add_numeric(AttributeType attribute, T value)	(api_ref/pkcs11)
        T: typename T	(api_ref/pkcs11)
        attribute: AttributeType attribute	(api_ref/pkcs11)
        value: T value	(api_ref/pkcs11)
    add_class: void add_class(ObjectClass object_class)	(api_ref/pkcs11)
      object_class: ObjectClass object_class	(api_ref/pkcs11)
    add_string: void add_string(AttributeType attribute, const std::string &value)	(api_ref/pkcs11)
      attribute: AttributeType attribute	(api_ref/pkcs11)
      value: const std::string &value	(api_ref/pkcs11)
    ObjectProperties: ObjectProperties : public AttributeContainer	(api_ref/pkcs11)
      object_class: ObjectClass object_class	(api_ref/pkcs11)
    StorageObjectProperties: StorageObjectProperties : public ObjectProperties	(api_ref/pkcs11)
      object_class: ObjectClass object_class	(api_ref/pkcs11)
    set_label: void set_label(const std::string &label)	(api_ref/pkcs11)
      label: const std::string &label	(api_ref/pkcs11)
    Object: Object	(api_ref/pkcs11)
      session: Session &session	(api_ref/pkcs11)
      handle: ObjectHandle handle	(api_ref/pkcs11)
      obj_props: const ObjectProperties &obj_props	(api_ref/pkcs11)
    get_attribute_value: secure_vector<uint8_t> get_attribute_value(AttributeType attribute) const	(api_ref/pkcs11)
      attribute: AttributeType attribute	(api_ref/pkcs11)
    set_attribute_value: void set_attribute_value(AttributeType attribute, const secure_vector<uint8_t> &value) const	(api_ref/pkcs11)
      attribute: AttributeType attribute	(api_ref/pkcs11)
      value: const secure_vector<uint8_t> &value	(api_ref/pkcs11)
    destroy: void destroy() const	(api_ref/pkcs11)
    copy: ObjectHandle copy(const AttributeContainer &modified_attributes) const	(api_ref/pkcs11)
      modified_attributes: const AttributeContainer &modified_attributes	(api_ref/pkcs11)
    template<typename T> 
    search: template<typename T> static std::vector<T> search(Session &session, const std::vector<Attribute> &search_template)	(api_ref/pkcs11)
      T: typename T	(api_ref/pkcs11)
      session: Session &session	(api_ref/pkcs11)
      search_template: const std::vector<Attribute> &search_template	(api_ref/pkcs11)
      label: const std::string &label	(api_ref/pkcs11)
      id: const std::vector<uint8_t> &id	(api_ref/pkcs11)
    ObjectFinder: ObjectFinder	(api_ref/pkcs11)
      session: Session &session	(api_ref/pkcs11)
      search_template: const std::vector<Attribute> &search_template	(api_ref/pkcs11)
    find: std::vector<ObjectHandle> find(std::uint32_t max_count = 100) const	(api_ref/pkcs11)
      max_count: std::uint32_t max_count = 100	(api_ref/pkcs11)
    finish: void finish()	(api_ref/pkcs11)
    PKCS11_RSA_PublicKey: PKCS11_RSA_PublicKey : public RSA_PublicKey, public Object	(api_ref/pkcs11)
      PKCS11_RSA_PublicKey: PKCS11_RSA_PublicKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_RSA_PublicKey: PKCS11_RSA_PublicKey(Session &session, const RSA_PublicKeyImportProperties &pubkey_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        pubkey_props: const RSA_PublicKeyImportProperties &pubkey_props	(api_ref/pkcs11)
    PKCS11_RSA_PrivateKey: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object	(api_ref/pkcs11)
      PKCS11_RSA_PrivateKey: PKCS11_RSA_PrivateKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_RSA_PrivateKey: PKCS11_RSA_PrivateKey(Session &session, const RSA_PrivateKeyImportProperties &priv_key_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        priv_key_props: const RSA_PrivateKeyImportProperties &priv_key_props	(api_ref/pkcs11)
      PKCS11_RSA_PrivateKey: PKCS11_RSA_PrivateKey(Session &session, uint32_t bits, const RSA_PrivateKeyGenerationProperties &priv_key_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        bits: uint32_t bits	(api_ref/pkcs11)
        priv_key_props: const RSA_PrivateKeyGenerationProperties &priv_key_props	(api_ref/pkcs11)
      export_key: RSA_PrivateKey export_key() const	(api_ref/pkcs11)
    PKCS11
      generate_rsa_keypair: PKCS11_RSA_KeyPair PKCS11::generate_rsa_keypair(Session &session, const RSA_PublicKeyGenerationProperties &pub_props, const RSA_PrivateKeyGenerationProperties &priv_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        pub_props: const RSA_PublicKeyGenerationProperties &pub_props	(api_ref/pkcs11)
        priv_props: const RSA_PrivateKeyGenerationProperties &priv_props	(api_ref/pkcs11)
      generate_ecdsa_keypair: PKCS11_ECDSA_KeyPair PKCS11::generate_ecdsa_keypair(Session &session, const EC_PublicKeyGenerationProperties &pub_props, const EC_PrivateKeyGenerationProperties &priv_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        pub_props: const EC_PublicKeyGenerationProperties &pub_props	(api_ref/pkcs11)
        priv_props: const EC_PrivateKeyGenerationProperties &priv_props	(api_ref/pkcs11)
      generate_ecdh_keypair: PKCS11_ECDH_KeyPair PKCS11::generate_ecdh_keypair(Session &session, const EC_PublicKeyGenerationProperties &pub_props, const EC_PrivateKeyGenerationProperties &priv_props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        pub_props: const EC_PublicKeyGenerationProperties &pub_props	(api_ref/pkcs11)
        priv_props: const EC_PrivateKeyGenerationProperties &priv_props	(api_ref/pkcs11)
    PKCS11_ECDSA_PublicKey: PKCS11_ECDSA_PublicKey : public PKCS11_EC_PublicKey, public virtual ECDSA_PublicKey	(api_ref/pkcs11)
      PKCS11_ECDSA_PublicKey: PKCS11_ECDSA_PublicKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
        export_key: ECDSA_PublicKey PKCS11_ECDSA_PublicKey::export_key() const	(api_ref/pkcs11)
      PKCS11_ECDSA_PublicKey: PKCS11_ECDSA_PublicKey(Session &session, const EC_PublicKeyImportProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        props: const EC_PublicKeyImportProperties &props	(api_ref/pkcs11)
    PKCS11_ECDSA_PrivateKey: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey	(api_ref/pkcs11)
      PKCS11_ECDSA_PrivateKey: PKCS11_ECDSA_PrivateKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_ECDSA_PrivateKey: PKCS11_ECDSA_PrivateKey(Session &session, const EC_PrivateKeyImportProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        props: const EC_PrivateKeyImportProperties &props	(api_ref/pkcs11)
      PKCS11_ECDSA_PrivateKey: PKCS11_ECDSA_PrivateKey(Session &session, const std::vector<uint8_t> &ec_params, const EC_PrivateKeyGenerationProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        ec_params: const std::vector<uint8_t> &ec_params	(api_ref/pkcs11)
        props: const EC_PrivateKeyGenerationProperties &props	(api_ref/pkcs11)
      export_key: ECDSA_PrivateKey export_key() const	(api_ref/pkcs11)
    PKCS11_ECDH_PublicKey: PKCS11_ECDH_PublicKey : public PKCS11_EC_PublicKey	(api_ref/pkcs11)
      PKCS11_ECDH_PublicKey: PKCS11_ECDH_PublicKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_ECDH_PublicKey: PKCS11_ECDH_PublicKey(Session &session, const EC_PublicKeyImportProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        props: const EC_PublicKeyImportProperties &props	(api_ref/pkcs11)
      export_key: ECDH_PublicKey export_key() const	(api_ref/pkcs11)
    PKCS11_ECDH_PrivateKey: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key	(api_ref/pkcs11)
      PKCS11_ECDH_PrivateKey: PKCS11_ECDH_PrivateKey(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_ECDH_PrivateKey: PKCS11_ECDH_PrivateKey(Session &session, const EC_PrivateKeyImportProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        props: const EC_PrivateKeyImportProperties &props	(api_ref/pkcs11)
      PKCS11_ECDH_PrivateKey: PKCS11_ECDH_PrivateKey(Session &session, const std::vector<uint8_t> &ec_params, const EC_PrivateKeyGenerationProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        ec_params: const std::vector<uint8_t> &ec_params	(api_ref/pkcs11)
        props: const EC_PrivateKeyGenerationProperties &props	(api_ref/pkcs11)
      export_key: ECDH_PrivateKey export_key() const	(api_ref/pkcs11)
    PKCS11_RNG: PKCS11_RNG : public Hardware_RNG	(api_ref/pkcs11)
      PKCS11_RNG: PKCS11_RNG(Session &session)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
      randomize: void randomize(uint8_t output[], std::size_t length) override	(api_ref/pkcs11)
        output: uint8_t output[]	(api_ref/pkcs11)
        length: std::size_t length	(api_ref/pkcs11)
      add_entropy: void add_entropy(const uint8_t in[], std::size_t length) override	(api_ref/pkcs11)
        in: const uint8_t in[]	(api_ref/pkcs11)
        length: std::size_t length	(api_ref/pkcs11)
    initialize_token: void initialize_token(Slot &slot, const std::string &label, const secure_string &so_pin, const secure_string &pin)	(api_ref/pkcs11)
      slot: Slot &slot	(api_ref/pkcs11)
      label: const std::string &label	(api_ref/pkcs11)
      so_pin: const secure_string &so_pin	(api_ref/pkcs11)
      pin: const secure_string &pin	(api_ref/pkcs11)
    change_pin: void change_pin(Slot &slot, const secure_string &old_pin, const secure_string &new_pin)	(api_ref/pkcs11)
      slot: Slot &slot	(api_ref/pkcs11)
      old_pin: const secure_string &old_pin	(api_ref/pkcs11)
      new_pin: const secure_string &new_pin	(api_ref/pkcs11)
    change_so_pin: void change_so_pin(Slot &slot, const secure_string &old_so_pin, const secure_string &new_so_pin)	(api_ref/pkcs11)
      slot: Slot &slot	(api_ref/pkcs11)
      old_so_pin: const secure_string &old_so_pin	(api_ref/pkcs11)
      new_so_pin: const secure_string &new_so_pin	(api_ref/pkcs11)
    set_pin: void set_pin(Slot &slot, const secure_string &so_pin, const secure_string &pin)	(api_ref/pkcs11)
      slot: Slot &slot	(api_ref/pkcs11)
      so_pin: const secure_string &so_pin	(api_ref/pkcs11)
      pin: const secure_string &pin	(api_ref/pkcs11)
    PKCS11_X509_Certificate: PKCS11_X509_Certificate : public Object, public X509_Certificate	(api_ref/pkcs11)
      PKCS11_X509_Certificate: PKCS11_X509_Certificate(Session &session, ObjectHandle handle)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        handle: ObjectHandle handle	(api_ref/pkcs11)
      PKCS11_X509_Certificate: PKCS11_X509_Certificate(Session &session, const X509_CertificateProperties &props)	(api_ref/pkcs11)
        session: Session &session	(api_ref/pkcs11)
        props: const X509_CertificateProperties &props	(api_ref/pkcs11)
    PSK_Database: PSK_Database	(api_ref/psk_db)
      is_encrypted: bool is_encrypted() const	(api_ref/psk_db)
      list_names: std::set<std::string> list_names() const	(api_ref/psk_db)
      set: void set(const std::string &name, const uint8_t psk[], size_t psk_len)	(api_ref/psk_db)
        name: const std::string &name	(api_ref/psk_db)
        psk: const uint8_t psk[]	(api_ref/psk_db)
        psk_len: size_t psk_len	(api_ref/psk_db)
      get: secure_vector<uint8_t> get(const std::string &name) const	(api_ref/psk_db)
        name: const std::string &name	(api_ref/psk_db)
      remove: void remove(const std::string &name)	(api_ref/psk_db)
        name: const std::string &name	(api_ref/psk_db)
      set_str: void set_str(const std::string &name, const std::string &psk)	(api_ref/psk_db)
        name: const std::string &name	(api_ref/psk_db)
        psk: const std::string &psk	(api_ref/psk_db)
      template<typename Alloc> 
      set_vec: template<typename Alloc> void set_vec(const std::string &name, const std::vector<uint8_t, Alloc> &psk)	(api_ref/psk_db)
        Alloc: typename Alloc	(api_ref/psk_db)
        name: const std::string &name	(api_ref/psk_db)
        psk: const std::vector<uint8_t, Alloc> &psk	(api_ref/psk_db)
    Encrypted_PSK_Database: Encrypted_PSK_Database : public PSK_Database	(api_ref/psk_db)
      Encrypted_PSK_Database: Encrypted_PSK_Database(const secure_vector<uint8_t> &master_key)	(api_ref/psk_db)
        master_key: const secure_vector<uint8_t> &master_key	(api_ref/psk_db)
      kv_set: virtual void kv_set(const std::string &index, const std::string &value) = 0	(api_ref/psk_db)
        index: const std::string &index	(api_ref/psk_db)
        value: const std::string &value	(api_ref/psk_db)
      kv_get: virtual std::string kv_get(const std::string &index) const = 0	(api_ref/psk_db)
        index: const std::string &index	(api_ref/psk_db)
      kv_del: virtual void kv_del(const std::string &index) = 0	(api_ref/psk_db)
        index: const std::string &index	(api_ref/psk_db)
      kv_get_all: virtual std::set<std::string> kv_get_all() const = 0	(api_ref/psk_db)
    Encrypted_PSK_Database_SQL: Encrypted_PSK_Database_SQL : public Encrypted_PSK_Database	(api_ref/psk_db)
      Encrypted_PSK_Database_SQL: Encrypted_PSK_Database_SQL(const secure_vector<uint8_t> &master_key, std::shared_ptr<SQL_Database> db, const std::string &table_name)	(api_ref/psk_db)
        master_key: const secure_vector<uint8_t> &master_key	(api_ref/psk_db)
        db: std::shared_ptr<SQL_Database> db	(api_ref/psk_db)
        table_name: const std::string &table_name	(api_ref/psk_db)
    RSA_PrivateKey
      RSA_PrivateKey: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator &rng, size_t bits)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        bits: size_t bits	(api_ref/pubkey)
    DSA_PrivateKey
      DSA_PrivateKey: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator &rng, const DL_Group &group, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        group: const DL_Group &group	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    DH_PrivateKey
      DH_PrivateKey: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator &rng, const DL_Group &group, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        group: const DL_Group &group	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    ElGamal_PrivateKey
      ElGamal_PrivateKey: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator &rng, const DL_Group &group, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        group: const DL_Group &group	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    ECDSA_PrivateKey
      ECDSA_PrivateKey: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator &rng, const EC_Group &domain, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        domain: const EC_Group &domain	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    ECKCDSA_PrivateKey
      ECKCDSA_PrivateKey: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator &rng, const EC_Group &domain, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        domain: const EC_Group &domain	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    ECGDSA_PrivateKey
      ECGDSA_PrivateKey: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator &rng, const EC_Group &domain, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        domain: const EC_Group &domain	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    ECDH_PrivateKey
      ECDH_PrivateKey: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator &rng, const EC_Group &domain, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        domain: const EC_Group &domain	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    GOST_3410_PrivateKey
      GOST_3410_PrivateKey: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator &rng, const EC_Group &domain, const BigInt &x = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        domain: const EC_Group &domain	(api_ref/pubkey)
        x: const BigInt &x = 0	(api_ref/pubkey)
    PKCS8
      BER_encode: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key &key, RandomNumberGenerator &rng, const std::string &password, const std::string &pbe_algo = "")	(api_ref/pubkey)
        key: const Private_Key &key	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        password: const std::string &password	(api_ref/pubkey)
        pbe_algo: const std::string &pbe_algo = ""	(api_ref/pubkey)
      PEM_encode: std::string PKCS8::PEM_encode(const Private_Key &key, RandomNumberGenerator &rng, const std::string &pass, const std::string &pbe_algo = "")	(api_ref/pubkey)
        key: const Private_Key &key	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        pass: const std::string &pass	(api_ref/pubkey)
        pbe_algo: const std::string &pbe_algo = ""	(api_ref/pubkey)
      BER_encode: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key &key)	(api_ref/pubkey)
        key: const Private_Key &key	(api_ref/pubkey)
      PEM_encode: std::string PKCS8::PEM_encode(const Private_Key &key)	(api_ref/pubkey)
        key: const Private_Key &key	(api_ref/pubkey)
      load_key: Private_Key *PKCS8::load_key(DataSource &in, RandomNumberGenerator &rng, const User_Interface &ui)	(api_ref/pubkey)
        in: DataSource &in	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        ui: const User_Interface &ui	(api_ref/pubkey)
      load_key: Private_Key *PKCS8::load_key(DataSource &in, RandomNumberGenerator &rng, std::string passphrase = "")	(api_ref/pubkey)
        in: DataSource &in	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        passphrase: std::string passphrase = ""	(api_ref/pubkey)
      load_key: Private_Key *PKCS8::load_key(const std::string &filename, RandomNumberGenerator &rng, const User_Interface &ui)	(api_ref/pubkey)
        filename: const std::string &filename	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        ui: const User_Interface &ui	(api_ref/pubkey)
      load_key: Private_Key *PKCS8::load_key(const std::string &filename, RandomNumberGenerator &rng, const std::string &passphrase = "")	(api_ref/pubkey)
        filename: const std::string &filename	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        passphrase: const std::string &passphrase = ""	(api_ref/pubkey)
    User_Interface
      get_passphrase: std::string User_Interface::get_passphrase(const std::string &what, const std::string &source, UI_Result &result) const	(api_ref/pubkey)
        what: const std::string &what	(api_ref/pubkey)
        source: const std::string &source	(api_ref/pubkey)
        result: UI_Result &result	(api_ref/pubkey)
    X509
      BER_encode: std::vector<uint8_t> X509::BER_encode(const Public_Key &key)	(api_ref/pubkey)
        key: const Public_Key &key	(api_ref/pubkey)
      PEM_encode: std::string X509::PEM_encode(const Public_Key &key)	(api_ref/pubkey)
        key: const Public_Key &key	(api_ref/pubkey)
      load_key: Public_Key *X509::load_key(DataSource &in)	(api_ref/pubkey)
        in: DataSource &in	(api_ref/pubkey)
      load_key: Public_Key *X509::load_key(const secure_vector<uint8_t> &buffer)	(api_ref/pubkey)
        buffer: const secure_vector<uint8_t> &buffer	(api_ref/pubkey)
      load_key: Public_Key *X509::load_key(const std::string &filename)	(api_ref/pubkey)
        filename: const std::string &filename	(api_ref/pubkey)
    DL_Group
      DL_Group: DL_Group::DL_Group(const std::string &name)	(api_ref/pubkey)
        name: const std::string &name	(api_ref/pubkey)
      DL_Group: DL_Group::DL_Group(RandomNumberGenerator &rng, PrimeType type, size_t pbits, size_t qbits = 0)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        type: PrimeType type	(api_ref/pubkey)
        pbits: size_t pbits	(api_ref/pubkey)
        qbits: size_t qbits = 0	(api_ref/pubkey)
      DER_Encode: secure_vector<uint8_t> DL_Group::DER_Encode(Format format)	(api_ref/pubkey)
        format: Format format	(api_ref/pubkey)
      PEM_encode: std::string DL_Group::PEM_encode(Format format)	(api_ref/pubkey)
        format: Format format	(api_ref/pubkey)
      BER_decode: void DL_Group::BER_decode(DataSource &source, Format format)	(api_ref/pubkey)
        source: DataSource &source	(api_ref/pubkey)
        format: Format format	(api_ref/pubkey)
      PEM_decode: void DL_Group::PEM_decode(DataSource &source)	(api_ref/pubkey)
        source: DataSource &source	(api_ref/pubkey)
    Public_Key
      check_key: bool Public_Key::check_key(RandomNumberGenerator &rng, bool strong)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        strong: bool strong	(api_ref/pubkey)
    PK_Encryptor: PK_Encryptor	(api_ref/pubkey)
      encrypt: secure_vector<uint8_t> encrypt(const uint8_t *in, size_t length, RandomNumberGenerator &rng) const	(api_ref/pubkey)
        in: const uint8_t *in	(api_ref/pubkey)
        length: size_t length	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      encrypt: secure_vector<uint8_t> encrypt(const std::vector<uint8_t> &in, RandomNumberGenerator &rng) const	(api_ref/pubkey)
        in: const std::vector<uint8_t> &in	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      maximum_input_size: size_t maximum_input_size() const	(api_ref/pubkey)
    PK_Encryptor_EME: PK_Encryptor_EME	(api_ref/pubkey)
      PK_Encryptor_EME: PK_Encryptor_EME(const Public_Key &key, std::string eme)	(api_ref/pubkey)
        key: const Public_Key &key	(api_ref/pubkey)
        eme: std::string eme	(api_ref/pubkey)
    DLIES_Encryptor: DLIES_Encryptor	(api_ref/pubkey)
      DLIES_Encryptor: DLIES_Encryptor(const DH_PrivateKey &own_priv_key, RandomNumberGenerator &rng, KDF *kdf, MessageAuthenticationCode *mac, size_t mac_key_len = 20)	(api_ref/pubkey)
        own_priv_key: const DH_PrivateKey &own_priv_key	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        kdf: KDF *kdf	(api_ref/pubkey)
        mac: MessageAuthenticationCode *mac	(api_ref/pubkey)
        mac_key_len: size_t mac_key_len = 20	(api_ref/pubkey)
      DLIES_Encryptor: DLIES_Encryptor(const DH_PrivateKey &own_priv_key, RandomNumberGenerator &rng, KDF *kdf, Cipher_Mode *cipher, size_t cipher_key_len, MessageAuthenticationCode *mac, size_t mac_key_len = 20)	(api_ref/pubkey)
        own_priv_key: const DH_PrivateKey &own_priv_key	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        kdf: KDF *kdf	(api_ref/pubkey)
        cipher: Cipher_Mode *cipher	(api_ref/pubkey)
        cipher_key_len: size_t cipher_key_len	(api_ref/pubkey)
        mac: MessageAuthenticationCode *mac	(api_ref/pubkey)
        mac_key_len: size_t mac_key_len = 20	(api_ref/pubkey)
    ECIES_Encryptor: ECIES_Encryptor	(api_ref/pubkey)
      ECIES_Encryptor: ECIES_Encryptor(const PK_Key_Agreement_Key &private_key, const ECIES_System_Params &ecies_params, RandomNumberGenerator &rng)	(api_ref/pubkey)
        private_key: const PK_Key_Agreement_Key &private_key	(api_ref/pubkey)
        ecies_params: const ECIES_System_Params &ecies_params	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      ECIES_Encryptor: ECIES_Encryptor(RandomNumberGenerator &rng, const ECIES_System_Params &ecies_params)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
        ecies_params: const ECIES_System_Params &ecies_params	(api_ref/pubkey)
    PK_Signer: PK_Signer	(api_ref/pubkey)
      PK_Signer: PK_Signer(const Private_Key &key, const std::string &emsa, Signature_Format format = IEEE_1363)	(api_ref/pubkey)
        key: const Private_Key &key	(api_ref/pubkey)
        emsa: const std::string &emsa	(api_ref/pubkey)
        format: Signature_Format format = IEEE_1363	(api_ref/pubkey)
      update: void update(const uint8_t *in, size_t length)	(api_ref/pubkey)
        in: const uint8_t *in	(api_ref/pubkey)
        length: size_t length	(api_ref/pubkey)
      update: void update(const std::vector<uint8_t> &in)	(api_ref/pubkey)
        in: const std::vector<uint8_t> &in	(api_ref/pubkey)
      update: void update(uint8_t in)	(api_ref/pubkey)
        in: uint8_t in	(api_ref/pubkey)
      signature: secure_vector<uint8_t> signature(RandomNumberGenerator &rng)	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      sign_message: secure_vector<uint8_t> sign_message(const uint8_t *in, size_t length, RandomNumberGenerator &rng)	(api_ref/pubkey)
        in: const uint8_t *in	(api_ref/pubkey)
        length: size_t length	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      sign_message: secure_vector<uint8_t> sign_message(const std::vector<uint8_t> &in, RandomNumberGenerator &rng)	(api_ref/pubkey)
        in: const std::vector<uint8_t> &in	(api_ref/pubkey)
        rng: RandomNumberGenerator &rng	(api_ref/pubkey)
    PK_Verifier: PK_Verifier	(api_ref/pubkey)
      PK_Verifier: PK_Verifier(const Public_Key &pub_key, const std::string &emsa, Signature_Format format = IEEE_1363)	(api_ref/pubkey)
        pub_key: const Public_Key &pub_key	(api_ref/pubkey)
        emsa: const std::string &emsa	(api_ref/pubkey)
        format: Signature_Format format = IEEE_1363	(api_ref/pubkey)
      update: void update(const uint8_t *in, size_t length)	(api_ref/pubkey)
        in: const uint8_t *in	(api_ref/pubkey)
        length: size_t length	(api_ref/pubkey)
      update: void update(const std::vector<uint8_t> &in)	(api_ref/pubkey)
        in: const std::vector<uint8_t> &in	(api_ref/pubkey)
      update: void update(uint8_t in)	(api_ref/pubkey)
        in: uint8_t in	(api_ref/pubkey)
      check_signature: bool check_signature(const uint8_t *sig, size_t length)	(api_ref/pubkey)
        sig: const uint8_t *sig	(api_ref/pubkey)
        length: size_t length	(api_ref/pubkey)
      check_signature: bool check_signature(const std::vector<uint8_t> &sig)	(api_ref/pubkey)
        sig: const std::vector<uint8_t> &sig	(api_ref/pubkey)
      verify_message: bool verify_message(const uint8_t *msg, size_t msg_length, const uint8_t *sig, size_t sig_length)	(api_ref/pubkey)
        msg: const uint8_t *msg	(api_ref/pubkey)
        msg_length: size_t msg_length	(api_ref/pubkey)
        sig: const uint8_t *sig	(api_ref/pubkey)
        sig_length: size_t sig_length	(api_ref/pubkey)
      verify_message: bool verify_message(const std::vector<uint8_t> &msg, const std::vector<uint8_t> &sig)	(api_ref/pubkey)
        msg: const std::vector<uint8_t> &msg	(api_ref/pubkey)
        sig: const std::vector<uint8_t> &sig	(api_ref/pubkey)
    mceies_encrypt: secure_vector<uint8_t> mceies_encrypt(const McEliece_PublicKey &pubkey, const secure_vector<uint8_t> &pt, uint8_t ad[], size_t ad_len, RandomNumberGenerator &rng, const std::string &aead = "AES-256/OCB")	(api_ref/pubkey)
      pubkey: const McEliece_PublicKey &pubkey	(api_ref/pubkey)
      pt: const secure_vector<uint8_t> &pt	(api_ref/pubkey)
      ad: uint8_t ad[]	(api_ref/pubkey)
      ad_len: size_t ad_len	(api_ref/pubkey)
      rng: RandomNumberGenerator &rng	(api_ref/pubkey)
      aead: const std::string &aead = "AES-256/OCB"	(api_ref/pubkey)
    mceies_decrypt: secure_vector<uint8_t> mceies_decrypt(const McEliece_PrivateKey &privkey, const secure_vector<uint8_t> &ct, uint8_t ad[], size_t ad_len, const std::string &aead = "AES-256/OCB")	(api_ref/pubkey)
      privkey: const McEliece_PrivateKey &privkey	(api_ref/pubkey)
      ct: const secure_vector<uint8_t> &ct	(api_ref/pubkey)
      ad: uint8_t ad[]	(api_ref/pubkey)
      ad_len: size_t ad_len	(api_ref/pubkey)
      aead: const std::string &aead = "AES-256/OCB"	(api_ref/pubkey)

Exception occurred:
  File "/usr/lib/python3.8/site-packages/sphinx/domains/cpp.py", line 7171, in _resolve_xref_inner
    assert parentSymbol  # should be there
AssertionError
The full traceback has been saved in /tmp/sphinx-err-jlaa0q8x.log, if you want to report the issue to the developers.
Please also report this if it was a user error, so that a better error message can be provided next time.
A bug report can be filed in the tracker at <https://github.com/sphinx-doc/sphinx/issues>. Thanks!

  ERROR: Error running sphinx-build -q -c ./src/configs/sphinx -j 4 -b html ./doc build/docs/handbook
make: *** [Makefile:49: build/doc.stamp] Error 1
make: *** Waiting for unfinished jobs....
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_tls.cpp -o build/obj/test/unit_tls.o
g++ -fstack-protector -m64 -pthread -std=c++11 -D_REENTRANT  -g -O3 -DBOTAN_IS_BEING_BUILT -Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor  -Ibuild/include -Ibuild/include/external -c src/tests/unit_x509.cpp -o build/obj/test/unit_x509.o
error: Bad exit status from /home/stig/rpmbuild/tmp/rpm-tmp.BeIQqu (%build)


RPM build errors:
    Bad exit status from /home/stig/rpmbuild/tmp/rpm-tmp.BeIQqu (%build)
I: [iurt_root_command] ERROR: chroot
